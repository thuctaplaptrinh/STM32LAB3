
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003008  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003114  08003114  00013114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003138  08003138  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08003138  08003138  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003138  08003138  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003138  08003138  00013138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800313c  0800313c  0001313c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08003140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000054  08003194  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08003194  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a0a8  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c84  00000000  00000000  0002a125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  0002bdb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000998  00000000  00000000  0002c850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016eaa  00000000  00000000  0002d1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c458  00000000  00000000  00044092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000826dd  00000000  00000000  000504ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2bc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029e4  00000000  00000000  000d2c1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000054 	.word	0x20000054
 8000128:	00000000 	.word	0x00000000
 800012c:	080030fc 	.word	0x080030fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000058 	.word	0x20000058
 8000148:	080030fc 	.word	0x080030fc

0800014c <subKeyProcess>:
// after the button is pressed more than 1 second .
int counterForButtonPress1s [ BUTTONS_NUMBER ] = {100, 100, 100};
//int counterForButtonPress1s = 100;
//int TimeOutForKeyPress = 100;

void subKeyProcess(int i){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	button_flag[i] = 1;
 8000154:	4a04      	ldr	r2, [pc, #16]	; (8000168 <subKeyProcess+0x1c>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	2101      	movs	r1, #1
 800015a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800015e:	bf00      	nop
 8000160:	370c      	adds	r7, #12
 8000162:	46bd      	mov	sp, r7
 8000164:	bc80      	pop	{r7}
 8000166:	4770      	bx	lr
 8000168:	20000070 	.word	0x20000070

0800016c <getKeyInput>:

void getKeyInput () {
 800016c:	b580      	push	{r7, lr}
 800016e:	b082      	sub	sp, #8
 8000170:	af00      	add	r7, sp, #0
	for ( int i = 0; i < BUTTONS_NUMBER ; i++) {
 8000172:	2300      	movs	r3, #0
 8000174:	607b      	str	r3, [r7, #4]
 8000176:	e073      	b.n	8000260 <getKeyInput+0xf4>
		KeyReg2[i] = KeyReg1[i];
 8000178:	4a3d      	ldr	r2, [pc, #244]	; (8000270 <getKeyInput+0x104>)
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000180:	493c      	ldr	r1, [pc, #240]	; (8000274 <getKeyInput+0x108>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 8000188:	4a3b      	ldr	r2, [pc, #236]	; (8000278 <getKeyInput+0x10c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000190:	4937      	ldr	r1, [pc, #220]	; (8000270 <getKeyInput+0x104>)
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg0[0] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8000198:	2101      	movs	r1, #1
 800019a:	4838      	ldr	r0, [pc, #224]	; (800027c <getKeyInput+0x110>)
 800019c:	f001 ff82 	bl	80020a4 <HAL_GPIO_ReadPin>
 80001a0:	4603      	mov	r3, r0
 80001a2:	461a      	mov	r2, r3
 80001a4:	4b34      	ldr	r3, [pc, #208]	; (8000278 <getKeyInput+0x10c>)
 80001a6:	601a      	str	r2, [r3, #0]
		KeyReg0[1] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 80001a8:	2102      	movs	r1, #2
 80001aa:	4834      	ldr	r0, [pc, #208]	; (800027c <getKeyInput+0x110>)
 80001ac:	f001 ff7a 	bl	80020a4 <HAL_GPIO_ReadPin>
 80001b0:	4603      	mov	r3, r0
 80001b2:	461a      	mov	r2, r3
 80001b4:	4b30      	ldr	r3, [pc, #192]	; (8000278 <getKeyInput+0x10c>)
 80001b6:	605a      	str	r2, [r3, #4]
		KeyReg0[2] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 80001b8:	2104      	movs	r1, #4
 80001ba:	4830      	ldr	r0, [pc, #192]	; (800027c <getKeyInput+0x110>)
 80001bc:	f001 ff72 	bl	80020a4 <HAL_GPIO_ReadPin>
 80001c0:	4603      	mov	r3, r0
 80001c2:	461a      	mov	r2, r3
 80001c4:	4b2c      	ldr	r3, [pc, #176]	; (8000278 <getKeyInput+0x10c>)
 80001c6:	609a      	str	r2, [r3, #8]
		if( KeyReg1[i] == KeyReg0[i] && KeyReg1[i] == KeyReg2[i] ){
 80001c8:	4a29      	ldr	r2, [pc, #164]	; (8000270 <getKeyInput+0x104>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d0:	4929      	ldr	r1, [pc, #164]	; (8000278 <getKeyInput+0x10c>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001d8:	429a      	cmp	r2, r3
 80001da:	d13e      	bne.n	800025a <getKeyInput+0xee>
 80001dc:	4a24      	ldr	r2, [pc, #144]	; (8000270 <getKeyInput+0x104>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001e4:	4923      	ldr	r1, [pc, #140]	; (8000274 <getKeyInput+0x108>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001ec:	429a      	cmp	r2, r3
 80001ee:	d134      	bne.n	800025a <getKeyInput+0xee>
			if(KeyReg0[i] != KeyReg3[i]){
 80001f0:	4a21      	ldr	r2, [pc, #132]	; (8000278 <getKeyInput+0x10c>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f8:	4921      	ldr	r1, [pc, #132]	; (8000280 <getKeyInput+0x114>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000200:	429a      	cmp	r2, r3
 8000202:	d016      	beq.n	8000232 <getKeyInput+0xc6>
				KeyReg3[i] = KeyReg0[i];
 8000204:	4a1c      	ldr	r2, [pc, #112]	; (8000278 <getKeyInput+0x10c>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020c:	491c      	ldr	r1, [pc, #112]	; (8000280 <getKeyInput+0x114>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(KeyReg0[i] == PRESSED_STATE){
 8000214:	4a18      	ldr	r2, [pc, #96]	; (8000278 <getKeyInput+0x10c>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d11c      	bne.n	800025a <getKeyInput+0xee>
					//TODO
					subKeyProcess(i);
 8000220:	6878      	ldr	r0, [r7, #4]
 8000222:	f7ff ff93 	bl	800014c <subKeyProcess>
					counterForButtonPress1s[i] = 100;
 8000226:	4a17      	ldr	r2, [pc, #92]	; (8000284 <getKeyInput+0x118>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2164      	movs	r1, #100	; 0x64
 800022c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000230:	e013      	b.n	800025a <getKeyInput+0xee>
				}
			}
			else {
				counterForButtonPress1s[i]--;
 8000232:	4a14      	ldr	r2, [pc, #80]	; (8000284 <getKeyInput+0x118>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800023a:	1e5a      	subs	r2, r3, #1
 800023c:	4911      	ldr	r1, [pc, #68]	; (8000284 <getKeyInput+0x118>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(counterForButtonPress1s[i] <= 0){
 8000244:	4a0f      	ldr	r2, [pc, #60]	; (8000284 <getKeyInput+0x118>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800024c:	2b00      	cmp	r3, #0
 800024e:	dc04      	bgt.n	800025a <getKeyInput+0xee>
//					if(KeyReg0[i] == PRESSED_STATE){
//						//TODO
//						subKeyProcess(i);
//					}
//					counterForButtonPress1s[i] = 100;
					KeyReg3[i] = NORMAL_STATE;
 8000250:	4a0b      	ldr	r2, [pc, #44]	; (8000280 <getKeyInput+0x114>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	2101      	movs	r1, #1
 8000256:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for ( int i = 0; i < BUTTONS_NUMBER ; i++) {
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	3301      	adds	r3, #1
 800025e:	607b      	str	r3, [r7, #4]
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	2b02      	cmp	r3, #2
 8000264:	dd88      	ble.n	8000178 <getKeyInput+0xc>
				}
			}
		}
	}
}
 8000266:	bf00      	nop
 8000268:	bf00      	nop
 800026a:	3708      	adds	r7, #8
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	2000000c 	.word	0x2000000c
 8000274:	20000018 	.word	0x20000018
 8000278:	20000000 	.word	0x20000000
 800027c:	40010c00 	.word	0x40010c00
 8000280:	20000024 	.word	0x20000024
 8000284:	20000030 	.word	0x20000030

08000288 <is_button_pressed>:

int is_button_pressed ( int index ) {
 8000288:	b480      	push	{r7}
 800028a:	b083      	sub	sp, #12
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 8000290:	4a09      	ldr	r2, [pc, #36]	; (80002b8 <is_button_pressed+0x30>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000298:	2b01      	cmp	r3, #1
 800029a:	d106      	bne.n	80002aa <is_button_pressed+0x22>
		button_flag[index] = 0;
 800029c:	4a06      	ldr	r2, [pc, #24]	; (80002b8 <is_button_pressed+0x30>)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	2100      	movs	r1, #0
 80002a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80002a6:	2301      	movs	r3, #1
 80002a8:	e000      	b.n	80002ac <is_button_pressed+0x24>
	}
	return 0;
 80002aa:	2300      	movs	r3, #0
}
 80002ac:	4618      	mov	r0, r3
 80002ae:	370c      	adds	r7, #12
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bc80      	pop	{r7}
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	20000070 	.word	0x20000070

080002bc <fsm_auto>:
 *      Author: Asus
 */

#include "fsm_automatic.h"

void fsm_auto(){
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	if(MODE == MODE1){
 80002c0:	4b95      	ldr	r3, [pc, #596]	; (8000518 <fsm_auto+0x25c>)
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	2b01      	cmp	r3, #1
 80002c6:	f040 8124 	bne.w	8000512 <fsm_auto+0x256>
		switch(TopToBottomLedAutoState){
 80002ca:	4b94      	ldr	r3, [pc, #592]	; (800051c <fsm_auto+0x260>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	2b03      	cmp	r3, #3
 80002d0:	d862      	bhi.n	8000398 <fsm_auto+0xdc>
 80002d2:	a201      	add	r2, pc, #4	; (adr r2, 80002d8 <fsm_auto+0x1c>)
 80002d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002d8:	080002e9 	.word	0x080002e9
 80002dc:	080002f7 	.word	0x080002f7
 80002e0:	0800032d 	.word	0x0800032d
 80002e4:	08000363 	.word	0x08000363
		case LED_INIT:
			// turn off all led
			TopToBottomLedAutoState = RED;
 80002e8:	4b8c      	ldr	r3, [pc, #560]	; (800051c <fsm_auto+0x260>)
 80002ea:	2201      	movs	r2, #1
 80002ec:	701a      	strb	r2, [r3, #0]
			setTimer0(100);
 80002ee:	2064      	movs	r0, #100	; 0x64
 80002f0:	f001 fa6c 	bl	80017cc <setTimer0>
			break;
 80002f4:	e057      	b.n	80003a6 <fsm_auto+0xea>
		case RED:
			displayTopToBottomLED(RED);
 80002f6:	2001      	movs	r0, #1
 80002f8:	f000 ff8a 	bl	8001210 <displayTopToBottomLED>
			if(timer0_flag == 1){
 80002fc:	4b88      	ldr	r3, [pc, #544]	; (8000520 <fsm_auto+0x264>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	2b01      	cmp	r3, #1
 8000302:	d14b      	bne.n	800039c <fsm_auto+0xe0>
				countdownTopToBottomLed--;
 8000304:	4b87      	ldr	r3, [pc, #540]	; (8000524 <fsm_auto+0x268>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	3b01      	subs	r3, #1
 800030a:	4a86      	ldr	r2, [pc, #536]	; (8000524 <fsm_auto+0x268>)
 800030c:	6013      	str	r3, [r2, #0]
				if(countdownTopToBottomLed <= 0){
 800030e:	4b85      	ldr	r3, [pc, #532]	; (8000524 <fsm_auto+0x268>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	2b00      	cmp	r3, #0
 8000314:	dc06      	bgt.n	8000324 <fsm_auto+0x68>
					countdownTopToBottomLed = greenDelay;
 8000316:	4b84      	ldr	r3, [pc, #528]	; (8000528 <fsm_auto+0x26c>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4a82      	ldr	r2, [pc, #520]	; (8000524 <fsm_auto+0x268>)
 800031c:	6013      	str	r3, [r2, #0]
					TopToBottomLedAutoState = GREEN;
 800031e:	4b7f      	ldr	r3, [pc, #508]	; (800051c <fsm_auto+0x260>)
 8000320:	2202      	movs	r2, #2
 8000322:	701a      	strb	r2, [r3, #0]
				}
				setTimer0(100);
 8000324:	2064      	movs	r0, #100	; 0x64
 8000326:	f001 fa51 	bl	80017cc <setTimer0>
			}
			break;
 800032a:	e037      	b.n	800039c <fsm_auto+0xe0>
		case GREEN:
			displayTopToBottomLED(GREEN);
 800032c:	2002      	movs	r0, #2
 800032e:	f000 ff6f 	bl	8001210 <displayTopToBottomLED>
			if(timer0_flag == 1){
 8000332:	4b7b      	ldr	r3, [pc, #492]	; (8000520 <fsm_auto+0x264>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	2b01      	cmp	r3, #1
 8000338:	d132      	bne.n	80003a0 <fsm_auto+0xe4>
				countdownTopToBottomLed--;
 800033a:	4b7a      	ldr	r3, [pc, #488]	; (8000524 <fsm_auto+0x268>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	3b01      	subs	r3, #1
 8000340:	4a78      	ldr	r2, [pc, #480]	; (8000524 <fsm_auto+0x268>)
 8000342:	6013      	str	r3, [r2, #0]
				if(countdownTopToBottomLed <= 0){
 8000344:	4b77      	ldr	r3, [pc, #476]	; (8000524 <fsm_auto+0x268>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	2b00      	cmp	r3, #0
 800034a:	dc06      	bgt.n	800035a <fsm_auto+0x9e>
					countdownTopToBottomLed = yellowDelay;
 800034c:	4b77      	ldr	r3, [pc, #476]	; (800052c <fsm_auto+0x270>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a74      	ldr	r2, [pc, #464]	; (8000524 <fsm_auto+0x268>)
 8000352:	6013      	str	r3, [r2, #0]
					TopToBottomLedAutoState = YELLOW;
 8000354:	4b71      	ldr	r3, [pc, #452]	; (800051c <fsm_auto+0x260>)
 8000356:	2203      	movs	r2, #3
 8000358:	701a      	strb	r2, [r3, #0]
				}
				setTimer0(100);
 800035a:	2064      	movs	r0, #100	; 0x64
 800035c:	f001 fa36 	bl	80017cc <setTimer0>
			}
			break;
 8000360:	e01e      	b.n	80003a0 <fsm_auto+0xe4>
		case YELLOW:
			displayTopToBottomLED(YELLOW);
 8000362:	2003      	movs	r0, #3
 8000364:	f000 ff54 	bl	8001210 <displayTopToBottomLED>
			if(timer0_flag == 1){
 8000368:	4b6d      	ldr	r3, [pc, #436]	; (8000520 <fsm_auto+0x264>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	2b01      	cmp	r3, #1
 800036e:	d119      	bne.n	80003a4 <fsm_auto+0xe8>
				countdownTopToBottomLed--;
 8000370:	4b6c      	ldr	r3, [pc, #432]	; (8000524 <fsm_auto+0x268>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	3b01      	subs	r3, #1
 8000376:	4a6b      	ldr	r2, [pc, #428]	; (8000524 <fsm_auto+0x268>)
 8000378:	6013      	str	r3, [r2, #0]
				if(countdownTopToBottomLed <= 0){
 800037a:	4b6a      	ldr	r3, [pc, #424]	; (8000524 <fsm_auto+0x268>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	2b00      	cmp	r3, #0
 8000380:	dc06      	bgt.n	8000390 <fsm_auto+0xd4>
					countdownTopToBottomLed = redDelay;
 8000382:	4b6b      	ldr	r3, [pc, #428]	; (8000530 <fsm_auto+0x274>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a67      	ldr	r2, [pc, #412]	; (8000524 <fsm_auto+0x268>)
 8000388:	6013      	str	r3, [r2, #0]
					TopToBottomLedAutoState = RED;
 800038a:	4b64      	ldr	r3, [pc, #400]	; (800051c <fsm_auto+0x260>)
 800038c:	2201      	movs	r2, #1
 800038e:	701a      	strb	r2, [r3, #0]
				}
				setTimer0(100);
 8000390:	2064      	movs	r0, #100	; 0x64
 8000392:	f001 fa1b 	bl	80017cc <setTimer0>
			}
			break;
 8000396:	e005      	b.n	80003a4 <fsm_auto+0xe8>
		default:
			break;
 8000398:	bf00      	nop
 800039a:	e004      	b.n	80003a6 <fsm_auto+0xea>
			break;
 800039c:	bf00      	nop
 800039e:	e002      	b.n	80003a6 <fsm_auto+0xea>
			break;
 80003a0:	bf00      	nop
 80003a2:	e000      	b.n	80003a6 <fsm_auto+0xea>
			break;
 80003a4:	bf00      	nop
		}

		switch(LeftToRightLedAutoState){
 80003a6:	4b63      	ldr	r3, [pc, #396]	; (8000534 <fsm_auto+0x278>)
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	2b03      	cmp	r3, #3
 80003ac:	d862      	bhi.n	8000474 <fsm_auto+0x1b8>
 80003ae:	a201      	add	r2, pc, #4	; (adr r2, 80003b4 <fsm_auto+0xf8>)
 80003b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003b4:	080003c5 	.word	0x080003c5
 80003b8:	080003d3 	.word	0x080003d3
 80003bc:	08000409 	.word	0x08000409
 80003c0:	0800043f 	.word	0x0800043f
		case LED_INIT:
			// turn off all led
			LeftToRightLedAutoState = GREEN;
 80003c4:	4b5b      	ldr	r3, [pc, #364]	; (8000534 <fsm_auto+0x278>)
 80003c6:	2202      	movs	r2, #2
 80003c8:	701a      	strb	r2, [r3, #0]
			setTimer1(100);
 80003ca:	2064      	movs	r0, #100	; 0x64
 80003cc:	f001 fa12 	bl	80017f4 <setTimer1>
			break;
 80003d0:	e057      	b.n	8000482 <fsm_auto+0x1c6>
		case RED:
			displayLeftToRightLED(RED);
 80003d2:	2001      	movs	r0, #1
 80003d4:	f000 ff78 	bl	80012c8 <displayLeftToRightLED>
			if(timer1_flag == 1){
 80003d8:	4b57      	ldr	r3, [pc, #348]	; (8000538 <fsm_auto+0x27c>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	2b01      	cmp	r3, #1
 80003de:	d14b      	bne.n	8000478 <fsm_auto+0x1bc>
				countdownLeftToRightLed--;
 80003e0:	4b56      	ldr	r3, [pc, #344]	; (800053c <fsm_auto+0x280>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	3b01      	subs	r3, #1
 80003e6:	4a55      	ldr	r2, [pc, #340]	; (800053c <fsm_auto+0x280>)
 80003e8:	6013      	str	r3, [r2, #0]
				if(countdownLeftToRightLed <= 0){
 80003ea:	4b54      	ldr	r3, [pc, #336]	; (800053c <fsm_auto+0x280>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	dc06      	bgt.n	8000400 <fsm_auto+0x144>
					countdownLeftToRightLed = greenDelay;
 80003f2:	4b4d      	ldr	r3, [pc, #308]	; (8000528 <fsm_auto+0x26c>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a51      	ldr	r2, [pc, #324]	; (800053c <fsm_auto+0x280>)
 80003f8:	6013      	str	r3, [r2, #0]
					LeftToRightLedAutoState = GREEN;
 80003fa:	4b4e      	ldr	r3, [pc, #312]	; (8000534 <fsm_auto+0x278>)
 80003fc:	2202      	movs	r2, #2
 80003fe:	701a      	strb	r2, [r3, #0]
				}
				setTimer1(100);
 8000400:	2064      	movs	r0, #100	; 0x64
 8000402:	f001 f9f7 	bl	80017f4 <setTimer1>
			}
			break;
 8000406:	e037      	b.n	8000478 <fsm_auto+0x1bc>
		case GREEN:
			displayLeftToRightLED(GREEN);
 8000408:	2002      	movs	r0, #2
 800040a:	f000 ff5d 	bl	80012c8 <displayLeftToRightLED>
			if(timer1_flag == 1){
 800040e:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <fsm_auto+0x27c>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	2b01      	cmp	r3, #1
 8000414:	d132      	bne.n	800047c <fsm_auto+0x1c0>
				countdownLeftToRightLed--;
 8000416:	4b49      	ldr	r3, [pc, #292]	; (800053c <fsm_auto+0x280>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	3b01      	subs	r3, #1
 800041c:	4a47      	ldr	r2, [pc, #284]	; (800053c <fsm_auto+0x280>)
 800041e:	6013      	str	r3, [r2, #0]
				if(countdownLeftToRightLed <= 0){
 8000420:	4b46      	ldr	r3, [pc, #280]	; (800053c <fsm_auto+0x280>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	2b00      	cmp	r3, #0
 8000426:	dc06      	bgt.n	8000436 <fsm_auto+0x17a>
					countdownLeftToRightLed = yellowDelay;
 8000428:	4b40      	ldr	r3, [pc, #256]	; (800052c <fsm_auto+0x270>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a43      	ldr	r2, [pc, #268]	; (800053c <fsm_auto+0x280>)
 800042e:	6013      	str	r3, [r2, #0]
					LeftToRightLedAutoState = YELLOW;
 8000430:	4b40      	ldr	r3, [pc, #256]	; (8000534 <fsm_auto+0x278>)
 8000432:	2203      	movs	r2, #3
 8000434:	701a      	strb	r2, [r3, #0]
				}
				setTimer1(100);
 8000436:	2064      	movs	r0, #100	; 0x64
 8000438:	f001 f9dc 	bl	80017f4 <setTimer1>
			}
			break;
 800043c:	e01e      	b.n	800047c <fsm_auto+0x1c0>
		case YELLOW:
			displayLeftToRightLED(YELLOW);
 800043e:	2003      	movs	r0, #3
 8000440:	f000 ff42 	bl	80012c8 <displayLeftToRightLED>
			if(timer1_flag == 1){
 8000444:	4b3c      	ldr	r3, [pc, #240]	; (8000538 <fsm_auto+0x27c>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d119      	bne.n	8000480 <fsm_auto+0x1c4>
				countdownLeftToRightLed--;
 800044c:	4b3b      	ldr	r3, [pc, #236]	; (800053c <fsm_auto+0x280>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	3b01      	subs	r3, #1
 8000452:	4a3a      	ldr	r2, [pc, #232]	; (800053c <fsm_auto+0x280>)
 8000454:	6013      	str	r3, [r2, #0]
				if(countdownLeftToRightLed <= 0){
 8000456:	4b39      	ldr	r3, [pc, #228]	; (800053c <fsm_auto+0x280>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	2b00      	cmp	r3, #0
 800045c:	dc06      	bgt.n	800046c <fsm_auto+0x1b0>
					countdownLeftToRightLed = redDelay;
 800045e:	4b34      	ldr	r3, [pc, #208]	; (8000530 <fsm_auto+0x274>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4a36      	ldr	r2, [pc, #216]	; (800053c <fsm_auto+0x280>)
 8000464:	6013      	str	r3, [r2, #0]
					LeftToRightLedAutoState = RED;
 8000466:	4b33      	ldr	r3, [pc, #204]	; (8000534 <fsm_auto+0x278>)
 8000468:	2201      	movs	r2, #1
 800046a:	701a      	strb	r2, [r3, #0]
				}
				setTimer1(100);
 800046c:	2064      	movs	r0, #100	; 0x64
 800046e:	f001 f9c1 	bl	80017f4 <setTimer1>
			}
			break;
 8000472:	e005      	b.n	8000480 <fsm_auto+0x1c4>
		default:
			break;
 8000474:	bf00      	nop
 8000476:	e004      	b.n	8000482 <fsm_auto+0x1c6>
			break;
 8000478:	bf00      	nop
 800047a:	e002      	b.n	8000482 <fsm_auto+0x1c6>
			break;
 800047c:	bf00      	nop
 800047e:	e000      	b.n	8000482 <fsm_auto+0x1c6>
			break;
 8000480:	bf00      	nop
		}

		switch(seg7AutoState){
 8000482:	4b2f      	ldr	r3, [pc, #188]	; (8000540 <fsm_auto+0x284>)
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	2b02      	cmp	r3, #2
 8000488:	d020      	beq.n	80004cc <fsm_auto+0x210>
 800048a:	2b02      	cmp	r3, #2
 800048c:	dc31      	bgt.n	80004f2 <fsm_auto+0x236>
 800048e:	2b00      	cmp	r3, #0
 8000490:	d002      	beq.n	8000498 <fsm_auto+0x1dc>
 8000492:	2b01      	cmp	r3, #1
 8000494:	d007      	beq.n	80004a6 <fsm_auto+0x1ea>
					seg7AutoState = FIRST;
					setTimer2(50);
				}
				break;
			default:
				break;
 8000496:	e02c      	b.n	80004f2 <fsm_auto+0x236>
				seg7AutoState = FIRST;
 8000498:	4b29      	ldr	r3, [pc, #164]	; (8000540 <fsm_auto+0x284>)
 800049a:	2201      	movs	r2, #1
 800049c:	701a      	strb	r2, [r3, #0]
				setTimer2(1);
 800049e:	2001      	movs	r0, #1
 80004a0:	f001 f9bc 	bl	800181c <setTimer2>
				break;
 80004a4:	e02a      	b.n	80004fc <fsm_auto+0x240>
				if(timer2_flag == 1){
 80004a6:	4b27      	ldr	r3, [pc, #156]	; (8000544 <fsm_auto+0x288>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	2b01      	cmp	r3, #1
 80004ac:	d123      	bne.n	80004f6 <fsm_auto+0x23a>
					showTimeDelay_First(countdownTopToBottomLed, countdownLeftToRightLed);
 80004ae:	4b1d      	ldr	r3, [pc, #116]	; (8000524 <fsm_auto+0x268>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a22      	ldr	r2, [pc, #136]	; (800053c <fsm_auto+0x280>)
 80004b4:	6812      	ldr	r2, [r2, #0]
 80004b6:	4611      	mov	r1, r2
 80004b8:	4618      	mov	r0, r3
 80004ba:	f001 f81d 	bl	80014f8 <showTimeDelay_First>
					seg7AutoState = SECOND;
 80004be:	4b20      	ldr	r3, [pc, #128]	; (8000540 <fsm_auto+0x284>)
 80004c0:	2202      	movs	r2, #2
 80004c2:	701a      	strb	r2, [r3, #0]
					setTimer2(50);
 80004c4:	2032      	movs	r0, #50	; 0x32
 80004c6:	f001 f9a9 	bl	800181c <setTimer2>
				break;
 80004ca:	e014      	b.n	80004f6 <fsm_auto+0x23a>
				if(timer2_flag == 1){
 80004cc:	4b1d      	ldr	r3, [pc, #116]	; (8000544 <fsm_auto+0x288>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2b01      	cmp	r3, #1
 80004d2:	d112      	bne.n	80004fa <fsm_auto+0x23e>
					showTimeDelay_Second(countdownTopToBottomLed, countdownLeftToRightLed);
 80004d4:	4b13      	ldr	r3, [pc, #76]	; (8000524 <fsm_auto+0x268>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a18      	ldr	r2, [pc, #96]	; (800053c <fsm_auto+0x280>)
 80004da:	6812      	ldr	r2, [r2, #0]
 80004dc:	4611      	mov	r1, r2
 80004de:	4618      	mov	r0, r3
 80004e0:	f001 f82e 	bl	8001540 <showTimeDelay_Second>
					seg7AutoState = FIRST;
 80004e4:	4b16      	ldr	r3, [pc, #88]	; (8000540 <fsm_auto+0x284>)
 80004e6:	2201      	movs	r2, #1
 80004e8:	701a      	strb	r2, [r3, #0]
					setTimer2(50);
 80004ea:	2032      	movs	r0, #50	; 0x32
 80004ec:	f001 f996 	bl	800181c <setTimer2>
				break;
 80004f0:	e003      	b.n	80004fa <fsm_auto+0x23e>
				break;
 80004f2:	bf00      	nop
 80004f4:	e002      	b.n	80004fc <fsm_auto+0x240>
				break;
 80004f6:	bf00      	nop
 80004f8:	e000      	b.n	80004fc <fsm_auto+0x240>
				break;
 80004fa:	bf00      	nop
		}

		if(is_button_pressed(0)){
 80004fc:	2000      	movs	r0, #0
 80004fe:	f7ff fec3 	bl	8000288 <is_button_pressed>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d004      	beq.n	8000512 <fsm_auto+0x256>
			MODE = MODE2;
 8000508:	4b03      	ldr	r3, [pc, #12]	; (8000518 <fsm_auto+0x25c>)
 800050a:	2202      	movs	r2, #2
 800050c:	701a      	strb	r2, [r3, #0]
			turnoff_leds();
 800050e:	f000 f81b 	bl	8000548 <turnoff_leds>
		}
	}
}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	200000b0 	.word	0x200000b0
 800051c:	200000ac 	.word	0x200000ac
 8000520:	20000080 	.word	0x20000080
 8000524:	200000a8 	.word	0x200000a8
 8000528:	20000040 	.word	0x20000040
 800052c:	20000044 	.word	0x20000044
 8000530:	2000003c 	.word	0x2000003c
 8000534:	200000b8 	.word	0x200000b8
 8000538:	20000088 	.word	0x20000088
 800053c:	200000b4 	.word	0x200000b4
 8000540:	200000bd 	.word	0x200000bd
 8000544:	20000090 	.word	0x20000090

08000548 <turnoff_leds>:
 *      Author: Asus
 */

#include "fsm_manual.h"

void turnoff_leds(){
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TB_RED_GPIO_Port, TB_RED_Pin, SET);
 800054c:	2201      	movs	r2, #1
 800054e:	2108      	movs	r1, #8
 8000550:	480f      	ldr	r0, [pc, #60]	; (8000590 <turnoff_leds+0x48>)
 8000552:	f001 fdbe 	bl	80020d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TB_YELLOW_GPIO_Port, TB_YELLOW_Pin, SET);
 8000556:	2201      	movs	r2, #1
 8000558:	2110      	movs	r1, #16
 800055a:	480d      	ldr	r0, [pc, #52]	; (8000590 <turnoff_leds+0x48>)
 800055c:	f001 fdb9 	bl	80020d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TB_GREEN_GPIO_Port, TB_GREEN_Pin, SET);
 8000560:	2201      	movs	r2, #1
 8000562:	2120      	movs	r1, #32
 8000564:	480a      	ldr	r0, [pc, #40]	; (8000590 <turnoff_leds+0x48>)
 8000566:	f001 fdb4 	bl	80020d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LR_RED_GPIO_Port, LR_RED_Pin, SET);
 800056a:	2201      	movs	r2, #1
 800056c:	2140      	movs	r1, #64	; 0x40
 800056e:	4808      	ldr	r0, [pc, #32]	; (8000590 <turnoff_leds+0x48>)
 8000570:	f001 fdaf 	bl	80020d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LR_YELLOW_GPIO_Port, LR_YELLOW_Pin, SET);
 8000574:	2201      	movs	r2, #1
 8000576:	2180      	movs	r1, #128	; 0x80
 8000578:	4805      	ldr	r0, [pc, #20]	; (8000590 <turnoff_leds+0x48>)
 800057a:	f001 fdaa 	bl	80020d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LR_GREEN_GPIO_Port, LR_GREEN_Pin, SET);
 800057e:	2201      	movs	r2, #1
 8000580:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000584:	4802      	ldr	r0, [pc, #8]	; (8000590 <turnoff_leds+0x48>)
 8000586:	f001 fda4 	bl	80020d2 <HAL_GPIO_WritePin>
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40010c00 	.word	0x40010c00

08000594 <check_time_valid>:

void check_time_valid(){
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
	if (redDelay > (yellowDelay + greenDelay)){
 800059a:	4b24      	ldr	r3, [pc, #144]	; (800062c <check_time_valid+0x98>)
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	4b24      	ldr	r3, [pc, #144]	; (8000630 <check_time_valid+0x9c>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	441a      	add	r2, r3
 80005a4:	4b23      	ldr	r3, [pc, #140]	; (8000634 <check_time_valid+0xa0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	429a      	cmp	r2, r3
 80005aa:	da1a      	bge.n	80005e2 <check_time_valid+0x4e>
		int remainder = redDelay - yellowDelay - greenDelay;
 80005ac:	4b21      	ldr	r3, [pc, #132]	; (8000634 <check_time_valid+0xa0>)
 80005ae:	681a      	ldr	r2, [r3, #0]
 80005b0:	4b1e      	ldr	r3, [pc, #120]	; (800062c <check_time_valid+0x98>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	1ad2      	subs	r2, r2, r3
 80005b6:	4b1e      	ldr	r3, [pc, #120]	; (8000630 <check_time_valid+0x9c>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	1ad3      	subs	r3, r2, r3
 80005bc:	607b      	str	r3, [r7, #4]
		greenDelay = greenDelay + remainder/2;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	0fda      	lsrs	r2, r3, #31
 80005c2:	4413      	add	r3, r2
 80005c4:	105b      	asrs	r3, r3, #1
 80005c6:	461a      	mov	r2, r3
 80005c8:	4b19      	ldr	r3, [pc, #100]	; (8000630 <check_time_valid+0x9c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4413      	add	r3, r2
 80005ce:	4a18      	ldr	r2, [pc, #96]	; (8000630 <check_time_valid+0x9c>)
 80005d0:	6013      	str	r3, [r2, #0]
		yellowDelay = redDelay - greenDelay;
 80005d2:	4b18      	ldr	r3, [pc, #96]	; (8000634 <check_time_valid+0xa0>)
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	4b16      	ldr	r3, [pc, #88]	; (8000630 <check_time_valid+0x9c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	1ad3      	subs	r3, r2, r3
 80005dc:	4a13      	ldr	r2, [pc, #76]	; (800062c <check_time_valid+0x98>)
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	e00f      	b.n	8000602 <check_time_valid+0x6e>
	}
	else if (redDelay < (yellowDelay + greenDelay)){
 80005e2:	4b12      	ldr	r3, [pc, #72]	; (800062c <check_time_valid+0x98>)
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	4b12      	ldr	r3, [pc, #72]	; (8000630 <check_time_valid+0x9c>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	441a      	add	r2, r3
 80005ec:	4b11      	ldr	r3, [pc, #68]	; (8000634 <check_time_valid+0xa0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	dd06      	ble.n	8000602 <check_time_valid+0x6e>
		redDelay  = yellowDelay + greenDelay;
 80005f4:	4b0d      	ldr	r3, [pc, #52]	; (800062c <check_time_valid+0x98>)
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <check_time_valid+0x9c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4413      	add	r3, r2
 80005fe:	4a0d      	ldr	r2, [pc, #52]	; (8000634 <check_time_valid+0xa0>)
 8000600:	6013      	str	r3, [r2, #0]
	}

	if (yellowDelay > greenDelay){
 8000602:	4b0a      	ldr	r3, [pc, #40]	; (800062c <check_time_valid+0x98>)
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <check_time_valid+0x9c>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	429a      	cmp	r2, r3
 800060c:	dd09      	ble.n	8000622 <check_time_valid+0x8e>
		int tmp = greenDelay;
 800060e:	4b08      	ldr	r3, [pc, #32]	; (8000630 <check_time_valid+0x9c>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	603b      	str	r3, [r7, #0]
		greenDelay = yellowDelay;
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <check_time_valid+0x98>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a05      	ldr	r2, [pc, #20]	; (8000630 <check_time_valid+0x9c>)
 800061a:	6013      	str	r3, [r2, #0]
		yellowDelay= tmp;
 800061c:	4a03      	ldr	r2, [pc, #12]	; (800062c <check_time_valid+0x98>)
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	6013      	str	r3, [r2, #0]
	}
}
 8000622:	bf00      	nop
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr
 800062c:	20000044 	.word	0x20000044
 8000630:	20000040 	.word	0x20000040
 8000634:	2000003c 	.word	0x2000003c

08000638 <MODE2_run>:


void MODE2_run(){
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	switch(mode2Toggle){
 800063c:	4b49      	ldr	r3, [pc, #292]	; (8000764 <MODE2_run+0x12c>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d002      	beq.n	800064a <MODE2_run+0x12>
 8000644:	2b01      	cmp	r3, #1
 8000646:	d007      	beq.n	8000658 <MODE2_run+0x20>
				toggleLeds(RED);
				setTimer3(25);
			}
			break;
		default:
			break;
 8000648:	e011      	b.n	800066e <MODE2_run+0x36>
			mode2Toggle = TOGGLE;
 800064a:	4b46      	ldr	r3, [pc, #280]	; (8000764 <MODE2_run+0x12c>)
 800064c:	2201      	movs	r2, #1
 800064e:	701a      	strb	r2, [r3, #0]
			setTimer3(25);
 8000650:	2019      	movs	r0, #25
 8000652:	f001 f8f7 	bl	8001844 <setTimer3>
			break;
 8000656:	e00a      	b.n	800066e <MODE2_run+0x36>
			if(timer3_flag == 1){
 8000658:	4b43      	ldr	r3, [pc, #268]	; (8000768 <MODE2_run+0x130>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d105      	bne.n	800066c <MODE2_run+0x34>
				toggleLeds(RED);
 8000660:	2001      	movs	r0, #1
 8000662:	f000 fe91 	bl	8001388 <toggleLeds>
				setTimer3(25);
 8000666:	2019      	movs	r0, #25
 8000668:	f001 f8ec 	bl	8001844 <setTimer3>
			break;
 800066c:	bf00      	nop
	}

	switch(mode2Increase){
 800066e:	4b3f      	ldr	r3, [pc, #252]	; (800076c <MODE2_run+0x134>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d002      	beq.n	800067c <MODE2_run+0x44>
 8000676:	2b01      	cmp	r3, #1
 8000678:	d013      	beq.n	80006a2 <MODE2_run+0x6a>
				DelayTemp = 0;
				MODE = MODE3;
			}
			break;
		default:
			break;
 800067a:	e038      	b.n	80006ee <MODE2_run+0xb6>
			DelayTemp = redDelay;
 800067c:	4b3c      	ldr	r3, [pc, #240]	; (8000770 <MODE2_run+0x138>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a3c      	ldr	r2, [pc, #240]	; (8000774 <MODE2_run+0x13c>)
 8000682:	6013      	str	r3, [r2, #0]
			if (is_button_pressed(1)==1){
 8000684:	2001      	movs	r0, #1
 8000686:	f7ff fdff 	bl	8000288 <is_button_pressed>
 800068a:	4603      	mov	r3, r0
 800068c:	2b01      	cmp	r3, #1
 800068e:	d12b      	bne.n	80006e8 <MODE2_run+0xb0>
				mode2Increase = INCREASE;
 8000690:	4b36      	ldr	r3, [pc, #216]	; (800076c <MODE2_run+0x134>)
 8000692:	2201      	movs	r2, #1
 8000694:	701a      	strb	r2, [r3, #0]
				DelayTemp += 1;
 8000696:	4b37      	ldr	r3, [pc, #220]	; (8000774 <MODE2_run+0x13c>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	3301      	adds	r3, #1
 800069c:	4a35      	ldr	r2, [pc, #212]	; (8000774 <MODE2_run+0x13c>)
 800069e:	6013      	str	r3, [r2, #0]
			break;
 80006a0:	e022      	b.n	80006e8 <MODE2_run+0xb0>
			if (is_button_pressed(1)==1){
 80006a2:	2001      	movs	r0, #1
 80006a4:	f7ff fdf0 	bl	8000288 <is_button_pressed>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d10b      	bne.n	80006c6 <MODE2_run+0x8e>
				DelayTemp += 1;
 80006ae:	4b31      	ldr	r3, [pc, #196]	; (8000774 <MODE2_run+0x13c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	3301      	adds	r3, #1
 80006b4:	4a2f      	ldr	r2, [pc, #188]	; (8000774 <MODE2_run+0x13c>)
 80006b6:	6013      	str	r3, [r2, #0]
				if(DelayTemp >= 99) DelayTemp = 1;
 80006b8:	4b2e      	ldr	r3, [pc, #184]	; (8000774 <MODE2_run+0x13c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b62      	cmp	r3, #98	; 0x62
 80006be:	dd02      	ble.n	80006c6 <MODE2_run+0x8e>
 80006c0:	4b2c      	ldr	r3, [pc, #176]	; (8000774 <MODE2_run+0x13c>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
			if (is_button_pressed(2)==1){
 80006c6:	2002      	movs	r0, #2
 80006c8:	f7ff fdde 	bl	8000288 <is_button_pressed>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d10c      	bne.n	80006ec <MODE2_run+0xb4>
				redDelay = DelayTemp;
 80006d2:	4b28      	ldr	r3, [pc, #160]	; (8000774 <MODE2_run+0x13c>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a26      	ldr	r2, [pc, #152]	; (8000770 <MODE2_run+0x138>)
 80006d8:	6013      	str	r3, [r2, #0]
				DelayTemp = 0;
 80006da:	4b26      	ldr	r3, [pc, #152]	; (8000774 <MODE2_run+0x13c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
				MODE = MODE3;
 80006e0:	4b25      	ldr	r3, [pc, #148]	; (8000778 <MODE2_run+0x140>)
 80006e2:	2203      	movs	r2, #3
 80006e4:	701a      	strb	r2, [r3, #0]
			break;
 80006e6:	e001      	b.n	80006ec <MODE2_run+0xb4>
			break;
 80006e8:	bf00      	nop
 80006ea:	e000      	b.n	80006ee <MODE2_run+0xb6>
			break;
 80006ec:	bf00      	nop
	}

	switch(mode2Seg){
 80006ee:	4b23      	ldr	r3, [pc, #140]	; (800077c <MODE2_run+0x144>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b02      	cmp	r3, #2
 80006f4:	d01e      	beq.n	8000734 <MODE2_run+0xfc>
 80006f6:	2b02      	cmp	r3, #2
 80006f8:	dc2d      	bgt.n	8000756 <MODE2_run+0x11e>
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d002      	beq.n	8000704 <MODE2_run+0xcc>
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d007      	beq.n	8000712 <MODE2_run+0xda>
				setTimer4(25);
				mode2Seg = FIRST;
			}
			break;
		default:
			break;
 8000702:	e028      	b.n	8000756 <MODE2_run+0x11e>
			mode2Seg = FIRST;
 8000704:	4b1d      	ldr	r3, [pc, #116]	; (800077c <MODE2_run+0x144>)
 8000706:	2201      	movs	r2, #1
 8000708:	701a      	strb	r2, [r3, #0]
			setTimer4(25);
 800070a:	2019      	movs	r0, #25
 800070c:	f001 f8ae 	bl	800186c <setTimer4>
			break;
 8000710:	e026      	b.n	8000760 <MODE2_run+0x128>
			if(timer4_flag == 1){
 8000712:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <MODE2_run+0x148>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d11f      	bne.n	800075a <MODE2_run+0x122>
				showTimeDelay_First(1,DelayTemp);
 800071a:	4b16      	ldr	r3, [pc, #88]	; (8000774 <MODE2_run+0x13c>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4619      	mov	r1, r3
 8000720:	2001      	movs	r0, #1
 8000722:	f000 fee9 	bl	80014f8 <showTimeDelay_First>
				mode2Seg = SECOND;
 8000726:	4b15      	ldr	r3, [pc, #84]	; (800077c <MODE2_run+0x144>)
 8000728:	2202      	movs	r2, #2
 800072a:	701a      	strb	r2, [r3, #0]
				setTimer4(25);
 800072c:	2019      	movs	r0, #25
 800072e:	f001 f89d 	bl	800186c <setTimer4>
			break;
 8000732:	e012      	b.n	800075a <MODE2_run+0x122>
			if(timer4_flag == 1){
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <MODE2_run+0x148>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2b01      	cmp	r3, #1
 800073a:	d110      	bne.n	800075e <MODE2_run+0x126>
				showTimeDelay_Second(0,DelayTemp);
 800073c:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <MODE2_run+0x13c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4619      	mov	r1, r3
 8000742:	2000      	movs	r0, #0
 8000744:	f000 fefc 	bl	8001540 <showTimeDelay_Second>
				setTimer4(25);
 8000748:	2019      	movs	r0, #25
 800074a:	f001 f88f 	bl	800186c <setTimer4>
				mode2Seg = FIRST;
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <MODE2_run+0x144>)
 8000750:	2201      	movs	r2, #1
 8000752:	701a      	strb	r2, [r3, #0]
			break;
 8000754:	e003      	b.n	800075e <MODE2_run+0x126>
			break;
 8000756:	bf00      	nop
 8000758:	e002      	b.n	8000760 <MODE2_run+0x128>
			break;
 800075a:	bf00      	nop
 800075c:	e000      	b.n	8000760 <MODE2_run+0x128>
			break;
 800075e:	bf00      	nop

	}
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	200000ba 	.word	0x200000ba
 8000768:	20000098 	.word	0x20000098
 800076c:	200000bc 	.word	0x200000bc
 8000770:	2000003c 	.word	0x2000003c
 8000774:	2000007c 	.word	0x2000007c
 8000778:	200000b0 	.word	0x200000b0
 800077c:	200000b1 	.word	0x200000b1
 8000780:	200000a0 	.word	0x200000a0

08000784 <MODE3_run>:

void MODE3_run(){
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	switch(mode3Toggle){
 8000788:	4b49      	ldr	r3, [pc, #292]	; (80008b0 <MODE3_run+0x12c>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d002      	beq.n	8000796 <MODE3_run+0x12>
 8000790:	2b01      	cmp	r3, #1
 8000792:	d007      	beq.n	80007a4 <MODE3_run+0x20>
				toggleLeds(YELLOW);
				setTimer3(25);
			}
			break;
		default:
			break;
 8000794:	e011      	b.n	80007ba <MODE3_run+0x36>
			mode3Toggle = TOGGLE;
 8000796:	4b46      	ldr	r3, [pc, #280]	; (80008b0 <MODE3_run+0x12c>)
 8000798:	2201      	movs	r2, #1
 800079a:	701a      	strb	r2, [r3, #0]
			setTimer3(25);
 800079c:	2019      	movs	r0, #25
 800079e:	f001 f851 	bl	8001844 <setTimer3>
			break;
 80007a2:	e00a      	b.n	80007ba <MODE3_run+0x36>
			if(timer3_flag == 1){
 80007a4:	4b43      	ldr	r3, [pc, #268]	; (80008b4 <MODE3_run+0x130>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d105      	bne.n	80007b8 <MODE3_run+0x34>
				toggleLeds(YELLOW);
 80007ac:	2003      	movs	r0, #3
 80007ae:	f000 fdeb 	bl	8001388 <toggleLeds>
				setTimer3(25);
 80007b2:	2019      	movs	r0, #25
 80007b4:	f001 f846 	bl	8001844 <setTimer3>
			break;
 80007b8:	bf00      	nop
	}

	switch(mode3Increase){
 80007ba:	4b3f      	ldr	r3, [pc, #252]	; (80008b8 <MODE3_run+0x134>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d002      	beq.n	80007c8 <MODE3_run+0x44>
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d016      	beq.n	80007f4 <MODE3_run+0x70>
				DelayTemp = 0;
				MODE = MODE4;
			}
			break;
		default:
			break;
 80007c6:	e038      	b.n	800083a <MODE3_run+0xb6>
			DelayTemp = yellowDelay;
 80007c8:	4b3c      	ldr	r3, [pc, #240]	; (80008bc <MODE3_run+0x138>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a3c      	ldr	r2, [pc, #240]	; (80008c0 <MODE3_run+0x13c>)
 80007ce:	6013      	str	r3, [r2, #0]
			if (is_button_pressed(1)==1){
 80007d0:	2001      	movs	r0, #1
 80007d2:	f7ff fd59 	bl	8000288 <is_button_pressed>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d107      	bne.n	80007ec <MODE3_run+0x68>
				mode3Increase = INCREASE;
 80007dc:	4b36      	ldr	r3, [pc, #216]	; (80008b8 <MODE3_run+0x134>)
 80007de:	2201      	movs	r2, #1
 80007e0:	701a      	strb	r2, [r3, #0]
				DelayTemp +=1;
 80007e2:	4b37      	ldr	r3, [pc, #220]	; (80008c0 <MODE3_run+0x13c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	3301      	adds	r3, #1
 80007e8:	4a35      	ldr	r2, [pc, #212]	; (80008c0 <MODE3_run+0x13c>)
 80007ea:	6013      	str	r3, [r2, #0]
			mode3Increase = INCREASE;
 80007ec:	4b32      	ldr	r3, [pc, #200]	; (80008b8 <MODE3_run+0x134>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	701a      	strb	r2, [r3, #0]
			break;
 80007f2:	e022      	b.n	800083a <MODE3_run+0xb6>
			if (is_button_pressed(1)==1){
 80007f4:	2001      	movs	r0, #1
 80007f6:	f7ff fd47 	bl	8000288 <is_button_pressed>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d10b      	bne.n	8000818 <MODE3_run+0x94>
				DelayTemp +=1;
 8000800:	4b2f      	ldr	r3, [pc, #188]	; (80008c0 <MODE3_run+0x13c>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	3301      	adds	r3, #1
 8000806:	4a2e      	ldr	r2, [pc, #184]	; (80008c0 <MODE3_run+0x13c>)
 8000808:	6013      	str	r3, [r2, #0]
				if(DelayTemp >= 99) DelayTemp = 1;
 800080a:	4b2d      	ldr	r3, [pc, #180]	; (80008c0 <MODE3_run+0x13c>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2b62      	cmp	r3, #98	; 0x62
 8000810:	dd02      	ble.n	8000818 <MODE3_run+0x94>
 8000812:	4b2b      	ldr	r3, [pc, #172]	; (80008c0 <MODE3_run+0x13c>)
 8000814:	2201      	movs	r2, #1
 8000816:	601a      	str	r2, [r3, #0]
			if (is_button_pressed(2)==1){
 8000818:	2002      	movs	r0, #2
 800081a:	f7ff fd35 	bl	8000288 <is_button_pressed>
 800081e:	4603      	mov	r3, r0
 8000820:	2b01      	cmp	r3, #1
 8000822:	d109      	bne.n	8000838 <MODE3_run+0xb4>
				yellowDelay = DelayTemp;
 8000824:	4b26      	ldr	r3, [pc, #152]	; (80008c0 <MODE3_run+0x13c>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a24      	ldr	r2, [pc, #144]	; (80008bc <MODE3_run+0x138>)
 800082a:	6013      	str	r3, [r2, #0]
				DelayTemp = 0;
 800082c:	4b24      	ldr	r3, [pc, #144]	; (80008c0 <MODE3_run+0x13c>)
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
				MODE = MODE4;
 8000832:	4b24      	ldr	r3, [pc, #144]	; (80008c4 <MODE3_run+0x140>)
 8000834:	2204      	movs	r2, #4
 8000836:	701a      	strb	r2, [r3, #0]
			break;
 8000838:	bf00      	nop
		}

	switch(mode3Seg){
 800083a:	4b23      	ldr	r3, [pc, #140]	; (80008c8 <MODE3_run+0x144>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b02      	cmp	r3, #2
 8000840:	d01e      	beq.n	8000880 <MODE3_run+0xfc>
 8000842:	2b02      	cmp	r3, #2
 8000844:	dc2d      	bgt.n	80008a2 <MODE3_run+0x11e>
 8000846:	2b00      	cmp	r3, #0
 8000848:	d002      	beq.n	8000850 <MODE3_run+0xcc>
 800084a:	2b01      	cmp	r3, #1
 800084c:	d007      	beq.n	800085e <MODE3_run+0xda>
				setTimer4(25);
				mode3Seg = FIRST;
			}
			break;
		default:
			break;
 800084e:	e028      	b.n	80008a2 <MODE3_run+0x11e>
			mode3Seg = FIRST;
 8000850:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <MODE3_run+0x144>)
 8000852:	2201      	movs	r2, #1
 8000854:	701a      	strb	r2, [r3, #0]
			setTimer4(25);
 8000856:	2019      	movs	r0, #25
 8000858:	f001 f808 	bl	800186c <setTimer4>
			break;
 800085c:	e026      	b.n	80008ac <MODE3_run+0x128>
			if(timer4_flag == 1){
 800085e:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <MODE3_run+0x148>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	2b01      	cmp	r3, #1
 8000864:	d11f      	bne.n	80008a6 <MODE3_run+0x122>
				showTimeDelay_First(1,DelayTemp);
 8000866:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <MODE3_run+0x13c>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4619      	mov	r1, r3
 800086c:	2001      	movs	r0, #1
 800086e:	f000 fe43 	bl	80014f8 <showTimeDelay_First>
				mode3Seg = SECOND;
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <MODE3_run+0x144>)
 8000874:	2202      	movs	r2, #2
 8000876:	701a      	strb	r2, [r3, #0]
				setTimer4(25);
 8000878:	2019      	movs	r0, #25
 800087a:	f000 fff7 	bl	800186c <setTimer4>
			break;
 800087e:	e012      	b.n	80008a6 <MODE3_run+0x122>
			if(timer4_flag == 1){
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <MODE3_run+0x148>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b01      	cmp	r3, #1
 8000886:	d110      	bne.n	80008aa <MODE3_run+0x126>
				showTimeDelay_Second(0,DelayTemp);
 8000888:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <MODE3_run+0x13c>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4619      	mov	r1, r3
 800088e:	2000      	movs	r0, #0
 8000890:	f000 fe56 	bl	8001540 <showTimeDelay_Second>
				setTimer4(25);
 8000894:	2019      	movs	r0, #25
 8000896:	f000 ffe9 	bl	800186c <setTimer4>
				mode3Seg = FIRST;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MODE3_run+0x144>)
 800089c:	2201      	movs	r2, #1
 800089e:	701a      	strb	r2, [r3, #0]
			break;
 80008a0:	e003      	b.n	80008aa <MODE3_run+0x126>
			break;
 80008a2:	bf00      	nop
 80008a4:	e002      	b.n	80008ac <MODE3_run+0x128>
			break;
 80008a6:	bf00      	nop
 80008a8:	e000      	b.n	80008ac <MODE3_run+0x128>
			break;
 80008aa:	bf00      	nop
	}
}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200000b2 	.word	0x200000b2
 80008b4:	20000098 	.word	0x20000098
 80008b8:	200000bb 	.word	0x200000bb
 80008bc:	20000044 	.word	0x20000044
 80008c0:	2000007c 	.word	0x2000007c
 80008c4:	200000b0 	.word	0x200000b0
 80008c8:	200000ae 	.word	0x200000ae
 80008cc:	200000a0 	.word	0x200000a0

080008d0 <MODE4_run>:
void MODE4_run(){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
	switch(mode4Toggle){
 80008d4:	4b4a      	ldr	r3, [pc, #296]	; (8000a00 <MODE4_run+0x130>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d002      	beq.n	80008e2 <MODE4_run+0x12>
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d007      	beq.n	80008f0 <MODE4_run+0x20>
				toggleLeds(GREEN);
				setTimer3(25);
			}
			break;
		default:
			break;
 80008e0:	e011      	b.n	8000906 <MODE4_run+0x36>
			mode4Toggle = TOGGLE;
 80008e2:	4b47      	ldr	r3, [pc, #284]	; (8000a00 <MODE4_run+0x130>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	701a      	strb	r2, [r3, #0]
			setTimer3(25);
 80008e8:	2019      	movs	r0, #25
 80008ea:	f000 ffab 	bl	8001844 <setTimer3>
			break;
 80008ee:	e00a      	b.n	8000906 <MODE4_run+0x36>
			if(timer3_flag == 1){
 80008f0:	4b44      	ldr	r3, [pc, #272]	; (8000a04 <MODE4_run+0x134>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d105      	bne.n	8000904 <MODE4_run+0x34>
				toggleLeds(GREEN);
 80008f8:	2002      	movs	r0, #2
 80008fa:	f000 fd45 	bl	8001388 <toggleLeds>
				setTimer3(25);
 80008fe:	2019      	movs	r0, #25
 8000900:	f000 ffa0 	bl	8001844 <setTimer3>
			break;
 8000904:	bf00      	nop
	}

	switch(mode4Increase){
 8000906:	4b40      	ldr	r3, [pc, #256]	; (8000a08 <MODE4_run+0x138>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d002      	beq.n	8000914 <MODE4_run+0x44>
 800090e:	2b01      	cmp	r3, #1
 8000910:	d013      	beq.n	800093a <MODE4_run+0x6a>
				MODE = MODE1;
				setValues();
			}
			break;
		default:
			break;
 8000912:	e039      	b.n	8000988 <MODE4_run+0xb8>
			DelayTemp = greenDelay;
 8000914:	4b3d      	ldr	r3, [pc, #244]	; (8000a0c <MODE4_run+0x13c>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a3d      	ldr	r2, [pc, #244]	; (8000a10 <MODE4_run+0x140>)
 800091a:	6013      	str	r3, [r2, #0]
			if (is_button_pressed(1)==1){
 800091c:	2001      	movs	r0, #1
 800091e:	f7ff fcb3 	bl	8000288 <is_button_pressed>
 8000922:	4603      	mov	r3, r0
 8000924:	2b01      	cmp	r3, #1
 8000926:	d12c      	bne.n	8000982 <MODE4_run+0xb2>
				mode4Increase = INCREASE;
 8000928:	4b37      	ldr	r3, [pc, #220]	; (8000a08 <MODE4_run+0x138>)
 800092a:	2201      	movs	r2, #1
 800092c:	701a      	strb	r2, [r3, #0]
				DelayTemp +=1;
 800092e:	4b38      	ldr	r3, [pc, #224]	; (8000a10 <MODE4_run+0x140>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	3301      	adds	r3, #1
 8000934:	4a36      	ldr	r2, [pc, #216]	; (8000a10 <MODE4_run+0x140>)
 8000936:	6013      	str	r3, [r2, #0]
			break;
 8000938:	e023      	b.n	8000982 <MODE4_run+0xb2>
			if (is_button_pressed(1)==1){
 800093a:	2001      	movs	r0, #1
 800093c:	f7ff fca4 	bl	8000288 <is_button_pressed>
 8000940:	4603      	mov	r3, r0
 8000942:	2b01      	cmp	r3, #1
 8000944:	d10b      	bne.n	800095e <MODE4_run+0x8e>
				DelayTemp +=1;
 8000946:	4b32      	ldr	r3, [pc, #200]	; (8000a10 <MODE4_run+0x140>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	3301      	adds	r3, #1
 800094c:	4a30      	ldr	r2, [pc, #192]	; (8000a10 <MODE4_run+0x140>)
 800094e:	6013      	str	r3, [r2, #0]
				if(DelayTemp >= 99) DelayTemp = 1;
 8000950:	4b2f      	ldr	r3, [pc, #188]	; (8000a10 <MODE4_run+0x140>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b62      	cmp	r3, #98	; 0x62
 8000956:	dd02      	ble.n	800095e <MODE4_run+0x8e>
 8000958:	4b2d      	ldr	r3, [pc, #180]	; (8000a10 <MODE4_run+0x140>)
 800095a:	2201      	movs	r2, #1
 800095c:	601a      	str	r2, [r3, #0]
			if (is_button_pressed(2)==1){
 800095e:	2002      	movs	r0, #2
 8000960:	f7ff fc92 	bl	8000288 <is_button_pressed>
 8000964:	4603      	mov	r3, r0
 8000966:	2b01      	cmp	r3, #1
 8000968:	d10d      	bne.n	8000986 <MODE4_run+0xb6>
				greenDelay = DelayTemp;
 800096a:	4b29      	ldr	r3, [pc, #164]	; (8000a10 <MODE4_run+0x140>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a27      	ldr	r2, [pc, #156]	; (8000a0c <MODE4_run+0x13c>)
 8000970:	6013      	str	r3, [r2, #0]
				check_time_valid();
 8000972:	f7ff fe0f 	bl	8000594 <check_time_valid>
				MODE = MODE1;
 8000976:	4b27      	ldr	r3, [pc, #156]	; (8000a14 <MODE4_run+0x144>)
 8000978:	2201      	movs	r2, #1
 800097a:	701a      	strb	r2, [r3, #0]
				setValues();
 800097c:	f000 f890 	bl	8000aa0 <setValues>
			break;
 8000980:	e001      	b.n	8000986 <MODE4_run+0xb6>
			break;
 8000982:	bf00      	nop
 8000984:	e000      	b.n	8000988 <MODE4_run+0xb8>
			break;
 8000986:	bf00      	nop
	}

	switch(mode4Seg){
 8000988:	4b23      	ldr	r3, [pc, #140]	; (8000a18 <MODE4_run+0x148>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b02      	cmp	r3, #2
 800098e:	d01e      	beq.n	80009ce <MODE4_run+0xfe>
 8000990:	2b02      	cmp	r3, #2
 8000992:	dc2d      	bgt.n	80009f0 <MODE4_run+0x120>
 8000994:	2b00      	cmp	r3, #0
 8000996:	d002      	beq.n	800099e <MODE4_run+0xce>
 8000998:	2b01      	cmp	r3, #1
 800099a:	d007      	beq.n	80009ac <MODE4_run+0xdc>
				setTimer4(25);
				mode4Seg = FIRST;
			}
			break;
		default:
			break;
 800099c:	e028      	b.n	80009f0 <MODE4_run+0x120>
			mode4Seg = FIRST;
 800099e:	4b1e      	ldr	r3, [pc, #120]	; (8000a18 <MODE4_run+0x148>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	701a      	strb	r2, [r3, #0]
			setTimer4(25);
 80009a4:	2019      	movs	r0, #25
 80009a6:	f000 ff61 	bl	800186c <setTimer4>
			break;
 80009aa:	e026      	b.n	80009fa <MODE4_run+0x12a>
			if(timer4_flag == 1){
 80009ac:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <MODE4_run+0x14c>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d11f      	bne.n	80009f4 <MODE4_run+0x124>
				showTimeDelay_First(1,DelayTemp);
 80009b4:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <MODE4_run+0x140>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4619      	mov	r1, r3
 80009ba:	2001      	movs	r0, #1
 80009bc:	f000 fd9c 	bl	80014f8 <showTimeDelay_First>
				mode4Seg = SECOND;
 80009c0:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <MODE4_run+0x148>)
 80009c2:	2202      	movs	r2, #2
 80009c4:	701a      	strb	r2, [r3, #0]
				setTimer4(25);
 80009c6:	2019      	movs	r0, #25
 80009c8:	f000 ff50 	bl	800186c <setTimer4>
			break;
 80009cc:	e012      	b.n	80009f4 <MODE4_run+0x124>
			if(timer4_flag == 1){
 80009ce:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <MODE4_run+0x14c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d110      	bne.n	80009f8 <MODE4_run+0x128>
				showTimeDelay_Second(0,DelayTemp);
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <MODE4_run+0x140>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4619      	mov	r1, r3
 80009dc:	2000      	movs	r0, #0
 80009de:	f000 fdaf 	bl	8001540 <showTimeDelay_Second>
				setTimer4(25);
 80009e2:	2019      	movs	r0, #25
 80009e4:	f000 ff42 	bl	800186c <setTimer4>
				mode4Seg = FIRST;
 80009e8:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <MODE4_run+0x148>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	701a      	strb	r2, [r3, #0]
			break;
 80009ee:	e003      	b.n	80009f8 <MODE4_run+0x128>
			break;
 80009f0:	bf00      	nop
 80009f2:	e002      	b.n	80009fa <MODE4_run+0x12a>
			break;
 80009f4:	bf00      	nop
 80009f6:	e000      	b.n	80009fa <MODE4_run+0x12a>
			break;
 80009f8:	bf00      	nop
	}
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200000af 	.word	0x200000af
 8000a04:	20000098 	.word	0x20000098
 8000a08:	200000ad 	.word	0x200000ad
 8000a0c:	20000040 	.word	0x20000040
 8000a10:	2000007c 	.word	0x2000007c
 8000a14:	200000b0 	.word	0x200000b0
 8000a18:	200000b9 	.word	0x200000b9
 8000a1c:	200000a0 	.word	0x200000a0

08000a20 <fsm_manual>:

void fsm_manual(){
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	switch(MODE){
 8000a24:	4b1d      	ldr	r3, [pc, #116]	; (8000a9c <fsm_manual+0x7c>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b04      	cmp	r3, #4
 8000a2a:	d01e      	beq.n	8000a6a <fsm_manual+0x4a>
 8000a2c:	2b04      	cmp	r3, #4
 8000a2e:	dc2c      	bgt.n	8000a8a <fsm_manual+0x6a>
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	d002      	beq.n	8000a3a <fsm_manual+0x1a>
 8000a34:	2b03      	cmp	r3, #3
 8000a36:	d00c      	beq.n	8000a52 <fsm_manual+0x32>
			check_time_valid();
			setValues();
		}
		break;
	default:
		break;
 8000a38:	e027      	b.n	8000a8a <fsm_manual+0x6a>
		MODE2_run();
 8000a3a:	f7ff fdfd 	bl	8000638 <MODE2_run>
		if (is_button_pressed(0) == 1){
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f7ff fc22 	bl	8000288 <is_button_pressed>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d121      	bne.n	8000a8e <fsm_manual+0x6e>
			MODE = MODE3;
 8000a4a:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <fsm_manual+0x7c>)
 8000a4c:	2203      	movs	r2, #3
 8000a4e:	701a      	strb	r2, [r3, #0]
		break;
 8000a50:	e01d      	b.n	8000a8e <fsm_manual+0x6e>
		MODE3_run();
 8000a52:	f7ff fe97 	bl	8000784 <MODE3_run>
		if (is_button_pressed(0) == 1){
 8000a56:	2000      	movs	r0, #0
 8000a58:	f7ff fc16 	bl	8000288 <is_button_pressed>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d117      	bne.n	8000a92 <fsm_manual+0x72>
			MODE = MODE4;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <fsm_manual+0x7c>)
 8000a64:	2204      	movs	r2, #4
 8000a66:	701a      	strb	r2, [r3, #0]
		break;
 8000a68:	e013      	b.n	8000a92 <fsm_manual+0x72>
		MODE4_run();
 8000a6a:	f7ff ff31 	bl	80008d0 <MODE4_run>
		if(is_button_pressed(0)){
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f7ff fc0a 	bl	8000288 <is_button_pressed>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d00d      	beq.n	8000a96 <fsm_manual+0x76>
			MODE = MODE1;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <fsm_manual+0x7c>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	701a      	strb	r2, [r3, #0]
			check_time_valid();
 8000a80:	f7ff fd88 	bl	8000594 <check_time_valid>
			setValues();
 8000a84:	f000 f80c 	bl	8000aa0 <setValues>
		break;
 8000a88:	e005      	b.n	8000a96 <fsm_manual+0x76>
		break;
 8000a8a:	bf00      	nop
 8000a8c:	e004      	b.n	8000a98 <fsm_manual+0x78>
		break;
 8000a8e:	bf00      	nop
 8000a90:	e002      	b.n	8000a98 <fsm_manual+0x78>
		break;
 8000a92:	bf00      	nop
 8000a94:	e000      	b.n	8000a98 <fsm_manual+0x78>
		break;
 8000a96:	bf00      	nop
	}
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	200000b0 	.word	0x200000b0

08000aa0 <setValues>:
int DelayTemp = 0;

int countdownTopToBottomLed;
int countdownLeftToRightLed;

void setValues(void){
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
	MODE = MODE1;
 8000aa4:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <setValues+0x70>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	701a      	strb	r2, [r3, #0]

	mode2Toggle = TOGGLE_INIT;
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <setValues+0x74>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	701a      	strb	r2, [r3, #0]
	mode2Seg = SEG_INIT;
 8000ab0:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <setValues+0x78>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	701a      	strb	r2, [r3, #0]
	mode2Increase = INCREASE_INIT;
 8000ab6:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <setValues+0x7c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]

	mode3Toggle = TOGGLE_INIT;
 8000abc:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <setValues+0x80>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	701a      	strb	r2, [r3, #0]
	mode3Seg = SEG_INIT;
 8000ac2:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <setValues+0x84>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	701a      	strb	r2, [r3, #0]
	mode3Increase = INCREASE_INIT;
 8000ac8:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <setValues+0x88>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]

	mode4Toggle = TOGGLE_INIT;
 8000ace:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <setValues+0x8c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	701a      	strb	r2, [r3, #0]
	mode4Seg = SEG_INIT;
 8000ad4:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <setValues+0x90>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	701a      	strb	r2, [r3, #0]
	mode4Increase = INCREASE_INIT;
 8000ada:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <setValues+0x94>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	701a      	strb	r2, [r3, #0]

	TopToBottomLedAutoState = LED_INIT;
 8000ae0:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <setValues+0x98>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	701a      	strb	r2, [r3, #0]
	LeftToRightLedAutoState = LED_INIT;
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <setValues+0x9c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]
	seg7AutoState = SEG_INIT;
 8000aec:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <setValues+0xa0>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	701a      	strb	r2, [r3, #0]

	DelayTemp = 0;
 8000af2:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <setValues+0xa4>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
	countdownTopToBottomLed = redDelay;
 8000af8:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <setValues+0xa8>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a13      	ldr	r2, [pc, #76]	; (8000b4c <setValues+0xac>)
 8000afe:	6013      	str	r3, [r2, #0]
	countdownLeftToRightLed = greenDelay;
 8000b00:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <setValues+0xb0>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a13      	ldr	r2, [pc, #76]	; (8000b54 <setValues+0xb4>)
 8000b06:	6013      	str	r3, [r2, #0]
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr
 8000b10:	200000b0 	.word	0x200000b0
 8000b14:	200000ba 	.word	0x200000ba
 8000b18:	200000b1 	.word	0x200000b1
 8000b1c:	200000bc 	.word	0x200000bc
 8000b20:	200000b2 	.word	0x200000b2
 8000b24:	200000ae 	.word	0x200000ae
 8000b28:	200000bb 	.word	0x200000bb
 8000b2c:	200000af 	.word	0x200000af
 8000b30:	200000b9 	.word	0x200000b9
 8000b34:	200000ad 	.word	0x200000ad
 8000b38:	200000ac 	.word	0x200000ac
 8000b3c:	200000b8 	.word	0x200000b8
 8000b40:	200000bd 	.word	0x200000bd
 8000b44:	2000007c 	.word	0x2000007c
 8000b48:	2000003c 	.word	0x2000003c
 8000b4c:	200000a8 	.word	0x200000a8
 8000b50:	20000040 	.word	0x20000040
 8000b54:	200000b4 	.word	0x200000b4

08000b58 <display7SEG_TopToBottom>:
 *      Author: Asus
 */

#include "led_display.h"

void display7SEG_TopToBottom(int num){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2b09      	cmp	r3, #9
 8000b64:	f200 8180 	bhi.w	8000e68 <display7SEG_TopToBottom+0x310>
 8000b68:	a201      	add	r2, pc, #4	; (adr r2, 8000b70 <display7SEG_TopToBottom+0x18>)
 8000b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b6e:	bf00      	nop
 8000b70:	08000b99 	.word	0x08000b99
 8000b74:	08000be1 	.word	0x08000be1
 8000b78:	08000c29 	.word	0x08000c29
 8000b7c:	08000c71 	.word	0x08000c71
 8000b80:	08000cb9 	.word	0x08000cb9
 8000b84:	08000d01 	.word	0x08000d01
 8000b88:	08000d49 	.word	0x08000d49
 8000b8c:	08000d91 	.word	0x08000d91
 8000b90:	08000dd9 	.word	0x08000dd9
 8000b94:	08000e21 	.word	0x08000e21
	switch(num){
	    case 0:
	        HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin ,GPIO_PIN_RESET) ;
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	48b5      	ldr	r0, [pc, #724]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000b9e:	f001 fa98 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin ,GPIO_PIN_RESET) ;
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2102      	movs	r1, #2
 8000ba6:	48b3      	ldr	r0, [pc, #716]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000ba8:	f001 fa93 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin ,GPIO_PIN_RESET) ;
 8000bac:	2200      	movs	r2, #0
 8000bae:	2104      	movs	r1, #4
 8000bb0:	48b0      	ldr	r0, [pc, #704]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000bb2:	f001 fa8e 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin ,GPIO_PIN_RESET) ;
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2108      	movs	r1, #8
 8000bba:	48ae      	ldr	r0, [pc, #696]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000bbc:	f001 fa89 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin ,GPIO_PIN_RESET) ;
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2110      	movs	r1, #16
 8000bc4:	48ab      	ldr	r0, [pc, #684]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000bc6:	f001 fa84 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin ,GPIO_PIN_RESET) ;
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2120      	movs	r1, #32
 8000bce:	48a9      	ldr	r0, [pc, #676]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000bd0:	f001 fa7f 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin ,GPIO_PIN_SET) ;
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	2140      	movs	r1, #64	; 0x40
 8000bd8:	48a6      	ldr	r0, [pc, #664]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000bda:	f001 fa7a 	bl	80020d2 <HAL_GPIO_WritePin>
	        break;
 8000bde:	e144      	b.n	8000e6a <display7SEG_TopToBottom+0x312>

	    case 1:
	        HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin ,GPIO_PIN_SET) ;
 8000be0:	2201      	movs	r2, #1
 8000be2:	2101      	movs	r1, #1
 8000be4:	48a3      	ldr	r0, [pc, #652]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000be6:	f001 fa74 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin ,GPIO_PIN_RESET) ;
 8000bea:	2200      	movs	r2, #0
 8000bec:	2102      	movs	r1, #2
 8000bee:	48a1      	ldr	r0, [pc, #644]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000bf0:	f001 fa6f 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin ,GPIO_PIN_RESET) ;
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2104      	movs	r1, #4
 8000bf8:	489e      	ldr	r0, [pc, #632]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000bfa:	f001 fa6a 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin ,GPIO_PIN_SET) ;
 8000bfe:	2201      	movs	r2, #1
 8000c00:	2108      	movs	r1, #8
 8000c02:	489c      	ldr	r0, [pc, #624]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000c04:	f001 fa65 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin ,GPIO_PIN_SET) ;
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2110      	movs	r1, #16
 8000c0c:	4899      	ldr	r0, [pc, #612]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000c0e:	f001 fa60 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin ,GPIO_PIN_SET) ;
 8000c12:	2201      	movs	r2, #1
 8000c14:	2120      	movs	r1, #32
 8000c16:	4897      	ldr	r0, [pc, #604]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000c18:	f001 fa5b 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin ,GPIO_PIN_SET) ;
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	2140      	movs	r1, #64	; 0x40
 8000c20:	4894      	ldr	r0, [pc, #592]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000c22:	f001 fa56 	bl	80020d2 <HAL_GPIO_WritePin>
	        break;
 8000c26:	e120      	b.n	8000e6a <display7SEG_TopToBottom+0x312>

	    case 2:
	        HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin ,GPIO_PIN_RESET) ;
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	4891      	ldr	r0, [pc, #580]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000c2e:	f001 fa50 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin ,GPIO_PIN_RESET) ;
 8000c32:	2200      	movs	r2, #0
 8000c34:	2102      	movs	r1, #2
 8000c36:	488f      	ldr	r0, [pc, #572]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000c38:	f001 fa4b 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin ,GPIO_PIN_SET) ;
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	2104      	movs	r1, #4
 8000c40:	488c      	ldr	r0, [pc, #560]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000c42:	f001 fa46 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin ,GPIO_PIN_RESET) ;
 8000c46:	2200      	movs	r2, #0
 8000c48:	2108      	movs	r1, #8
 8000c4a:	488a      	ldr	r0, [pc, #552]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000c4c:	f001 fa41 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin ,GPIO_PIN_RESET) ;
 8000c50:	2200      	movs	r2, #0
 8000c52:	2110      	movs	r1, #16
 8000c54:	4887      	ldr	r0, [pc, #540]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000c56:	f001 fa3c 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin ,GPIO_PIN_SET) ;
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	2120      	movs	r1, #32
 8000c5e:	4885      	ldr	r0, [pc, #532]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000c60:	f001 fa37 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin ,GPIO_PIN_RESET) ;
 8000c64:	2200      	movs	r2, #0
 8000c66:	2140      	movs	r1, #64	; 0x40
 8000c68:	4882      	ldr	r0, [pc, #520]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000c6a:	f001 fa32 	bl	80020d2 <HAL_GPIO_WritePin>
	        break;
 8000c6e:	e0fc      	b.n	8000e6a <display7SEG_TopToBottom+0x312>

	    case 3:
	        HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin ,GPIO_PIN_RESET) ;
 8000c70:	2200      	movs	r2, #0
 8000c72:	2101      	movs	r1, #1
 8000c74:	487f      	ldr	r0, [pc, #508]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000c76:	f001 fa2c 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin ,GPIO_PIN_RESET) ;
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2102      	movs	r1, #2
 8000c7e:	487d      	ldr	r0, [pc, #500]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000c80:	f001 fa27 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin ,GPIO_PIN_RESET) ;
 8000c84:	2200      	movs	r2, #0
 8000c86:	2104      	movs	r1, #4
 8000c88:	487a      	ldr	r0, [pc, #488]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000c8a:	f001 fa22 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin ,GPIO_PIN_RESET) ;
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2108      	movs	r1, #8
 8000c92:	4878      	ldr	r0, [pc, #480]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000c94:	f001 fa1d 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin ,GPIO_PIN_SET) ;
 8000c98:	2201      	movs	r2, #1
 8000c9a:	2110      	movs	r1, #16
 8000c9c:	4875      	ldr	r0, [pc, #468]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000c9e:	f001 fa18 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin ,GPIO_PIN_SET) ;
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2120      	movs	r1, #32
 8000ca6:	4873      	ldr	r0, [pc, #460]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000ca8:	f001 fa13 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin ,GPIO_PIN_RESET) ;
 8000cac:	2200      	movs	r2, #0
 8000cae:	2140      	movs	r1, #64	; 0x40
 8000cb0:	4870      	ldr	r0, [pc, #448]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000cb2:	f001 fa0e 	bl	80020d2 <HAL_GPIO_WritePin>
	        break;
 8000cb6:	e0d8      	b.n	8000e6a <display7SEG_TopToBottom+0x312>

	    case 4:
	        HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin ,GPIO_PIN_SET) ;
 8000cb8:	2201      	movs	r2, #1
 8000cba:	2101      	movs	r1, #1
 8000cbc:	486d      	ldr	r0, [pc, #436]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000cbe:	f001 fa08 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin ,GPIO_PIN_RESET) ;
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2102      	movs	r1, #2
 8000cc6:	486b      	ldr	r0, [pc, #428]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000cc8:	f001 fa03 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin ,GPIO_PIN_RESET) ;
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2104      	movs	r1, #4
 8000cd0:	4868      	ldr	r0, [pc, #416]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000cd2:	f001 f9fe 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin ,GPIO_PIN_SET) ;
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	2108      	movs	r1, #8
 8000cda:	4866      	ldr	r0, [pc, #408]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000cdc:	f001 f9f9 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin ,GPIO_PIN_SET) ;
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	2110      	movs	r1, #16
 8000ce4:	4863      	ldr	r0, [pc, #396]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000ce6:	f001 f9f4 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin ,GPIO_PIN_RESET) ;
 8000cea:	2200      	movs	r2, #0
 8000cec:	2120      	movs	r1, #32
 8000cee:	4861      	ldr	r0, [pc, #388]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000cf0:	f001 f9ef 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin ,GPIO_PIN_RESET) ;
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2140      	movs	r1, #64	; 0x40
 8000cf8:	485e      	ldr	r0, [pc, #376]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000cfa:	f001 f9ea 	bl	80020d2 <HAL_GPIO_WritePin>
	        break;
 8000cfe:	e0b4      	b.n	8000e6a <display7SEG_TopToBottom+0x312>
	    case 5:
	        HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin ,GPIO_PIN_RESET) ;
 8000d00:	2200      	movs	r2, #0
 8000d02:	2101      	movs	r1, #1
 8000d04:	485b      	ldr	r0, [pc, #364]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000d06:	f001 f9e4 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin ,GPIO_PIN_SET) ;
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	2102      	movs	r1, #2
 8000d0e:	4859      	ldr	r0, [pc, #356]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000d10:	f001 f9df 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin ,GPIO_PIN_RESET) ;
 8000d14:	2200      	movs	r2, #0
 8000d16:	2104      	movs	r1, #4
 8000d18:	4856      	ldr	r0, [pc, #344]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000d1a:	f001 f9da 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin ,GPIO_PIN_RESET) ;
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2108      	movs	r1, #8
 8000d22:	4854      	ldr	r0, [pc, #336]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000d24:	f001 f9d5 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin ,GPIO_PIN_SET) ;
 8000d28:	2201      	movs	r2, #1
 8000d2a:	2110      	movs	r1, #16
 8000d2c:	4851      	ldr	r0, [pc, #324]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000d2e:	f001 f9d0 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin ,GPIO_PIN_RESET) ;
 8000d32:	2200      	movs	r2, #0
 8000d34:	2120      	movs	r1, #32
 8000d36:	484f      	ldr	r0, [pc, #316]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000d38:	f001 f9cb 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin ,GPIO_PIN_RESET) ;
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2140      	movs	r1, #64	; 0x40
 8000d40:	484c      	ldr	r0, [pc, #304]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000d42:	f001 f9c6 	bl	80020d2 <HAL_GPIO_WritePin>
	        break;
 8000d46:	e090      	b.n	8000e6a <display7SEG_TopToBottom+0x312>
	    case 6:
		    HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin ,GPIO_PIN_RESET) ;
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	4849      	ldr	r0, [pc, #292]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000d4e:	f001 f9c0 	bl	80020d2 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin ,GPIO_PIN_SET) ;
 8000d52:	2201      	movs	r2, #1
 8000d54:	2102      	movs	r1, #2
 8000d56:	4847      	ldr	r0, [pc, #284]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000d58:	f001 f9bb 	bl	80020d2 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin ,GPIO_PIN_RESET) ;
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2104      	movs	r1, #4
 8000d60:	4844      	ldr	r0, [pc, #272]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000d62:	f001 f9b6 	bl	80020d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin ,GPIO_PIN_RESET) ;
 8000d66:	2200      	movs	r2, #0
 8000d68:	2108      	movs	r1, #8
 8000d6a:	4842      	ldr	r0, [pc, #264]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000d6c:	f001 f9b1 	bl	80020d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin ,GPIO_PIN_RESET) ;
 8000d70:	2200      	movs	r2, #0
 8000d72:	2110      	movs	r1, #16
 8000d74:	483f      	ldr	r0, [pc, #252]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000d76:	f001 f9ac 	bl	80020d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin ,GPIO_PIN_RESET) ;
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2120      	movs	r1, #32
 8000d7e:	483d      	ldr	r0, [pc, #244]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000d80:	f001 f9a7 	bl	80020d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin ,GPIO_PIN_RESET) ;
 8000d84:	2200      	movs	r2, #0
 8000d86:	2140      	movs	r1, #64	; 0x40
 8000d88:	483a      	ldr	r0, [pc, #232]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000d8a:	f001 f9a2 	bl	80020d2 <HAL_GPIO_WritePin>
			break;
 8000d8e:	e06c      	b.n	8000e6a <display7SEG_TopToBottom+0x312>
	    case 7:
			HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin ,GPIO_PIN_RESET) ;
 8000d90:	2200      	movs	r2, #0
 8000d92:	2101      	movs	r1, #1
 8000d94:	4837      	ldr	r0, [pc, #220]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000d96:	f001 f99c 	bl	80020d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin ,GPIO_PIN_RESET) ;
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2102      	movs	r1, #2
 8000d9e:	4835      	ldr	r0, [pc, #212]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000da0:	f001 f997 	bl	80020d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin ,GPIO_PIN_RESET) ;
 8000da4:	2200      	movs	r2, #0
 8000da6:	2104      	movs	r1, #4
 8000da8:	4832      	ldr	r0, [pc, #200]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000daa:	f001 f992 	bl	80020d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin ,GPIO_PIN_SET) ;
 8000dae:	2201      	movs	r2, #1
 8000db0:	2108      	movs	r1, #8
 8000db2:	4830      	ldr	r0, [pc, #192]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000db4:	f001 f98d 	bl	80020d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin ,GPIO_PIN_SET) ;
 8000db8:	2201      	movs	r2, #1
 8000dba:	2110      	movs	r1, #16
 8000dbc:	482d      	ldr	r0, [pc, #180]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000dbe:	f001 f988 	bl	80020d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin ,GPIO_PIN_SET) ;
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	2120      	movs	r1, #32
 8000dc6:	482b      	ldr	r0, [pc, #172]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000dc8:	f001 f983 	bl	80020d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin ,GPIO_PIN_SET) ;
 8000dcc:	2201      	movs	r2, #1
 8000dce:	2140      	movs	r1, #64	; 0x40
 8000dd0:	4828      	ldr	r0, [pc, #160]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000dd2:	f001 f97e 	bl	80020d2 <HAL_GPIO_WritePin>
			break;
 8000dd6:	e048      	b.n	8000e6a <display7SEG_TopToBottom+0x312>
	    case 8:
			HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin ,GPIO_PIN_RESET) ;
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2101      	movs	r1, #1
 8000ddc:	4825      	ldr	r0, [pc, #148]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000dde:	f001 f978 	bl	80020d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin ,GPIO_PIN_RESET) ;
 8000de2:	2200      	movs	r2, #0
 8000de4:	2102      	movs	r1, #2
 8000de6:	4823      	ldr	r0, [pc, #140]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000de8:	f001 f973 	bl	80020d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin ,GPIO_PIN_RESET) ;
 8000dec:	2200      	movs	r2, #0
 8000dee:	2104      	movs	r1, #4
 8000df0:	4820      	ldr	r0, [pc, #128]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000df2:	f001 f96e 	bl	80020d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin ,GPIO_PIN_RESET) ;
 8000df6:	2200      	movs	r2, #0
 8000df8:	2108      	movs	r1, #8
 8000dfa:	481e      	ldr	r0, [pc, #120]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000dfc:	f001 f969 	bl	80020d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin ,GPIO_PIN_RESET) ;
 8000e00:	2200      	movs	r2, #0
 8000e02:	2110      	movs	r1, #16
 8000e04:	481b      	ldr	r0, [pc, #108]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000e06:	f001 f964 	bl	80020d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin ,GPIO_PIN_RESET) ;
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2120      	movs	r1, #32
 8000e0e:	4819      	ldr	r0, [pc, #100]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000e10:	f001 f95f 	bl	80020d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin ,GPIO_PIN_RESET) ;
 8000e14:	2200      	movs	r2, #0
 8000e16:	2140      	movs	r1, #64	; 0x40
 8000e18:	4816      	ldr	r0, [pc, #88]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000e1a:	f001 f95a 	bl	80020d2 <HAL_GPIO_WritePin>
			break;
 8000e1e:	e024      	b.n	8000e6a <display7SEG_TopToBottom+0x312>
	    case 9:
	    	HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin ,GPIO_PIN_RESET) ;
 8000e20:	2200      	movs	r2, #0
 8000e22:	2101      	movs	r1, #1
 8000e24:	4813      	ldr	r0, [pc, #76]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000e26:	f001 f954 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin ,GPIO_PIN_RESET) ;
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2102      	movs	r1, #2
 8000e2e:	4811      	ldr	r0, [pc, #68]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000e30:	f001 f94f 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin ,GPIO_PIN_RESET) ;
 8000e34:	2200      	movs	r2, #0
 8000e36:	2104      	movs	r1, #4
 8000e38:	480e      	ldr	r0, [pc, #56]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000e3a:	f001 f94a 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin ,GPIO_PIN_RESET) ;
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2108      	movs	r1, #8
 8000e42:	480c      	ldr	r0, [pc, #48]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000e44:	f001 f945 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin ,GPIO_PIN_SET) ;
 8000e48:	2201      	movs	r2, #1
 8000e4a:	2110      	movs	r1, #16
 8000e4c:	4809      	ldr	r0, [pc, #36]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000e4e:	f001 f940 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin ,GPIO_PIN_RESET) ;
 8000e52:	2200      	movs	r2, #0
 8000e54:	2120      	movs	r1, #32
 8000e56:	4807      	ldr	r0, [pc, #28]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000e58:	f001 f93b 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin ,GPIO_PIN_RESET) ;
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2140      	movs	r1, #64	; 0x40
 8000e60:	4804      	ldr	r0, [pc, #16]	; (8000e74 <display7SEG_TopToBottom+0x31c>)
 8000e62:	f001 f936 	bl	80020d2 <HAL_GPIO_WritePin>
	    	break;
 8000e66:	e000      	b.n	8000e6a <display7SEG_TopToBottom+0x312>
	    default:
	    	break;
 8000e68:	bf00      	nop
	 }
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40010800 	.word	0x40010800

08000e78 <display7SEG_LeftToRight>:

void display7SEG_LeftToRight(int num){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b09      	cmp	r3, #9
 8000e84:	f200 81bc 	bhi.w	8001200 <display7SEG_LeftToRight+0x388>
 8000e88:	a201      	add	r2, pc, #4	; (adr r2, 8000e90 <display7SEG_LeftToRight+0x18>)
 8000e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e8e:	bf00      	nop
 8000e90:	08000eb9 	.word	0x08000eb9
 8000e94:	08000f0d 	.word	0x08000f0d
 8000e98:	08000f61 	.word	0x08000f61
 8000e9c:	08000fb5 	.word	0x08000fb5
 8000ea0:	08001009 	.word	0x08001009
 8000ea4:	0800105d 	.word	0x0800105d
 8000ea8:	080010b1 	.word	0x080010b1
 8000eac:	08001105 	.word	0x08001105
 8000eb0:	08001159 	.word	0x08001159
 8000eb4:	080011ad 	.word	0x080011ad
	switch(num){
	    case 0:
	        HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin ,GPIO_PIN_RESET) ;
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2180      	movs	r1, #128	; 0x80
 8000ebc:	48d3      	ldr	r0, [pc, #844]	; (800120c <display7SEG_LeftToRight+0x394>)
 8000ebe:	f001 f908 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin ,GPIO_PIN_RESET) ;
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ec8:	48d0      	ldr	r0, [pc, #832]	; (800120c <display7SEG_LeftToRight+0x394>)
 8000eca:	f001 f902 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin ,GPIO_PIN_RESET) ;
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ed4:	48cd      	ldr	r0, [pc, #820]	; (800120c <display7SEG_LeftToRight+0x394>)
 8000ed6:	f001 f8fc 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin ,GPIO_PIN_RESET) ;
 8000eda:	2200      	movs	r2, #0
 8000edc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ee0:	48ca      	ldr	r0, [pc, #808]	; (800120c <display7SEG_LeftToRight+0x394>)
 8000ee2:	f001 f8f6 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin ,GPIO_PIN_RESET) ;
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eec:	48c7      	ldr	r0, [pc, #796]	; (800120c <display7SEG_LeftToRight+0x394>)
 8000eee:	f001 f8f0 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin ,GPIO_PIN_RESET) ;
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ef8:	48c4      	ldr	r0, [pc, #784]	; (800120c <display7SEG_LeftToRight+0x394>)
 8000efa:	f001 f8ea 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin ,GPIO_PIN_SET) ;
 8000efe:	2201      	movs	r2, #1
 8000f00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f04:	48c1      	ldr	r0, [pc, #772]	; (800120c <display7SEG_LeftToRight+0x394>)
 8000f06:	f001 f8e4 	bl	80020d2 <HAL_GPIO_WritePin>
	        break;
 8000f0a:	e17a      	b.n	8001202 <display7SEG_LeftToRight+0x38a>
	    case 1:
	        HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin ,GPIO_PIN_SET) ;
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	2180      	movs	r1, #128	; 0x80
 8000f10:	48be      	ldr	r0, [pc, #760]	; (800120c <display7SEG_LeftToRight+0x394>)
 8000f12:	f001 f8de 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin ,GPIO_PIN_RESET) ;
 8000f16:	2200      	movs	r2, #0
 8000f18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f1c:	48bb      	ldr	r0, [pc, #748]	; (800120c <display7SEG_LeftToRight+0x394>)
 8000f1e:	f001 f8d8 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin ,GPIO_PIN_RESET) ;
 8000f22:	2200      	movs	r2, #0
 8000f24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f28:	48b8      	ldr	r0, [pc, #736]	; (800120c <display7SEG_LeftToRight+0x394>)
 8000f2a:	f001 f8d2 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin ,GPIO_PIN_SET) ;
 8000f2e:	2201      	movs	r2, #1
 8000f30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f34:	48b5      	ldr	r0, [pc, #724]	; (800120c <display7SEG_LeftToRight+0x394>)
 8000f36:	f001 f8cc 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin ,GPIO_PIN_SET) ;
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f40:	48b2      	ldr	r0, [pc, #712]	; (800120c <display7SEG_LeftToRight+0x394>)
 8000f42:	f001 f8c6 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin ,GPIO_PIN_SET) ;
 8000f46:	2201      	movs	r2, #1
 8000f48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f4c:	48af      	ldr	r0, [pc, #700]	; (800120c <display7SEG_LeftToRight+0x394>)
 8000f4e:	f001 f8c0 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin ,GPIO_PIN_SET) ;
 8000f52:	2201      	movs	r2, #1
 8000f54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f58:	48ac      	ldr	r0, [pc, #688]	; (800120c <display7SEG_LeftToRight+0x394>)
 8000f5a:	f001 f8ba 	bl	80020d2 <HAL_GPIO_WritePin>
	        break;
 8000f5e:	e150      	b.n	8001202 <display7SEG_LeftToRight+0x38a>
	    case 2:
	        HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin ,GPIO_PIN_RESET) ;
 8000f60:	2200      	movs	r2, #0
 8000f62:	2180      	movs	r1, #128	; 0x80
 8000f64:	48a9      	ldr	r0, [pc, #676]	; (800120c <display7SEG_LeftToRight+0x394>)
 8000f66:	f001 f8b4 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin ,GPIO_PIN_RESET) ;
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f70:	48a6      	ldr	r0, [pc, #664]	; (800120c <display7SEG_LeftToRight+0x394>)
 8000f72:	f001 f8ae 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin ,GPIO_PIN_SET) ;
 8000f76:	2201      	movs	r2, #1
 8000f78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f7c:	48a3      	ldr	r0, [pc, #652]	; (800120c <display7SEG_LeftToRight+0x394>)
 8000f7e:	f001 f8a8 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin ,GPIO_PIN_RESET) ;
 8000f82:	2200      	movs	r2, #0
 8000f84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f88:	48a0      	ldr	r0, [pc, #640]	; (800120c <display7SEG_LeftToRight+0x394>)
 8000f8a:	f001 f8a2 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin ,GPIO_PIN_RESET) ;
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f94:	489d      	ldr	r0, [pc, #628]	; (800120c <display7SEG_LeftToRight+0x394>)
 8000f96:	f001 f89c 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin ,GPIO_PIN_SET) ;
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa0:	489a      	ldr	r0, [pc, #616]	; (800120c <display7SEG_LeftToRight+0x394>)
 8000fa2:	f001 f896 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin ,GPIO_PIN_RESET) ;
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fac:	4897      	ldr	r0, [pc, #604]	; (800120c <display7SEG_LeftToRight+0x394>)
 8000fae:	f001 f890 	bl	80020d2 <HAL_GPIO_WritePin>
	        break;
 8000fb2:	e126      	b.n	8001202 <display7SEG_LeftToRight+0x38a>
	    case 3:
	        HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin ,GPIO_PIN_RESET) ;
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2180      	movs	r1, #128	; 0x80
 8000fb8:	4894      	ldr	r0, [pc, #592]	; (800120c <display7SEG_LeftToRight+0x394>)
 8000fba:	f001 f88a 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin ,GPIO_PIN_RESET) ;
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fc4:	4891      	ldr	r0, [pc, #580]	; (800120c <display7SEG_LeftToRight+0x394>)
 8000fc6:	f001 f884 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin ,GPIO_PIN_RESET) ;
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fd0:	488e      	ldr	r0, [pc, #568]	; (800120c <display7SEG_LeftToRight+0x394>)
 8000fd2:	f001 f87e 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin ,GPIO_PIN_RESET) ;
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fdc:	488b      	ldr	r0, [pc, #556]	; (800120c <display7SEG_LeftToRight+0x394>)
 8000fde:	f001 f878 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin ,GPIO_PIN_SET) ;
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fe8:	4888      	ldr	r0, [pc, #544]	; (800120c <display7SEG_LeftToRight+0x394>)
 8000fea:	f001 f872 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin ,GPIO_PIN_SET) ;
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ff4:	4885      	ldr	r0, [pc, #532]	; (800120c <display7SEG_LeftToRight+0x394>)
 8000ff6:	f001 f86c 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin ,GPIO_PIN_RESET) ;
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001000:	4882      	ldr	r0, [pc, #520]	; (800120c <display7SEG_LeftToRight+0x394>)
 8001002:	f001 f866 	bl	80020d2 <HAL_GPIO_WritePin>
	        break;
 8001006:	e0fc      	b.n	8001202 <display7SEG_LeftToRight+0x38a>
	    case 4:
	        HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin ,GPIO_PIN_SET) ;
 8001008:	2201      	movs	r2, #1
 800100a:	2180      	movs	r1, #128	; 0x80
 800100c:	487f      	ldr	r0, [pc, #508]	; (800120c <display7SEG_LeftToRight+0x394>)
 800100e:	f001 f860 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin ,GPIO_PIN_RESET) ;
 8001012:	2200      	movs	r2, #0
 8001014:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001018:	487c      	ldr	r0, [pc, #496]	; (800120c <display7SEG_LeftToRight+0x394>)
 800101a:	f001 f85a 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin ,GPIO_PIN_RESET) ;
 800101e:	2200      	movs	r2, #0
 8001020:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001024:	4879      	ldr	r0, [pc, #484]	; (800120c <display7SEG_LeftToRight+0x394>)
 8001026:	f001 f854 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin ,GPIO_PIN_SET) ;
 800102a:	2201      	movs	r2, #1
 800102c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001030:	4876      	ldr	r0, [pc, #472]	; (800120c <display7SEG_LeftToRight+0x394>)
 8001032:	f001 f84e 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin ,GPIO_PIN_SET) ;
 8001036:	2201      	movs	r2, #1
 8001038:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800103c:	4873      	ldr	r0, [pc, #460]	; (800120c <display7SEG_LeftToRight+0x394>)
 800103e:	f001 f848 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin ,GPIO_PIN_RESET) ;
 8001042:	2200      	movs	r2, #0
 8001044:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001048:	4870      	ldr	r0, [pc, #448]	; (800120c <display7SEG_LeftToRight+0x394>)
 800104a:	f001 f842 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin ,GPIO_PIN_RESET) ;
 800104e:	2200      	movs	r2, #0
 8001050:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001054:	486d      	ldr	r0, [pc, #436]	; (800120c <display7SEG_LeftToRight+0x394>)
 8001056:	f001 f83c 	bl	80020d2 <HAL_GPIO_WritePin>
	        break;
 800105a:	e0d2      	b.n	8001202 <display7SEG_LeftToRight+0x38a>
	    case 5:
	        HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin ,GPIO_PIN_RESET) ;
 800105c:	2200      	movs	r2, #0
 800105e:	2180      	movs	r1, #128	; 0x80
 8001060:	486a      	ldr	r0, [pc, #424]	; (800120c <display7SEG_LeftToRight+0x394>)
 8001062:	f001 f836 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin ,GPIO_PIN_SET) ;
 8001066:	2201      	movs	r2, #1
 8001068:	f44f 7180 	mov.w	r1, #256	; 0x100
 800106c:	4867      	ldr	r0, [pc, #412]	; (800120c <display7SEG_LeftToRight+0x394>)
 800106e:	f001 f830 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin ,GPIO_PIN_RESET) ;
 8001072:	2200      	movs	r2, #0
 8001074:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001078:	4864      	ldr	r0, [pc, #400]	; (800120c <display7SEG_LeftToRight+0x394>)
 800107a:	f001 f82a 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin ,GPIO_PIN_RESET) ;
 800107e:	2200      	movs	r2, #0
 8001080:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001084:	4861      	ldr	r0, [pc, #388]	; (800120c <display7SEG_LeftToRight+0x394>)
 8001086:	f001 f824 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin ,GPIO_PIN_SET) ;
 800108a:	2201      	movs	r2, #1
 800108c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001090:	485e      	ldr	r0, [pc, #376]	; (800120c <display7SEG_LeftToRight+0x394>)
 8001092:	f001 f81e 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin ,GPIO_PIN_RESET) ;
 8001096:	2200      	movs	r2, #0
 8001098:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800109c:	485b      	ldr	r0, [pc, #364]	; (800120c <display7SEG_LeftToRight+0x394>)
 800109e:	f001 f818 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin ,GPIO_PIN_RESET) ;
 80010a2:	2200      	movs	r2, #0
 80010a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010a8:	4858      	ldr	r0, [pc, #352]	; (800120c <display7SEG_LeftToRight+0x394>)
 80010aa:	f001 f812 	bl	80020d2 <HAL_GPIO_WritePin>
	        break;
 80010ae:	e0a8      	b.n	8001202 <display7SEG_LeftToRight+0x38a>
	    case 6:
		    HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin ,GPIO_PIN_RESET) ;
 80010b0:	2200      	movs	r2, #0
 80010b2:	2180      	movs	r1, #128	; 0x80
 80010b4:	4855      	ldr	r0, [pc, #340]	; (800120c <display7SEG_LeftToRight+0x394>)
 80010b6:	f001 f80c 	bl	80020d2 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin ,GPIO_PIN_SET) ;
 80010ba:	2201      	movs	r2, #1
 80010bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c0:	4852      	ldr	r0, [pc, #328]	; (800120c <display7SEG_LeftToRight+0x394>)
 80010c2:	f001 f806 	bl	80020d2 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin ,GPIO_PIN_RESET) ;
 80010c6:	2200      	movs	r2, #0
 80010c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010cc:	484f      	ldr	r0, [pc, #316]	; (800120c <display7SEG_LeftToRight+0x394>)
 80010ce:	f001 f800 	bl	80020d2 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin ,GPIO_PIN_RESET) ;
 80010d2:	2200      	movs	r2, #0
 80010d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010d8:	484c      	ldr	r0, [pc, #304]	; (800120c <display7SEG_LeftToRight+0x394>)
 80010da:	f000 fffa 	bl	80020d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin ,GPIO_PIN_RESET) ;
 80010de:	2200      	movs	r2, #0
 80010e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010e4:	4849      	ldr	r0, [pc, #292]	; (800120c <display7SEG_LeftToRight+0x394>)
 80010e6:	f000 fff4 	bl	80020d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin ,GPIO_PIN_RESET) ;
 80010ea:	2200      	movs	r2, #0
 80010ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010f0:	4846      	ldr	r0, [pc, #280]	; (800120c <display7SEG_LeftToRight+0x394>)
 80010f2:	f000 ffee 	bl	80020d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin ,GPIO_PIN_RESET) ;
 80010f6:	2200      	movs	r2, #0
 80010f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010fc:	4843      	ldr	r0, [pc, #268]	; (800120c <display7SEG_LeftToRight+0x394>)
 80010fe:	f000 ffe8 	bl	80020d2 <HAL_GPIO_WritePin>
			break;
 8001102:	e07e      	b.n	8001202 <display7SEG_LeftToRight+0x38a>
	    case 7:
	    	HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin ,GPIO_PIN_RESET) ;
 8001104:	2200      	movs	r2, #0
 8001106:	2180      	movs	r1, #128	; 0x80
 8001108:	4840      	ldr	r0, [pc, #256]	; (800120c <display7SEG_LeftToRight+0x394>)
 800110a:	f000 ffe2 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin ,GPIO_PIN_RESET) ;
 800110e:	2200      	movs	r2, #0
 8001110:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001114:	483d      	ldr	r0, [pc, #244]	; (800120c <display7SEG_LeftToRight+0x394>)
 8001116:	f000 ffdc 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin ,GPIO_PIN_RESET) ;
 800111a:	2200      	movs	r2, #0
 800111c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001120:	483a      	ldr	r0, [pc, #232]	; (800120c <display7SEG_LeftToRight+0x394>)
 8001122:	f000 ffd6 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin ,GPIO_PIN_SET) ;
 8001126:	2201      	movs	r2, #1
 8001128:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800112c:	4837      	ldr	r0, [pc, #220]	; (800120c <display7SEG_LeftToRight+0x394>)
 800112e:	f000 ffd0 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin ,GPIO_PIN_SET) ;
 8001132:	2201      	movs	r2, #1
 8001134:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001138:	4834      	ldr	r0, [pc, #208]	; (800120c <display7SEG_LeftToRight+0x394>)
 800113a:	f000 ffca 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin ,GPIO_PIN_SET) ;
 800113e:	2201      	movs	r2, #1
 8001140:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001144:	4831      	ldr	r0, [pc, #196]	; (800120c <display7SEG_LeftToRight+0x394>)
 8001146:	f000 ffc4 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin ,GPIO_PIN_SET) ;
 800114a:	2201      	movs	r2, #1
 800114c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001150:	482e      	ldr	r0, [pc, #184]	; (800120c <display7SEG_LeftToRight+0x394>)
 8001152:	f000 ffbe 	bl	80020d2 <HAL_GPIO_WritePin>
	    	break;
 8001156:	e054      	b.n	8001202 <display7SEG_LeftToRight+0x38a>
	    case 8:
	    	HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin ,GPIO_PIN_RESET) ;
 8001158:	2200      	movs	r2, #0
 800115a:	2180      	movs	r1, #128	; 0x80
 800115c:	482b      	ldr	r0, [pc, #172]	; (800120c <display7SEG_LeftToRight+0x394>)
 800115e:	f000 ffb8 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin ,GPIO_PIN_RESET) ;
 8001162:	2200      	movs	r2, #0
 8001164:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001168:	4828      	ldr	r0, [pc, #160]	; (800120c <display7SEG_LeftToRight+0x394>)
 800116a:	f000 ffb2 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin ,GPIO_PIN_RESET) ;
 800116e:	2200      	movs	r2, #0
 8001170:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001174:	4825      	ldr	r0, [pc, #148]	; (800120c <display7SEG_LeftToRight+0x394>)
 8001176:	f000 ffac 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin ,GPIO_PIN_RESET) ;
 800117a:	2200      	movs	r2, #0
 800117c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001180:	4822      	ldr	r0, [pc, #136]	; (800120c <display7SEG_LeftToRight+0x394>)
 8001182:	f000 ffa6 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin ,GPIO_PIN_RESET) ;
 8001186:	2200      	movs	r2, #0
 8001188:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800118c:	481f      	ldr	r0, [pc, #124]	; (800120c <display7SEG_LeftToRight+0x394>)
 800118e:	f000 ffa0 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin ,GPIO_PIN_RESET) ;
 8001192:	2200      	movs	r2, #0
 8001194:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001198:	481c      	ldr	r0, [pc, #112]	; (800120c <display7SEG_LeftToRight+0x394>)
 800119a:	f000 ff9a 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin ,GPIO_PIN_RESET) ;
 800119e:	2200      	movs	r2, #0
 80011a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011a4:	4819      	ldr	r0, [pc, #100]	; (800120c <display7SEG_LeftToRight+0x394>)
 80011a6:	f000 ff94 	bl	80020d2 <HAL_GPIO_WritePin>
	    	break;
 80011aa:	e02a      	b.n	8001202 <display7SEG_LeftToRight+0x38a>
	    case 9:
	    	HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin ,GPIO_PIN_RESET) ;
 80011ac:	2200      	movs	r2, #0
 80011ae:	2180      	movs	r1, #128	; 0x80
 80011b0:	4816      	ldr	r0, [pc, #88]	; (800120c <display7SEG_LeftToRight+0x394>)
 80011b2:	f000 ff8e 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin ,GPIO_PIN_RESET) ;
 80011b6:	2200      	movs	r2, #0
 80011b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011bc:	4813      	ldr	r0, [pc, #76]	; (800120c <display7SEG_LeftToRight+0x394>)
 80011be:	f000 ff88 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin ,GPIO_PIN_RESET) ;
 80011c2:	2200      	movs	r2, #0
 80011c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011c8:	4810      	ldr	r0, [pc, #64]	; (800120c <display7SEG_LeftToRight+0x394>)
 80011ca:	f000 ff82 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin ,GPIO_PIN_RESET) ;
 80011ce:	2200      	movs	r2, #0
 80011d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011d4:	480d      	ldr	r0, [pc, #52]	; (800120c <display7SEG_LeftToRight+0x394>)
 80011d6:	f000 ff7c 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin ,GPIO_PIN_SET) ;
 80011da:	2201      	movs	r2, #1
 80011dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011e0:	480a      	ldr	r0, [pc, #40]	; (800120c <display7SEG_LeftToRight+0x394>)
 80011e2:	f000 ff76 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin ,GPIO_PIN_RESET) ;
 80011e6:	2200      	movs	r2, #0
 80011e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ec:	4807      	ldr	r0, [pc, #28]	; (800120c <display7SEG_LeftToRight+0x394>)
 80011ee:	f000 ff70 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin ,GPIO_PIN_RESET) ;
 80011f2:	2200      	movs	r2, #0
 80011f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011f8:	4804      	ldr	r0, [pc, #16]	; (800120c <display7SEG_LeftToRight+0x394>)
 80011fa:	f000 ff6a 	bl	80020d2 <HAL_GPIO_WritePin>
			break;
 80011fe:	e000      	b.n	8001202 <display7SEG_LeftToRight+0x38a>
	    default:
	    	break;
 8001200:	bf00      	nop
	}
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40010800 	.word	0x40010800

08001210 <displayTopToBottomLED>:

void displayTopToBottomLED(enum LedState state_1){
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
	switch(state_1){
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2b03      	cmp	r3, #3
 800121e:	d84b      	bhi.n	80012b8 <displayTopToBottomLED+0xa8>
 8001220:	a201      	add	r2, pc, #4	; (adr r2, 8001228 <displayTopToBottomLED+0x18>)
 8001222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001226:	bf00      	nop
 8001228:	08001239 	.word	0x08001239
 800122c:	08001259 	.word	0x08001259
 8001230:	08001299 	.word	0x08001299
 8001234:	08001279 	.word	0x08001279
		case LED_INIT:
			 HAL_GPIO_WritePin( TB_GREEN_GPIO_Port , TB_GREEN_Pin , GPIO_PIN_SET) ;
 8001238:	2201      	movs	r2, #1
 800123a:	2120      	movs	r1, #32
 800123c:	4821      	ldr	r0, [pc, #132]	; (80012c4 <displayTopToBottomLED+0xb4>)
 800123e:	f000 ff48 	bl	80020d2 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( TB_YELLOW_GPIO_Port , TB_YELLOW_Pin , GPIO_PIN_SET ) ;
 8001242:	2201      	movs	r2, #1
 8001244:	2110      	movs	r1, #16
 8001246:	481f      	ldr	r0, [pc, #124]	; (80012c4 <displayTopToBottomLED+0xb4>)
 8001248:	f000 ff43 	bl	80020d2 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( TB_RED_GPIO_Port , TB_RED_Pin , GPIO_PIN_SET ) ;
 800124c:	2201      	movs	r2, #1
 800124e:	2108      	movs	r1, #8
 8001250:	481c      	ldr	r0, [pc, #112]	; (80012c4 <displayTopToBottomLED+0xb4>)
 8001252:	f000 ff3e 	bl	80020d2 <HAL_GPIO_WritePin>
			 break;
 8001256:	e030      	b.n	80012ba <displayTopToBottomLED+0xaa>
		case RED:
			 HAL_GPIO_WritePin( TB_GREEN_GPIO_Port , TB_GREEN_Pin , GPIO_PIN_SET) ;
 8001258:	2201      	movs	r2, #1
 800125a:	2120      	movs	r1, #32
 800125c:	4819      	ldr	r0, [pc, #100]	; (80012c4 <displayTopToBottomLED+0xb4>)
 800125e:	f000 ff38 	bl	80020d2 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( TB_YELLOW_GPIO_Port , TB_YELLOW_Pin , GPIO_PIN_SET ) ;
 8001262:	2201      	movs	r2, #1
 8001264:	2110      	movs	r1, #16
 8001266:	4817      	ldr	r0, [pc, #92]	; (80012c4 <displayTopToBottomLED+0xb4>)
 8001268:	f000 ff33 	bl	80020d2 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( TB_RED_GPIO_Port , TB_RED_Pin , GPIO_PIN_RESET ) ;
 800126c:	2200      	movs	r2, #0
 800126e:	2108      	movs	r1, #8
 8001270:	4814      	ldr	r0, [pc, #80]	; (80012c4 <displayTopToBottomLED+0xb4>)
 8001272:	f000 ff2e 	bl	80020d2 <HAL_GPIO_WritePin>
			 break;
 8001276:	e020      	b.n	80012ba <displayTopToBottomLED+0xaa>
		case YELLOW:
			 HAL_GPIO_WritePin( TB_GREEN_GPIO_Port , TB_GREEN_Pin , GPIO_PIN_SET) ;
 8001278:	2201      	movs	r2, #1
 800127a:	2120      	movs	r1, #32
 800127c:	4811      	ldr	r0, [pc, #68]	; (80012c4 <displayTopToBottomLED+0xb4>)
 800127e:	f000 ff28 	bl	80020d2 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( TB_YELLOW_GPIO_Port , TB_YELLOW_Pin , GPIO_PIN_RESET ) ;
 8001282:	2200      	movs	r2, #0
 8001284:	2110      	movs	r1, #16
 8001286:	480f      	ldr	r0, [pc, #60]	; (80012c4 <displayTopToBottomLED+0xb4>)
 8001288:	f000 ff23 	bl	80020d2 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( TB_RED_GPIO_Port , TB_RED_Pin , GPIO_PIN_SET ) ;
 800128c:	2201      	movs	r2, #1
 800128e:	2108      	movs	r1, #8
 8001290:	480c      	ldr	r0, [pc, #48]	; (80012c4 <displayTopToBottomLED+0xb4>)
 8001292:	f000 ff1e 	bl	80020d2 <HAL_GPIO_WritePin>
			 break;
 8001296:	e010      	b.n	80012ba <displayTopToBottomLED+0xaa>
		case GREEN:
			 HAL_GPIO_WritePin( TB_GREEN_GPIO_Port , TB_GREEN_Pin , GPIO_PIN_RESET) ;
 8001298:	2200      	movs	r2, #0
 800129a:	2120      	movs	r1, #32
 800129c:	4809      	ldr	r0, [pc, #36]	; (80012c4 <displayTopToBottomLED+0xb4>)
 800129e:	f000 ff18 	bl	80020d2 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( TB_YELLOW_GPIO_Port , TB_YELLOW_Pin , GPIO_PIN_SET ) ;
 80012a2:	2201      	movs	r2, #1
 80012a4:	2110      	movs	r1, #16
 80012a6:	4807      	ldr	r0, [pc, #28]	; (80012c4 <displayTopToBottomLED+0xb4>)
 80012a8:	f000 ff13 	bl	80020d2 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( TB_RED_GPIO_Port , TB_RED_Pin , GPIO_PIN_SET ) ;
 80012ac:	2201      	movs	r2, #1
 80012ae:	2108      	movs	r1, #8
 80012b0:	4804      	ldr	r0, [pc, #16]	; (80012c4 <displayTopToBottomLED+0xb4>)
 80012b2:	f000 ff0e 	bl	80020d2 <HAL_GPIO_WritePin>
			 break;
 80012b6:	e000      	b.n	80012ba <displayTopToBottomLED+0xaa>
		default:
			 break;
 80012b8:	bf00      	nop
	}
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40010c00 	.word	0x40010c00

080012c8 <displayLeftToRightLED>:

void displayLeftToRightLED(enum LedState state_2){
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
	switch(state_2){
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	2b03      	cmp	r3, #3
 80012d6:	d84f      	bhi.n	8001378 <displayLeftToRightLED+0xb0>
 80012d8:	a201      	add	r2, pc, #4	; (adr r2, 80012e0 <displayLeftToRightLED+0x18>)
 80012da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012de:	bf00      	nop
 80012e0:	080012f1 	.word	0x080012f1
 80012e4:	08001313 	.word	0x08001313
 80012e8:	08001357 	.word	0x08001357
 80012ec:	08001335 	.word	0x08001335
		case LED_INIT:
			 HAL_GPIO_WritePin( LR_GREEN_GPIO_Port , LR_GREEN_Pin , GPIO_PIN_SET) ;
 80012f0:	2201      	movs	r2, #1
 80012f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012f6:	4823      	ldr	r0, [pc, #140]	; (8001384 <displayLeftToRightLED+0xbc>)
 80012f8:	f000 feeb 	bl	80020d2 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( LR_YELLOW_GPIO_Port , LR_YELLOW_Pin , GPIO_PIN_SET ) ;
 80012fc:	2201      	movs	r2, #1
 80012fe:	2180      	movs	r1, #128	; 0x80
 8001300:	4820      	ldr	r0, [pc, #128]	; (8001384 <displayLeftToRightLED+0xbc>)
 8001302:	f000 fee6 	bl	80020d2 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( LR_RED_GPIO_Port , LR_RED_Pin , GPIO_PIN_SET ) ;
 8001306:	2201      	movs	r2, #1
 8001308:	2140      	movs	r1, #64	; 0x40
 800130a:	481e      	ldr	r0, [pc, #120]	; (8001384 <displayLeftToRightLED+0xbc>)
 800130c:	f000 fee1 	bl	80020d2 <HAL_GPIO_WritePin>
			 break;
 8001310:	e033      	b.n	800137a <displayLeftToRightLED+0xb2>
		case RED:
			 HAL_GPIO_WritePin( LR_GREEN_GPIO_Port , LR_GREEN_Pin , GPIO_PIN_SET) ;
 8001312:	2201      	movs	r2, #1
 8001314:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001318:	481a      	ldr	r0, [pc, #104]	; (8001384 <displayLeftToRightLED+0xbc>)
 800131a:	f000 feda 	bl	80020d2 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( LR_YELLOW_GPIO_Port , LR_YELLOW_Pin , GPIO_PIN_SET ) ;
 800131e:	2201      	movs	r2, #1
 8001320:	2180      	movs	r1, #128	; 0x80
 8001322:	4818      	ldr	r0, [pc, #96]	; (8001384 <displayLeftToRightLED+0xbc>)
 8001324:	f000 fed5 	bl	80020d2 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( LR_RED_GPIO_Port , LR_RED_Pin , GPIO_PIN_RESET ) ;
 8001328:	2200      	movs	r2, #0
 800132a:	2140      	movs	r1, #64	; 0x40
 800132c:	4815      	ldr	r0, [pc, #84]	; (8001384 <displayLeftToRightLED+0xbc>)
 800132e:	f000 fed0 	bl	80020d2 <HAL_GPIO_WritePin>
			 break;
 8001332:	e022      	b.n	800137a <displayLeftToRightLED+0xb2>
		case YELLOW:
			 HAL_GPIO_WritePin( LR_GREEN_GPIO_Port , LR_GREEN_Pin , GPIO_PIN_SET) ;
 8001334:	2201      	movs	r2, #1
 8001336:	f44f 7180 	mov.w	r1, #256	; 0x100
 800133a:	4812      	ldr	r0, [pc, #72]	; (8001384 <displayLeftToRightLED+0xbc>)
 800133c:	f000 fec9 	bl	80020d2 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( LR_YELLOW_GPIO_Port , LR_YELLOW_Pin , GPIO_PIN_RESET ) ;
 8001340:	2200      	movs	r2, #0
 8001342:	2180      	movs	r1, #128	; 0x80
 8001344:	480f      	ldr	r0, [pc, #60]	; (8001384 <displayLeftToRightLED+0xbc>)
 8001346:	f000 fec4 	bl	80020d2 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( LR_RED_GPIO_Port , LR_RED_Pin , GPIO_PIN_SET ) ;
 800134a:	2201      	movs	r2, #1
 800134c:	2140      	movs	r1, #64	; 0x40
 800134e:	480d      	ldr	r0, [pc, #52]	; (8001384 <displayLeftToRightLED+0xbc>)
 8001350:	f000 febf 	bl	80020d2 <HAL_GPIO_WritePin>
			 break;
 8001354:	e011      	b.n	800137a <displayLeftToRightLED+0xb2>
		case GREEN:
			 HAL_GPIO_WritePin( LR_GREEN_GPIO_Port , LR_GREEN_Pin , GPIO_PIN_RESET) ;
 8001356:	2200      	movs	r2, #0
 8001358:	f44f 7180 	mov.w	r1, #256	; 0x100
 800135c:	4809      	ldr	r0, [pc, #36]	; (8001384 <displayLeftToRightLED+0xbc>)
 800135e:	f000 feb8 	bl	80020d2 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( LR_YELLOW_GPIO_Port , LR_YELLOW_Pin , GPIO_PIN_SET ) ;
 8001362:	2201      	movs	r2, #1
 8001364:	2180      	movs	r1, #128	; 0x80
 8001366:	4807      	ldr	r0, [pc, #28]	; (8001384 <displayLeftToRightLED+0xbc>)
 8001368:	f000 feb3 	bl	80020d2 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( LR_RED_GPIO_Port , LR_RED_Pin , GPIO_PIN_SET ) ;
 800136c:	2201      	movs	r2, #1
 800136e:	2140      	movs	r1, #64	; 0x40
 8001370:	4804      	ldr	r0, [pc, #16]	; (8001384 <displayLeftToRightLED+0xbc>)
 8001372:	f000 feae 	bl	80020d2 <HAL_GPIO_WritePin>
			 break;
 8001376:	e000      	b.n	800137a <displayLeftToRightLED+0xb2>
		default:
			 break;
 8001378:	bf00      	nop
	}
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40010c00 	.word	0x40010c00

08001388 <toggleLeds>:

void toggleLeds(enum LedState state){
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
	switch(state){
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	2b03      	cmp	r3, #3
 8001396:	d023      	beq.n	80013e0 <toggleLeds+0x58>
 8001398:	2b03      	cmp	r3, #3
 800139a:	dc5d      	bgt.n	8001458 <toggleLeds+0xd0>
 800139c:	2b01      	cmp	r3, #1
 800139e:	d03d      	beq.n	800141c <toggleLeds+0x94>
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d159      	bne.n	8001458 <toggleLeds+0xd0>
	case GREEN:
		HAL_GPIO_WritePin(TB_RED_GPIO_Port, TB_RED_Pin, SET);
 80013a4:	2201      	movs	r2, #1
 80013a6:	2108      	movs	r1, #8
 80013a8:	482e      	ldr	r0, [pc, #184]	; (8001464 <toggleLeds+0xdc>)
 80013aa:	f000 fe92 	bl	80020d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TB_YELLOW_GPIO_Port, TB_YELLOW_Pin, SET);
 80013ae:	2201      	movs	r2, #1
 80013b0:	2110      	movs	r1, #16
 80013b2:	482c      	ldr	r0, [pc, #176]	; (8001464 <toggleLeds+0xdc>)
 80013b4:	f000 fe8d 	bl	80020d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LR_RED_GPIO_Port, LR_RED_Pin, SET);
 80013b8:	2201      	movs	r2, #1
 80013ba:	2140      	movs	r1, #64	; 0x40
 80013bc:	4829      	ldr	r0, [pc, #164]	; (8001464 <toggleLeds+0xdc>)
 80013be:	f000 fe88 	bl	80020d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LR_YELLOW_GPIO_Port, LR_YELLOW_Pin, SET);
 80013c2:	2201      	movs	r2, #1
 80013c4:	2180      	movs	r1, #128	; 0x80
 80013c6:	4827      	ldr	r0, [pc, #156]	; (8001464 <toggleLeds+0xdc>)
 80013c8:	f000 fe83 	bl	80020d2 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin( TB_GREEN_GPIO_Port , TB_GREEN_Pin) ;
 80013cc:	2120      	movs	r1, #32
 80013ce:	4825      	ldr	r0, [pc, #148]	; (8001464 <toggleLeds+0xdc>)
 80013d0:	f000 fe97 	bl	8002102 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin( LR_GREEN_GPIO_Port , LR_GREEN_Pin) ;
 80013d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013d8:	4822      	ldr	r0, [pc, #136]	; (8001464 <toggleLeds+0xdc>)
 80013da:	f000 fe92 	bl	8002102 <HAL_GPIO_TogglePin>
		break;
 80013de:	e03c      	b.n	800145a <toggleLeds+0xd2>
	case YELLOW:
		HAL_GPIO_WritePin(TB_RED_GPIO_Port, TB_RED_Pin, SET);
 80013e0:	2201      	movs	r2, #1
 80013e2:	2108      	movs	r1, #8
 80013e4:	481f      	ldr	r0, [pc, #124]	; (8001464 <toggleLeds+0xdc>)
 80013e6:	f000 fe74 	bl	80020d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TB_GREEN_GPIO_Port, TB_GREEN_Pin, SET);
 80013ea:	2201      	movs	r2, #1
 80013ec:	2120      	movs	r1, #32
 80013ee:	481d      	ldr	r0, [pc, #116]	; (8001464 <toggleLeds+0xdc>)
 80013f0:	f000 fe6f 	bl	80020d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LR_RED_GPIO_Port, LR_RED_Pin, SET);
 80013f4:	2201      	movs	r2, #1
 80013f6:	2140      	movs	r1, #64	; 0x40
 80013f8:	481a      	ldr	r0, [pc, #104]	; (8001464 <toggleLeds+0xdc>)
 80013fa:	f000 fe6a 	bl	80020d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LR_GREEN_GPIO_Port, LR_GREEN_Pin, SET);
 80013fe:	2201      	movs	r2, #1
 8001400:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001404:	4817      	ldr	r0, [pc, #92]	; (8001464 <toggleLeds+0xdc>)
 8001406:	f000 fe64 	bl	80020d2 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin( TB_YELLOW_GPIO_Port , TB_YELLOW_Pin) ;
 800140a:	2110      	movs	r1, #16
 800140c:	4815      	ldr	r0, [pc, #84]	; (8001464 <toggleLeds+0xdc>)
 800140e:	f000 fe78 	bl	8002102 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin( LR_YELLOW_GPIO_Port , LR_YELLOW_Pin) ;
 8001412:	2180      	movs	r1, #128	; 0x80
 8001414:	4813      	ldr	r0, [pc, #76]	; (8001464 <toggleLeds+0xdc>)
 8001416:	f000 fe74 	bl	8002102 <HAL_GPIO_TogglePin>
		break;
 800141a:	e01e      	b.n	800145a <toggleLeds+0xd2>
	case RED:
		HAL_GPIO_WritePin(TB_YELLOW_GPIO_Port, TB_YELLOW_Pin, SET);
 800141c:	2201      	movs	r2, #1
 800141e:	2110      	movs	r1, #16
 8001420:	4810      	ldr	r0, [pc, #64]	; (8001464 <toggleLeds+0xdc>)
 8001422:	f000 fe56 	bl	80020d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TB_GREEN_GPIO_Port, TB_GREEN_Pin, SET);
 8001426:	2201      	movs	r2, #1
 8001428:	2120      	movs	r1, #32
 800142a:	480e      	ldr	r0, [pc, #56]	; (8001464 <toggleLeds+0xdc>)
 800142c:	f000 fe51 	bl	80020d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LR_YELLOW_GPIO_Port, LR_YELLOW_Pin, SET);
 8001430:	2201      	movs	r2, #1
 8001432:	2180      	movs	r1, #128	; 0x80
 8001434:	480b      	ldr	r0, [pc, #44]	; (8001464 <toggleLeds+0xdc>)
 8001436:	f000 fe4c 	bl	80020d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LR_GREEN_GPIO_Port, LR_GREEN_Pin, SET);
 800143a:	2201      	movs	r2, #1
 800143c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001440:	4808      	ldr	r0, [pc, #32]	; (8001464 <toggleLeds+0xdc>)
 8001442:	f000 fe46 	bl	80020d2 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin( TB_RED_GPIO_Port , TB_RED_Pin) ;
 8001446:	2108      	movs	r1, #8
 8001448:	4806      	ldr	r0, [pc, #24]	; (8001464 <toggleLeds+0xdc>)
 800144a:	f000 fe5a 	bl	8002102 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin( LR_RED_GPIO_Port , LR_RED_Pin) ;
 800144e:	2140      	movs	r1, #64	; 0x40
 8001450:	4804      	ldr	r0, [pc, #16]	; (8001464 <toggleLeds+0xdc>)
 8001452:	f000 fe56 	bl	8002102 <HAL_GPIO_TogglePin>
		break;
 8001456:	e000      	b.n	800145a <toggleLeds+0xd2>
	default:
		break;
 8001458:	bf00      	nop
	}
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40010c00 	.word	0x40010c00

08001468 <enable0>:

void enable0(){
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 800146c:	2200      	movs	r2, #0
 800146e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001472:	4805      	ldr	r0, [pc, #20]	; (8001488 <enable0+0x20>)
 8001474:	f000 fe2d 	bl	80020d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8001478:	2201      	movs	r2, #1
 800147a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800147e:	4802      	ldr	r0, [pc, #8]	; (8001488 <enable0+0x20>)
 8001480:	f000 fe27 	bl	80020d2 <HAL_GPIO_WritePin>
}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40010c00 	.word	0x40010c00

0800148c <enable1>:

void enable1(){
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8001490:	2201      	movs	r2, #1
 8001492:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001496:	4805      	ldr	r0, [pc, #20]	; (80014ac <enable1+0x20>)
 8001498:	f000 fe1b 	bl	80020d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 800149c:	2200      	movs	r2, #0
 800149e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014a2:	4802      	ldr	r0, [pc, #8]	; (80014ac <enable1+0x20>)
 80014a4:	f000 fe15 	bl	80020d2 <HAL_GPIO_WritePin>
}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40010c00 	.word	0x40010c00

080014b0 <enable2>:

void enable2(){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 80014b4:	2200      	movs	r2, #0
 80014b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014ba:	4805      	ldr	r0, [pc, #20]	; (80014d0 <enable2+0x20>)
 80014bc:	f000 fe09 	bl	80020d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80014c0:	2201      	movs	r2, #1
 80014c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014c6:	4802      	ldr	r0, [pc, #8]	; (80014d0 <enable2+0x20>)
 80014c8:	f000 fe03 	bl	80020d2 <HAL_GPIO_WritePin>
}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40010c00 	.word	0x40010c00

080014d4 <enable3>:

void enable3(){
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80014d8:	2201      	movs	r2, #1
 80014da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014de:	4805      	ldr	r0, [pc, #20]	; (80014f4 <enable3+0x20>)
 80014e0:	f000 fdf7 	bl	80020d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80014e4:	2200      	movs	r2, #0
 80014e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014ea:	4802      	ldr	r0, [pc, #8]	; (80014f4 <enable3+0x20>)
 80014ec:	f000 fdf1 	bl	80020d2 <HAL_GPIO_WritePin>
}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40010c00 	.word	0x40010c00

080014f8 <showTimeDelay_First>:

void showTimeDelay_First(int first, int second){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
	enable0();
 8001502:	f7ff ffb1 	bl	8001468 <enable0>
	display7SEG_TopToBottom(first/10);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a0c      	ldr	r2, [pc, #48]	; (800153c <showTimeDelay_First+0x44>)
 800150a:	fb82 1203 	smull	r1, r2, r2, r3
 800150e:	1092      	asrs	r2, r2, #2
 8001510:	17db      	asrs	r3, r3, #31
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fb1f 	bl	8000b58 <display7SEG_TopToBottom>
	enable2();
 800151a:	f7ff ffc9 	bl	80014b0 <enable2>
	display7SEG_LeftToRight(second/10);
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	4a06      	ldr	r2, [pc, #24]	; (800153c <showTimeDelay_First+0x44>)
 8001522:	fb82 1203 	smull	r1, r2, r2, r3
 8001526:	1092      	asrs	r2, r2, #2
 8001528:	17db      	asrs	r3, r3, #31
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fca3 	bl	8000e78 <display7SEG_LeftToRight>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	66666667 	.word	0x66666667

08001540 <showTimeDelay_Second>:

void showTimeDelay_Second(int first, int second){
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
	enable1();
 800154a:	f7ff ff9f 	bl	800148c <enable1>
	display7SEG_TopToBottom(first%10);
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <showTimeDelay_Second+0x58>)
 8001552:	fb83 1302 	smull	r1, r3, r3, r2
 8001556:	1099      	asrs	r1, r3, #2
 8001558:	17d3      	asrs	r3, r2, #31
 800155a:	1ac9      	subs	r1, r1, r3
 800155c:	460b      	mov	r3, r1
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	440b      	add	r3, r1
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	1ad1      	subs	r1, r2, r3
 8001566:	4608      	mov	r0, r1
 8001568:	f7ff faf6 	bl	8000b58 <display7SEG_TopToBottom>
	enable3();
 800156c:	f7ff ffb2 	bl	80014d4 <enable3>
	display7SEG_LeftToRight(second%10);
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <showTimeDelay_Second+0x58>)
 8001574:	fb83 1302 	smull	r1, r3, r3, r2
 8001578:	1099      	asrs	r1, r3, #2
 800157a:	17d3      	asrs	r3, r2, #31
 800157c:	1ac9      	subs	r1, r1, r3
 800157e:	460b      	mov	r3, r1
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	440b      	add	r3, r1
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	1ad1      	subs	r1, r2, r3
 8001588:	4608      	mov	r0, r1
 800158a:	f7ff fc75 	bl	8000e78 <display7SEG_LeftToRight>
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	66666667 	.word	0x66666667

0800159c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015a0:	f000 fa96 	bl	8001ad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015a4:	f000 f816 	bl	80015d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015a8:	f000 f89c 	bl	80016e4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80015ac:	f000 f84e 	bl	800164c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 80015b0:	4807      	ldr	r0, [pc, #28]	; (80015d0 <main+0x34>)
 80015b2:	f001 f9eb 	bl	800298c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setValues();
 80015b6:	f7ff fa73 	bl	8000aa0 <setValues>
  displayTopToBottomLED(LED_INIT);
 80015ba:	2000      	movs	r0, #0
 80015bc:	f7ff fe28 	bl	8001210 <displayTopToBottomLED>
  displayLeftToRightLED(LED_INIT);
 80015c0:	2000      	movs	r0, #0
 80015c2:	f7ff fe81 	bl	80012c8 <displayLeftToRightLED>
  while (1){
	  fsm_auto();
 80015c6:	f7fe fe79 	bl	80002bc <fsm_auto>
	  fsm_manual();
 80015ca:	f7ff fa29 	bl	8000a20 <fsm_manual>
	  fsm_auto();
 80015ce:	e7fa      	b.n	80015c6 <main+0x2a>
 80015d0:	200000c0 	.word	0x200000c0

080015d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b090      	sub	sp, #64	; 0x40
 80015d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015da:	f107 0318 	add.w	r3, r7, #24
 80015de:	2228      	movs	r2, #40	; 0x28
 80015e0:	2100      	movs	r1, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f001 fd82 	bl	80030ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]
 80015f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015f6:	2302      	movs	r3, #2
 80015f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015fa:	2301      	movs	r3, #1
 80015fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015fe:	2310      	movs	r3, #16
 8001600:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001602:	2300      	movs	r3, #0
 8001604:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001606:	f107 0318 	add.w	r3, r7, #24
 800160a:	4618      	mov	r0, r3
 800160c:	f000 fd92 	bl	8002134 <HAL_RCC_OscConfig>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001616:	f000 f8d3 	bl	80017c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800161a:	230f      	movs	r3, #15
 800161c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800161e:	2300      	movs	r3, #0
 8001620:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	2100      	movs	r1, #0
 8001632:	4618      	mov	r0, r3
 8001634:	f000 fffe 	bl	8002634 <HAL_RCC_ClockConfig>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800163e:	f000 f8bf 	bl	80017c0 <Error_Handler>
  }
}
 8001642:	bf00      	nop
 8001644:	3740      	adds	r7, #64	; 0x40
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001652:	f107 0308 	add.w	r3, r7, #8
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001660:	463b      	mov	r3, r7
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001668:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <MX_TIM2_Init+0x94>)
 800166a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800166e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001670:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <MX_TIM2_Init+0x94>)
 8001672:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001676:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001678:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <MX_TIM2_Init+0x94>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800167e:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <MX_TIM2_Init+0x94>)
 8001680:	2209      	movs	r2, #9
 8001682:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001684:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <MX_TIM2_Init+0x94>)
 8001686:	2200      	movs	r2, #0
 8001688:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168a:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <MX_TIM2_Init+0x94>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001690:	4813      	ldr	r0, [pc, #76]	; (80016e0 <MX_TIM2_Init+0x94>)
 8001692:	f001 f92b 	bl	80028ec <HAL_TIM_Base_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800169c:	f000 f890 	bl	80017c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016a6:	f107 0308 	add.w	r3, r7, #8
 80016aa:	4619      	mov	r1, r3
 80016ac:	480c      	ldr	r0, [pc, #48]	; (80016e0 <MX_TIM2_Init+0x94>)
 80016ae:	f001 faa9 	bl	8002c04 <HAL_TIM_ConfigClockSource>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80016b8:	f000 f882 	bl	80017c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016bc:	2300      	movs	r3, #0
 80016be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c0:	2300      	movs	r3, #0
 80016c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016c4:	463b      	mov	r3, r7
 80016c6:	4619      	mov	r1, r3
 80016c8:	4805      	ldr	r0, [pc, #20]	; (80016e0 <MX_TIM2_Init+0x94>)
 80016ca:	f001 fc81 	bl	8002fd0 <HAL_TIMEx_MasterConfigSynchronization>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80016d4:	f000 f874 	bl	80017c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016d8:	bf00      	nop
 80016da:	3718      	adds	r7, #24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	200000c0 	.word	0x200000c0

080016e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ea:	f107 0308 	add.w	r3, r7, #8
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]
 80016f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f8:	4b28      	ldr	r3, [pc, #160]	; (800179c <MX_GPIO_Init+0xb8>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	4a27      	ldr	r2, [pc, #156]	; (800179c <MX_GPIO_Init+0xb8>)
 80016fe:	f043 0304 	orr.w	r3, r3, #4
 8001702:	6193      	str	r3, [r2, #24]
 8001704:	4b25      	ldr	r3, [pc, #148]	; (800179c <MX_GPIO_Init+0xb8>)
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001710:	4b22      	ldr	r3, [pc, #136]	; (800179c <MX_GPIO_Init+0xb8>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	4a21      	ldr	r2, [pc, #132]	; (800179c <MX_GPIO_Init+0xb8>)
 8001716:	f043 0308 	orr.w	r3, r3, #8
 800171a:	6193      	str	r3, [r2, #24]
 800171c:	4b1f      	ldr	r3, [pc, #124]	; (800179c <MX_GPIO_Init+0xb8>)
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	f003 0308 	and.w	r3, r3, #8
 8001724:	603b      	str	r3, [r7, #0]
 8001726:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A1_Pin|B1_Pin|C1_Pin|D1_Pin
 8001728:	2200      	movs	r2, #0
 800172a:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800172e:	481c      	ldr	r0, [pc, #112]	; (80017a0 <MX_GPIO_Init+0xbc>)
 8001730:	f000 fccf 	bl	80020d2 <HAL_GPIO_WritePin>
                          |E1_Pin|F1_Pin|G1_Pin|A2_Pin
                          |B2_Pin|C2_Pin|D2_Pin|E2_Pin
                          |F2_Pin|G2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN1_Pin|EN2_Pin|EN3_Pin|TB_RED_Pin
 8001734:	2200      	movs	r2, #0
 8001736:	f641 71f8 	movw	r1, #8184	; 0x1ff8
 800173a:	481a      	ldr	r0, [pc, #104]	; (80017a4 <MX_GPIO_Init+0xc0>)
 800173c:	f000 fcc9 	bl	80020d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A1_Pin B1_Pin C1_Pin D1_Pin
                           E1_Pin F1_Pin G1_Pin A2_Pin
                           B2_Pin C2_Pin D2_Pin E2_Pin
                           F2_Pin G2_Pin */
  GPIO_InitStruct.Pin = A1_Pin|B1_Pin|C1_Pin|D1_Pin
 8001740:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8001744:	60bb      	str	r3, [r7, #8]
                          |E1_Pin|F1_Pin|G1_Pin|A2_Pin
                          |B2_Pin|C2_Pin|D2_Pin|E2_Pin
                          |F2_Pin|G2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001746:	2301      	movs	r3, #1
 8001748:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174e:	2302      	movs	r3, #2
 8001750:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001752:	f107 0308 	add.w	r3, r7, #8
 8001756:	4619      	mov	r1, r3
 8001758:	4811      	ldr	r0, [pc, #68]	; (80017a0 <MX_GPIO_Init+0xbc>)
 800175a:	f000 fb29 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 800175e:	2307      	movs	r3, #7
 8001760:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001766:	2301      	movs	r3, #1
 8001768:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176a:	f107 0308 	add.w	r3, r7, #8
 800176e:	4619      	mov	r1, r3
 8001770:	480c      	ldr	r0, [pc, #48]	; (80017a4 <MX_GPIO_Init+0xc0>)
 8001772:	f000 fb1d 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN1_Pin EN2_Pin EN3_Pin TB_RED_Pin
                           TB_YELLOW_Pin TB_GREEN_Pin LR_RED_Pin LR_YELLOW_Pin
                           LR_GREEN_Pin EN0_Pin */
  GPIO_InitStruct.Pin = EN1_Pin|EN2_Pin|EN3_Pin|TB_RED_Pin
 8001776:	f641 73f8 	movw	r3, #8184	; 0x1ff8
 800177a:	60bb      	str	r3, [r7, #8]
                          |TB_YELLOW_Pin|TB_GREEN_Pin|LR_RED_Pin|LR_YELLOW_Pin
                          |LR_GREEN_Pin|EN0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177c:	2301      	movs	r3, #1
 800177e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2302      	movs	r3, #2
 8001786:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001788:	f107 0308 	add.w	r3, r7, #8
 800178c:	4619      	mov	r1, r3
 800178e:	4805      	ldr	r0, [pc, #20]	; (80017a4 <MX_GPIO_Init+0xc0>)
 8001790:	f000 fb0e 	bl	8001db0 <HAL_GPIO_Init>

}
 8001794:	bf00      	nop
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40021000 	.word	0x40021000
 80017a0:	40010800 	.word	0x40010800
 80017a4:	40010c00 	.word	0x40010c00

080017a8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	getKeyInput();
 80017b0:	f7fe fcdc 	bl	800016c <getKeyInput>
	timerRun();
 80017b4:	f000 f86e 	bl	8001894 <timerRun>
}
 80017b8:	bf00      	nop
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c4:	b672      	cpsid	i
}
 80017c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <Error_Handler+0x8>
	...

080017cc <setTimer0>:
int timer3_counter = 0;

int timer4_flag = 0;
int timer4_counter = 0;

void setTimer0(int duration){
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
	timer0_counter = duration;
 80017d4:	4a05      	ldr	r2, [pc, #20]	; (80017ec <setTimer0+0x20>)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 80017da:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <setTimer0+0x24>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	20000084 	.word	0x20000084
 80017f0:	20000080 	.word	0x20000080

080017f4 <setTimer1>:

void setTimer1(int duration){
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 80017fc:	4a05      	ldr	r2, [pc, #20]	; (8001814 <setTimer1+0x20>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001802:	4b05      	ldr	r3, [pc, #20]	; (8001818 <setTimer1+0x24>)
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	2000008c 	.word	0x2000008c
 8001818:	20000088 	.word	0x20000088

0800181c <setTimer2>:

void setTimer2(int duration){
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 8001824:	4a05      	ldr	r2, [pc, #20]	; (800183c <setTimer2+0x20>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800182a:	4b05      	ldr	r3, [pc, #20]	; (8001840 <setTimer2+0x24>)
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	20000094 	.word	0x20000094
 8001840:	20000090 	.word	0x20000090

08001844 <setTimer3>:

void setTimer3(int duration){
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 800184c:	4a05      	ldr	r2, [pc, #20]	; (8001864 <setTimer3+0x20>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001852:	4b05      	ldr	r3, [pc, #20]	; (8001868 <setTimer3+0x24>)
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	2000009c 	.word	0x2000009c
 8001868:	20000098 	.word	0x20000098

0800186c <setTimer4>:

void setTimer4(int duration){
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
	timer4_counter = duration;
 8001874:	4a05      	ldr	r2, [pc, #20]	; (800188c <setTimer4+0x20>)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 800187a:	4b05      	ldr	r3, [pc, #20]	; (8001890 <setTimer4+0x24>)
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	200000a4 	.word	0x200000a4
 8001890:	200000a0 	.word	0x200000a0

08001894 <timerRun>:

void timerRun(){
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
	if(timer0_counter > 0){
 8001898:	4b29      	ldr	r3, [pc, #164]	; (8001940 <timerRun+0xac>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	dd0b      	ble.n	80018b8 <timerRun+0x24>
		timer0_counter--;
 80018a0:	4b27      	ldr	r3, [pc, #156]	; (8001940 <timerRun+0xac>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	3b01      	subs	r3, #1
 80018a6:	4a26      	ldr	r2, [pc, #152]	; (8001940 <timerRun+0xac>)
 80018a8:	6013      	str	r3, [r2, #0]
		if(timer0_counter <= 0){
 80018aa:	4b25      	ldr	r3, [pc, #148]	; (8001940 <timerRun+0xac>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	dc02      	bgt.n	80018b8 <timerRun+0x24>
			timer0_flag = 1;
 80018b2:	4b24      	ldr	r3, [pc, #144]	; (8001944 <timerRun+0xb0>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer1_counter > 0){
 80018b8:	4b23      	ldr	r3, [pc, #140]	; (8001948 <timerRun+0xb4>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	dd0b      	ble.n	80018d8 <timerRun+0x44>
		timer1_counter--;
 80018c0:	4b21      	ldr	r3, [pc, #132]	; (8001948 <timerRun+0xb4>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	3b01      	subs	r3, #1
 80018c6:	4a20      	ldr	r2, [pc, #128]	; (8001948 <timerRun+0xb4>)
 80018c8:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 80018ca:	4b1f      	ldr	r3, [pc, #124]	; (8001948 <timerRun+0xb4>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	dc02      	bgt.n	80018d8 <timerRun+0x44>
			timer1_flag = 1;
 80018d2:	4b1e      	ldr	r3, [pc, #120]	; (800194c <timerRun+0xb8>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 80018d8:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <timerRun+0xbc>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	dd0b      	ble.n	80018f8 <timerRun+0x64>
		timer2_counter--;
 80018e0:	4b1b      	ldr	r3, [pc, #108]	; (8001950 <timerRun+0xbc>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	3b01      	subs	r3, #1
 80018e6:	4a1a      	ldr	r2, [pc, #104]	; (8001950 <timerRun+0xbc>)
 80018e8:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 80018ea:	4b19      	ldr	r3, [pc, #100]	; (8001950 <timerRun+0xbc>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	dc02      	bgt.n	80018f8 <timerRun+0x64>
			timer2_flag = 1;
 80018f2:	4b18      	ldr	r3, [pc, #96]	; (8001954 <timerRun+0xc0>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0){
 80018f8:	4b17      	ldr	r3, [pc, #92]	; (8001958 <timerRun+0xc4>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	dd0b      	ble.n	8001918 <timerRun+0x84>
		timer3_counter--;
 8001900:	4b15      	ldr	r3, [pc, #84]	; (8001958 <timerRun+0xc4>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	3b01      	subs	r3, #1
 8001906:	4a14      	ldr	r2, [pc, #80]	; (8001958 <timerRun+0xc4>)
 8001908:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 800190a:	4b13      	ldr	r3, [pc, #76]	; (8001958 <timerRun+0xc4>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	dc02      	bgt.n	8001918 <timerRun+0x84>
			timer3_flag = 1;
 8001912:	4b12      	ldr	r3, [pc, #72]	; (800195c <timerRun+0xc8>)
 8001914:	2201      	movs	r2, #1
 8001916:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter > 0){
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <timerRun+0xcc>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	dd0b      	ble.n	8001938 <timerRun+0xa4>
		timer4_counter--;
 8001920:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <timerRun+0xcc>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	3b01      	subs	r3, #1
 8001926:	4a0e      	ldr	r2, [pc, #56]	; (8001960 <timerRun+0xcc>)
 8001928:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 800192a:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <timerRun+0xcc>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	dc02      	bgt.n	8001938 <timerRun+0xa4>
			timer4_flag = 1;
 8001932:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <timerRun+0xd0>)
 8001934:	2201      	movs	r2, #1
 8001936:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr
 8001940:	20000084 	.word	0x20000084
 8001944:	20000080 	.word	0x20000080
 8001948:	2000008c 	.word	0x2000008c
 800194c:	20000088 	.word	0x20000088
 8001950:	20000094 	.word	0x20000094
 8001954:	20000090 	.word	0x20000090
 8001958:	2000009c 	.word	0x2000009c
 800195c:	20000098 	.word	0x20000098
 8001960:	200000a4 	.word	0x200000a4
 8001964:	200000a0 	.word	0x200000a0

08001968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <HAL_MspInit+0x5c>)
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	4a14      	ldr	r2, [pc, #80]	; (80019c4 <HAL_MspInit+0x5c>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6193      	str	r3, [r2, #24]
 800197a:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <HAL_MspInit+0x5c>)
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	60bb      	str	r3, [r7, #8]
 8001984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001986:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <HAL_MspInit+0x5c>)
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	4a0e      	ldr	r2, [pc, #56]	; (80019c4 <HAL_MspInit+0x5c>)
 800198c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001990:	61d3      	str	r3, [r2, #28]
 8001992:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <HAL_MspInit+0x5c>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800199e:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <HAL_MspInit+0x60>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	4a04      	ldr	r2, [pc, #16]	; (80019c8 <HAL_MspInit+0x60>)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ba:	bf00      	nop
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40010000 	.word	0x40010000

080019cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019dc:	d113      	bne.n	8001a06 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019de:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <HAL_TIM_Base_MspInit+0x44>)
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	4a0b      	ldr	r2, [pc, #44]	; (8001a10 <HAL_TIM_Base_MspInit+0x44>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	61d3      	str	r3, [r2, #28]
 80019ea:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <HAL_TIM_Base_MspInit+0x44>)
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019f6:	2200      	movs	r2, #0
 80019f8:	2100      	movs	r1, #0
 80019fa:	201c      	movs	r0, #28
 80019fc:	f000 f9a1 	bl	8001d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a00:	201c      	movs	r0, #28
 8001a02:	f000 f9ba 	bl	8001d7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40021000 	.word	0x40021000

08001a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a18:	e7fe      	b.n	8001a18 <NMI_Handler+0x4>

08001a1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a1e:	e7fe      	b.n	8001a1e <HardFault_Handler+0x4>

08001a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a24:	e7fe      	b.n	8001a24 <MemManage_Handler+0x4>

08001a26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a2a:	e7fe      	b.n	8001a2a <BusFault_Handler+0x4>

08001a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a30:	e7fe      	b.n	8001a30 <UsageFault_Handler+0x4>

08001a32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr

08001a3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr

08001a4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr

08001a56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a5a:	f000 f87f 	bl	8001b5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a68:	4802      	ldr	r0, [pc, #8]	; (8001a74 <TIM2_IRQHandler+0x10>)
 8001a6a:	f000 ffdb 	bl	8002a24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	200000c0 	.word	0x200000c0

08001a78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr

08001a84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a84:	f7ff fff8 	bl	8001a78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a88:	480b      	ldr	r0, [pc, #44]	; (8001ab8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a8a:	490c      	ldr	r1, [pc, #48]	; (8001abc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a8c:	4a0c      	ldr	r2, [pc, #48]	; (8001ac0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a90:	e002      	b.n	8001a98 <LoopCopyDataInit>

08001a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a96:	3304      	adds	r3, #4

08001a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a9c:	d3f9      	bcc.n	8001a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a9e:	4a09      	ldr	r2, [pc, #36]	; (8001ac4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001aa0:	4c09      	ldr	r4, [pc, #36]	; (8001ac8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa4:	e001      	b.n	8001aaa <LoopFillZerobss>

08001aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa8:	3204      	adds	r2, #4

08001aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aac:	d3fb      	bcc.n	8001aa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aae:	f001 faf9 	bl	80030a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ab2:	f7ff fd73 	bl	800159c <main>
  bx lr
 8001ab6:	4770      	bx	lr
  ldr r0, =_sdata
 8001ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001abc:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8001ac0:	08003140 	.word	0x08003140
  ldr r2, =_sbss
 8001ac4:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8001ac8:	2000010c 	.word	0x2000010c

08001acc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001acc:	e7fe      	b.n	8001acc <ADC1_2_IRQHandler>
	...

08001ad0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ad4:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <HAL_Init+0x28>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a07      	ldr	r2, [pc, #28]	; (8001af8 <HAL_Init+0x28>)
 8001ada:	f043 0310 	orr.w	r3, r3, #16
 8001ade:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae0:	2003      	movs	r0, #3
 8001ae2:	f000 f923 	bl	8001d2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ae6:	200f      	movs	r0, #15
 8001ae8:	f000 f808 	bl	8001afc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aec:	f7ff ff3c 	bl	8001968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40022000 	.word	0x40022000

08001afc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b04:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <HAL_InitTick+0x54>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <HAL_InitTick+0x58>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f000 f93b 	bl	8001d96 <HAL_SYSTICK_Config>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e00e      	b.n	8001b48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b0f      	cmp	r3, #15
 8001b2e:	d80a      	bhi.n	8001b46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b30:	2200      	movs	r2, #0
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	f04f 30ff 	mov.w	r0, #4294967295
 8001b38:	f000 f903 	bl	8001d42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b3c:	4a06      	ldr	r2, [pc, #24]	; (8001b58 <HAL_InitTick+0x5c>)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
 8001b44:	e000      	b.n	8001b48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20000048 	.word	0x20000048
 8001b54:	20000050 	.word	0x20000050
 8001b58:	2000004c 	.word	0x2000004c

08001b5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <HAL_IncTick+0x1c>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	461a      	mov	r2, r3
 8001b66:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <HAL_IncTick+0x20>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	4a03      	ldr	r2, [pc, #12]	; (8001b7c <HAL_IncTick+0x20>)
 8001b6e:	6013      	str	r3, [r2, #0]
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr
 8001b78:	20000050 	.word	0x20000050
 8001b7c:	20000108 	.word	0x20000108

08001b80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return uwTick;
 8001b84:	4b02      	ldr	r3, [pc, #8]	; (8001b90 <HAL_GetTick+0x10>)
 8001b86:	681b      	ldr	r3, [r3, #0]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr
 8001b90:	20000108 	.word	0x20000108

08001b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bc6:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	60d3      	str	r3, [r2, #12]
}
 8001bcc:	bf00      	nop
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be0:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	0a1b      	lsrs	r3, r3, #8
 8001be6:	f003 0307 	and.w	r3, r3, #7
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	db0b      	blt.n	8001c22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	f003 021f 	and.w	r2, r3, #31
 8001c10:	4906      	ldr	r1, [pc, #24]	; (8001c2c <__NVIC_EnableIRQ+0x34>)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	095b      	lsrs	r3, r3, #5
 8001c18:	2001      	movs	r0, #1
 8001c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr
 8001c2c:	e000e100 	.word	0xe000e100

08001c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	6039      	str	r1, [r7, #0]
 8001c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	db0a      	blt.n	8001c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	490c      	ldr	r1, [pc, #48]	; (8001c7c <__NVIC_SetPriority+0x4c>)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	0112      	lsls	r2, r2, #4
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	440b      	add	r3, r1
 8001c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c58:	e00a      	b.n	8001c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	4908      	ldr	r1, [pc, #32]	; (8001c80 <__NVIC_SetPriority+0x50>)
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	3b04      	subs	r3, #4
 8001c68:	0112      	lsls	r2, r2, #4
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	761a      	strb	r2, [r3, #24]
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	e000e100 	.word	0xe000e100
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b089      	sub	sp, #36	; 0x24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f1c3 0307 	rsb	r3, r3, #7
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	bf28      	it	cs
 8001ca2:	2304      	movcs	r3, #4
 8001ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	2b06      	cmp	r3, #6
 8001cac:	d902      	bls.n	8001cb4 <NVIC_EncodePriority+0x30>
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3b03      	subs	r3, #3
 8001cb2:	e000      	b.n	8001cb6 <NVIC_EncodePriority+0x32>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43da      	mvns	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	401a      	ands	r2, r3
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd6:	43d9      	mvns	r1, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cdc:	4313      	orrs	r3, r2
         );
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3724      	adds	r7, #36	; 0x24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf8:	d301      	bcc.n	8001cfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e00f      	b.n	8001d1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cfe:	4a0a      	ldr	r2, [pc, #40]	; (8001d28 <SysTick_Config+0x40>)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d06:	210f      	movs	r1, #15
 8001d08:	f04f 30ff 	mov.w	r0, #4294967295
 8001d0c:	f7ff ff90 	bl	8001c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <SysTick_Config+0x40>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d16:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <SysTick_Config+0x40>)
 8001d18:	2207      	movs	r2, #7
 8001d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	e000e010 	.word	0xe000e010

08001d2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff ff2d 	bl	8001b94 <__NVIC_SetPriorityGrouping>
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b086      	sub	sp, #24
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	4603      	mov	r3, r0
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
 8001d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d54:	f7ff ff42 	bl	8001bdc <__NVIC_GetPriorityGrouping>
 8001d58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	68b9      	ldr	r1, [r7, #8]
 8001d5e:	6978      	ldr	r0, [r7, #20]
 8001d60:	f7ff ff90 	bl	8001c84 <NVIC_EncodePriority>
 8001d64:	4602      	mov	r2, r0
 8001d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff ff5f 	bl	8001c30 <__NVIC_SetPriority>
}
 8001d72:	bf00      	nop
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	4603      	mov	r3, r0
 8001d82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff35 	bl	8001bf8 <__NVIC_EnableIRQ>
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7ff ffa2 	bl	8001ce8 <SysTick_Config>
 8001da4:	4603      	mov	r3, r0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b08b      	sub	sp, #44	; 0x2c
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dc2:	e148      	b.n	8002056 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	69fa      	ldr	r2, [r7, #28]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	f040 8137 	bne.w	8002050 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	4aa3      	ldr	r2, [pc, #652]	; (8002074 <HAL_GPIO_Init+0x2c4>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d05e      	beq.n	8001eaa <HAL_GPIO_Init+0xfa>
 8001dec:	4aa1      	ldr	r2, [pc, #644]	; (8002074 <HAL_GPIO_Init+0x2c4>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d875      	bhi.n	8001ede <HAL_GPIO_Init+0x12e>
 8001df2:	4aa1      	ldr	r2, [pc, #644]	; (8002078 <HAL_GPIO_Init+0x2c8>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d058      	beq.n	8001eaa <HAL_GPIO_Init+0xfa>
 8001df8:	4a9f      	ldr	r2, [pc, #636]	; (8002078 <HAL_GPIO_Init+0x2c8>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d86f      	bhi.n	8001ede <HAL_GPIO_Init+0x12e>
 8001dfe:	4a9f      	ldr	r2, [pc, #636]	; (800207c <HAL_GPIO_Init+0x2cc>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d052      	beq.n	8001eaa <HAL_GPIO_Init+0xfa>
 8001e04:	4a9d      	ldr	r2, [pc, #628]	; (800207c <HAL_GPIO_Init+0x2cc>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d869      	bhi.n	8001ede <HAL_GPIO_Init+0x12e>
 8001e0a:	4a9d      	ldr	r2, [pc, #628]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d04c      	beq.n	8001eaa <HAL_GPIO_Init+0xfa>
 8001e10:	4a9b      	ldr	r2, [pc, #620]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d863      	bhi.n	8001ede <HAL_GPIO_Init+0x12e>
 8001e16:	4a9b      	ldr	r2, [pc, #620]	; (8002084 <HAL_GPIO_Init+0x2d4>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d046      	beq.n	8001eaa <HAL_GPIO_Init+0xfa>
 8001e1c:	4a99      	ldr	r2, [pc, #612]	; (8002084 <HAL_GPIO_Init+0x2d4>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d85d      	bhi.n	8001ede <HAL_GPIO_Init+0x12e>
 8001e22:	2b12      	cmp	r3, #18
 8001e24:	d82a      	bhi.n	8001e7c <HAL_GPIO_Init+0xcc>
 8001e26:	2b12      	cmp	r3, #18
 8001e28:	d859      	bhi.n	8001ede <HAL_GPIO_Init+0x12e>
 8001e2a:	a201      	add	r2, pc, #4	; (adr r2, 8001e30 <HAL_GPIO_Init+0x80>)
 8001e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e30:	08001eab 	.word	0x08001eab
 8001e34:	08001e85 	.word	0x08001e85
 8001e38:	08001e97 	.word	0x08001e97
 8001e3c:	08001ed9 	.word	0x08001ed9
 8001e40:	08001edf 	.word	0x08001edf
 8001e44:	08001edf 	.word	0x08001edf
 8001e48:	08001edf 	.word	0x08001edf
 8001e4c:	08001edf 	.word	0x08001edf
 8001e50:	08001edf 	.word	0x08001edf
 8001e54:	08001edf 	.word	0x08001edf
 8001e58:	08001edf 	.word	0x08001edf
 8001e5c:	08001edf 	.word	0x08001edf
 8001e60:	08001edf 	.word	0x08001edf
 8001e64:	08001edf 	.word	0x08001edf
 8001e68:	08001edf 	.word	0x08001edf
 8001e6c:	08001edf 	.word	0x08001edf
 8001e70:	08001edf 	.word	0x08001edf
 8001e74:	08001e8d 	.word	0x08001e8d
 8001e78:	08001ea1 	.word	0x08001ea1
 8001e7c:	4a82      	ldr	r2, [pc, #520]	; (8002088 <HAL_GPIO_Init+0x2d8>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d013      	beq.n	8001eaa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e82:	e02c      	b.n	8001ede <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	623b      	str	r3, [r7, #32]
          break;
 8001e8a:	e029      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	3304      	adds	r3, #4
 8001e92:	623b      	str	r3, [r7, #32]
          break;
 8001e94:	e024      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	3308      	adds	r3, #8
 8001e9c:	623b      	str	r3, [r7, #32]
          break;
 8001e9e:	e01f      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	330c      	adds	r3, #12
 8001ea6:	623b      	str	r3, [r7, #32]
          break;
 8001ea8:	e01a      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d102      	bne.n	8001eb8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001eb2:	2304      	movs	r3, #4
 8001eb4:	623b      	str	r3, [r7, #32]
          break;
 8001eb6:	e013      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d105      	bne.n	8001ecc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ec0:	2308      	movs	r3, #8
 8001ec2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	69fa      	ldr	r2, [r7, #28]
 8001ec8:	611a      	str	r2, [r3, #16]
          break;
 8001eca:	e009      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ecc:	2308      	movs	r3, #8
 8001ece:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	69fa      	ldr	r2, [r7, #28]
 8001ed4:	615a      	str	r2, [r3, #20]
          break;
 8001ed6:	e003      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	623b      	str	r3, [r7, #32]
          break;
 8001edc:	e000      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          break;
 8001ede:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	2bff      	cmp	r3, #255	; 0xff
 8001ee4:	d801      	bhi.n	8001eea <HAL_GPIO_Init+0x13a>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	e001      	b.n	8001eee <HAL_GPIO_Init+0x13e>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3304      	adds	r3, #4
 8001eee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	2bff      	cmp	r3, #255	; 0xff
 8001ef4:	d802      	bhi.n	8001efc <HAL_GPIO_Init+0x14c>
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	e002      	b.n	8001f02 <HAL_GPIO_Init+0x152>
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	3b08      	subs	r3, #8
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	210f      	movs	r1, #15
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	401a      	ands	r2, r3
 8001f14:	6a39      	ldr	r1, [r7, #32]
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 8090 	beq.w	8002050 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f30:	4b56      	ldr	r3, [pc, #344]	; (800208c <HAL_GPIO_Init+0x2dc>)
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	4a55      	ldr	r2, [pc, #340]	; (800208c <HAL_GPIO_Init+0x2dc>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	6193      	str	r3, [r2, #24]
 8001f3c:	4b53      	ldr	r3, [pc, #332]	; (800208c <HAL_GPIO_Init+0x2dc>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f48:	4a51      	ldr	r2, [pc, #324]	; (8002090 <HAL_GPIO_Init+0x2e0>)
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	089b      	lsrs	r3, r3, #2
 8001f4e:	3302      	adds	r3, #2
 8001f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	220f      	movs	r2, #15
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a49      	ldr	r2, [pc, #292]	; (8002094 <HAL_GPIO_Init+0x2e4>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d00d      	beq.n	8001f90 <HAL_GPIO_Init+0x1e0>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a48      	ldr	r2, [pc, #288]	; (8002098 <HAL_GPIO_Init+0x2e8>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d007      	beq.n	8001f8c <HAL_GPIO_Init+0x1dc>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a47      	ldr	r2, [pc, #284]	; (800209c <HAL_GPIO_Init+0x2ec>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d101      	bne.n	8001f88 <HAL_GPIO_Init+0x1d8>
 8001f84:	2302      	movs	r3, #2
 8001f86:	e004      	b.n	8001f92 <HAL_GPIO_Init+0x1e2>
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e002      	b.n	8001f92 <HAL_GPIO_Init+0x1e2>
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e000      	b.n	8001f92 <HAL_GPIO_Init+0x1e2>
 8001f90:	2300      	movs	r3, #0
 8001f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f94:	f002 0203 	and.w	r2, r2, #3
 8001f98:	0092      	lsls	r2, r2, #2
 8001f9a:	4093      	lsls	r3, r2
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fa2:	493b      	ldr	r1, [pc, #236]	; (8002090 <HAL_GPIO_Init+0x2e0>)
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	089b      	lsrs	r3, r3, #2
 8001fa8:	3302      	adds	r3, #2
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d006      	beq.n	8001fca <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fbc:	4b38      	ldr	r3, [pc, #224]	; (80020a0 <HAL_GPIO_Init+0x2f0>)
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	4937      	ldr	r1, [pc, #220]	; (80020a0 <HAL_GPIO_Init+0x2f0>)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	608b      	str	r3, [r1, #8]
 8001fc8:	e006      	b.n	8001fd8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fca:	4b35      	ldr	r3, [pc, #212]	; (80020a0 <HAL_GPIO_Init+0x2f0>)
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	4933      	ldr	r1, [pc, #204]	; (80020a0 <HAL_GPIO_Init+0x2f0>)
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d006      	beq.n	8001ff2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fe4:	4b2e      	ldr	r3, [pc, #184]	; (80020a0 <HAL_GPIO_Init+0x2f0>)
 8001fe6:	68da      	ldr	r2, [r3, #12]
 8001fe8:	492d      	ldr	r1, [pc, #180]	; (80020a0 <HAL_GPIO_Init+0x2f0>)
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	60cb      	str	r3, [r1, #12]
 8001ff0:	e006      	b.n	8002000 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ff2:	4b2b      	ldr	r3, [pc, #172]	; (80020a0 <HAL_GPIO_Init+0x2f0>)
 8001ff4:	68da      	ldr	r2, [r3, #12]
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	4929      	ldr	r1, [pc, #164]	; (80020a0 <HAL_GPIO_Init+0x2f0>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d006      	beq.n	800201a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800200c:	4b24      	ldr	r3, [pc, #144]	; (80020a0 <HAL_GPIO_Init+0x2f0>)
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	4923      	ldr	r1, [pc, #140]	; (80020a0 <HAL_GPIO_Init+0x2f0>)
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	604b      	str	r3, [r1, #4]
 8002018:	e006      	b.n	8002028 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800201a:	4b21      	ldr	r3, [pc, #132]	; (80020a0 <HAL_GPIO_Init+0x2f0>)
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	43db      	mvns	r3, r3
 8002022:	491f      	ldr	r1, [pc, #124]	; (80020a0 <HAL_GPIO_Init+0x2f0>)
 8002024:	4013      	ands	r3, r2
 8002026:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d006      	beq.n	8002042 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002034:	4b1a      	ldr	r3, [pc, #104]	; (80020a0 <HAL_GPIO_Init+0x2f0>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	4919      	ldr	r1, [pc, #100]	; (80020a0 <HAL_GPIO_Init+0x2f0>)
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	4313      	orrs	r3, r2
 800203e:	600b      	str	r3, [r1, #0]
 8002040:	e006      	b.n	8002050 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002042:	4b17      	ldr	r3, [pc, #92]	; (80020a0 <HAL_GPIO_Init+0x2f0>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	43db      	mvns	r3, r3
 800204a:	4915      	ldr	r1, [pc, #84]	; (80020a0 <HAL_GPIO_Init+0x2f0>)
 800204c:	4013      	ands	r3, r2
 800204e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	3301      	adds	r3, #1
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	fa22 f303 	lsr.w	r3, r2, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	f47f aeaf 	bne.w	8001dc4 <HAL_GPIO_Init+0x14>
  }
}
 8002066:	bf00      	nop
 8002068:	bf00      	nop
 800206a:	372c      	adds	r7, #44	; 0x2c
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	10320000 	.word	0x10320000
 8002078:	10310000 	.word	0x10310000
 800207c:	10220000 	.word	0x10220000
 8002080:	10210000 	.word	0x10210000
 8002084:	10120000 	.word	0x10120000
 8002088:	10110000 	.word	0x10110000
 800208c:	40021000 	.word	0x40021000
 8002090:	40010000 	.word	0x40010000
 8002094:	40010800 	.word	0x40010800
 8002098:	40010c00 	.word	0x40010c00
 800209c:	40011000 	.word	0x40011000
 80020a0:	40010400 	.word	0x40010400

080020a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	887b      	ldrh	r3, [r7, #2]
 80020b6:	4013      	ands	r3, r2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d002      	beq.n	80020c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020bc:	2301      	movs	r3, #1
 80020be:	73fb      	strb	r3, [r7, #15]
 80020c0:	e001      	b.n	80020c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020c2:	2300      	movs	r3, #0
 80020c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr

080020d2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	460b      	mov	r3, r1
 80020dc:	807b      	strh	r3, [r7, #2]
 80020de:	4613      	mov	r3, r2
 80020e0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020e2:	787b      	ldrb	r3, [r7, #1]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020e8:	887a      	ldrh	r2, [r7, #2]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020ee:	e003      	b.n	80020f8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020f0:	887b      	ldrh	r3, [r7, #2]
 80020f2:	041a      	lsls	r2, r3, #16
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	611a      	str	r2, [r3, #16]
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr

08002102 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002102:	b480      	push	{r7}
 8002104:	b085      	sub	sp, #20
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	460b      	mov	r3, r1
 800210c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002114:	887a      	ldrh	r2, [r7, #2]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	4013      	ands	r3, r2
 800211a:	041a      	lsls	r2, r3, #16
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	43d9      	mvns	r1, r3
 8002120:	887b      	ldrh	r3, [r7, #2]
 8002122:	400b      	ands	r3, r1
 8002124:	431a      	orrs	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	611a      	str	r2, [r3, #16]
}
 800212a:	bf00      	nop
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr

08002134 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e26c      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	f000 8087 	beq.w	8002262 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002154:	4b92      	ldr	r3, [pc, #584]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f003 030c 	and.w	r3, r3, #12
 800215c:	2b04      	cmp	r3, #4
 800215e:	d00c      	beq.n	800217a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002160:	4b8f      	ldr	r3, [pc, #572]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 030c 	and.w	r3, r3, #12
 8002168:	2b08      	cmp	r3, #8
 800216a:	d112      	bne.n	8002192 <HAL_RCC_OscConfig+0x5e>
 800216c:	4b8c      	ldr	r3, [pc, #560]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002178:	d10b      	bne.n	8002192 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800217a:	4b89      	ldr	r3, [pc, #548]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d06c      	beq.n	8002260 <HAL_RCC_OscConfig+0x12c>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d168      	bne.n	8002260 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e246      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800219a:	d106      	bne.n	80021aa <HAL_RCC_OscConfig+0x76>
 800219c:	4b80      	ldr	r3, [pc, #512]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a7f      	ldr	r2, [pc, #508]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a6:	6013      	str	r3, [r2, #0]
 80021a8:	e02e      	b.n	8002208 <HAL_RCC_OscConfig+0xd4>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10c      	bne.n	80021cc <HAL_RCC_OscConfig+0x98>
 80021b2:	4b7b      	ldr	r3, [pc, #492]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a7a      	ldr	r2, [pc, #488]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021bc:	6013      	str	r3, [r2, #0]
 80021be:	4b78      	ldr	r3, [pc, #480]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a77      	ldr	r2, [pc, #476]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	e01d      	b.n	8002208 <HAL_RCC_OscConfig+0xd4>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021d4:	d10c      	bne.n	80021f0 <HAL_RCC_OscConfig+0xbc>
 80021d6:	4b72      	ldr	r3, [pc, #456]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a71      	ldr	r2, [pc, #452]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	4b6f      	ldr	r3, [pc, #444]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a6e      	ldr	r2, [pc, #440]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	e00b      	b.n	8002208 <HAL_RCC_OscConfig+0xd4>
 80021f0:	4b6b      	ldr	r3, [pc, #428]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a6a      	ldr	r2, [pc, #424]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021fa:	6013      	str	r3, [r2, #0]
 80021fc:	4b68      	ldr	r3, [pc, #416]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a67      	ldr	r2, [pc, #412]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 8002202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002206:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d013      	beq.n	8002238 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002210:	f7ff fcb6 	bl	8001b80 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002218:	f7ff fcb2 	bl	8001b80 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b64      	cmp	r3, #100	; 0x64
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e1fa      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222a:	4b5d      	ldr	r3, [pc, #372]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f0      	beq.n	8002218 <HAL_RCC_OscConfig+0xe4>
 8002236:	e014      	b.n	8002262 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002238:	f7ff fca2 	bl	8001b80 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002240:	f7ff fc9e 	bl	8001b80 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b64      	cmp	r3, #100	; 0x64
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e1e6      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002252:	4b53      	ldr	r3, [pc, #332]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0x10c>
 800225e:	e000      	b.n	8002262 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d063      	beq.n	8002336 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800226e:	4b4c      	ldr	r3, [pc, #304]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f003 030c 	and.w	r3, r3, #12
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00b      	beq.n	8002292 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800227a:	4b49      	ldr	r3, [pc, #292]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f003 030c 	and.w	r3, r3, #12
 8002282:	2b08      	cmp	r3, #8
 8002284:	d11c      	bne.n	80022c0 <HAL_RCC_OscConfig+0x18c>
 8002286:	4b46      	ldr	r3, [pc, #280]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d116      	bne.n	80022c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002292:	4b43      	ldr	r3, [pc, #268]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d005      	beq.n	80022aa <HAL_RCC_OscConfig+0x176>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d001      	beq.n	80022aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e1ba      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022aa:	4b3d      	ldr	r3, [pc, #244]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	4939      	ldr	r1, [pc, #228]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022be:	e03a      	b.n	8002336 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d020      	beq.n	800230a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022c8:	4b36      	ldr	r3, [pc, #216]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 80022ca:	2201      	movs	r2, #1
 80022cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ce:	f7ff fc57 	bl	8001b80 <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d6:	f7ff fc53 	bl	8001b80 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e19b      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e8:	4b2d      	ldr	r3, [pc, #180]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0f0      	beq.n	80022d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f4:	4b2a      	ldr	r3, [pc, #168]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	4927      	ldr	r1, [pc, #156]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 8002304:	4313      	orrs	r3, r2
 8002306:	600b      	str	r3, [r1, #0]
 8002308:	e015      	b.n	8002336 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800230a:	4b26      	ldr	r3, [pc, #152]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002310:	f7ff fc36 	bl	8001b80 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002318:	f7ff fc32 	bl	8001b80 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e17a      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800232a:	4b1d      	ldr	r3, [pc, #116]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1f0      	bne.n	8002318 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b00      	cmp	r3, #0
 8002340:	d03a      	beq.n	80023b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d019      	beq.n	800237e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800234a:	4b17      	ldr	r3, [pc, #92]	; (80023a8 <HAL_RCC_OscConfig+0x274>)
 800234c:	2201      	movs	r2, #1
 800234e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002350:	f7ff fc16 	bl	8001b80 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002358:	f7ff fc12 	bl	8001b80 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e15a      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800236a:	4b0d      	ldr	r3, [pc, #52]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 800236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f0      	beq.n	8002358 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002376:	2001      	movs	r0, #1
 8002378:	f000 fa9a 	bl	80028b0 <RCC_Delay>
 800237c:	e01c      	b.n	80023b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800237e:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <HAL_RCC_OscConfig+0x274>)
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002384:	f7ff fbfc 	bl	8001b80 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800238a:	e00f      	b.n	80023ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800238c:	f7ff fbf8 	bl	8001b80 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d908      	bls.n	80023ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e140      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
 800239e:	bf00      	nop
 80023a0:	40021000 	.word	0x40021000
 80023a4:	42420000 	.word	0x42420000
 80023a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ac:	4b9e      	ldr	r3, [pc, #632]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 80023ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1e9      	bne.n	800238c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 80a6 	beq.w	8002512 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023c6:	2300      	movs	r3, #0
 80023c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ca:	4b97      	ldr	r3, [pc, #604]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10d      	bne.n	80023f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023d6:	4b94      	ldr	r3, [pc, #592]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	4a93      	ldr	r2, [pc, #588]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 80023dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e0:	61d3      	str	r3, [r2, #28]
 80023e2:	4b91      	ldr	r3, [pc, #580]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ea:	60bb      	str	r3, [r7, #8]
 80023ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ee:	2301      	movs	r3, #1
 80023f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f2:	4b8e      	ldr	r3, [pc, #568]	; (800262c <HAL_RCC_OscConfig+0x4f8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d118      	bne.n	8002430 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023fe:	4b8b      	ldr	r3, [pc, #556]	; (800262c <HAL_RCC_OscConfig+0x4f8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a8a      	ldr	r2, [pc, #552]	; (800262c <HAL_RCC_OscConfig+0x4f8>)
 8002404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002408:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800240a:	f7ff fbb9 	bl	8001b80 <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002412:	f7ff fbb5 	bl	8001b80 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b64      	cmp	r3, #100	; 0x64
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e0fd      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002424:	4b81      	ldr	r3, [pc, #516]	; (800262c <HAL_RCC_OscConfig+0x4f8>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0f0      	beq.n	8002412 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d106      	bne.n	8002446 <HAL_RCC_OscConfig+0x312>
 8002438:	4b7b      	ldr	r3, [pc, #492]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	4a7a      	ldr	r2, [pc, #488]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 800243e:	f043 0301 	orr.w	r3, r3, #1
 8002442:	6213      	str	r3, [r2, #32]
 8002444:	e02d      	b.n	80024a2 <HAL_RCC_OscConfig+0x36e>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10c      	bne.n	8002468 <HAL_RCC_OscConfig+0x334>
 800244e:	4b76      	ldr	r3, [pc, #472]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	4a75      	ldr	r2, [pc, #468]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002454:	f023 0301 	bic.w	r3, r3, #1
 8002458:	6213      	str	r3, [r2, #32]
 800245a:	4b73      	ldr	r3, [pc, #460]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	4a72      	ldr	r2, [pc, #456]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002460:	f023 0304 	bic.w	r3, r3, #4
 8002464:	6213      	str	r3, [r2, #32]
 8002466:	e01c      	b.n	80024a2 <HAL_RCC_OscConfig+0x36e>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	2b05      	cmp	r3, #5
 800246e:	d10c      	bne.n	800248a <HAL_RCC_OscConfig+0x356>
 8002470:	4b6d      	ldr	r3, [pc, #436]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	4a6c      	ldr	r2, [pc, #432]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002476:	f043 0304 	orr.w	r3, r3, #4
 800247a:	6213      	str	r3, [r2, #32]
 800247c:	4b6a      	ldr	r3, [pc, #424]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	4a69      	ldr	r2, [pc, #420]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	6213      	str	r3, [r2, #32]
 8002488:	e00b      	b.n	80024a2 <HAL_RCC_OscConfig+0x36e>
 800248a:	4b67      	ldr	r3, [pc, #412]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	4a66      	ldr	r2, [pc, #408]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002490:	f023 0301 	bic.w	r3, r3, #1
 8002494:	6213      	str	r3, [r2, #32]
 8002496:	4b64      	ldr	r3, [pc, #400]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	4a63      	ldr	r2, [pc, #396]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 800249c:	f023 0304 	bic.w	r3, r3, #4
 80024a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d015      	beq.n	80024d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024aa:	f7ff fb69 	bl	8001b80 <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b0:	e00a      	b.n	80024c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b2:	f7ff fb65 	bl	8001b80 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e0ab      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c8:	4b57      	ldr	r3, [pc, #348]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0ee      	beq.n	80024b2 <HAL_RCC_OscConfig+0x37e>
 80024d4:	e014      	b.n	8002500 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d6:	f7ff fb53 	bl	8001b80 <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024dc:	e00a      	b.n	80024f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024de:	f7ff fb4f 	bl	8001b80 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e095      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f4:	4b4c      	ldr	r3, [pc, #304]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1ee      	bne.n	80024de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002500:	7dfb      	ldrb	r3, [r7, #23]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d105      	bne.n	8002512 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002506:	4b48      	ldr	r3, [pc, #288]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	4a47      	ldr	r2, [pc, #284]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 800250c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002510:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 8081 	beq.w	800261e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800251c:	4b42      	ldr	r3, [pc, #264]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 030c 	and.w	r3, r3, #12
 8002524:	2b08      	cmp	r3, #8
 8002526:	d061      	beq.n	80025ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	2b02      	cmp	r3, #2
 800252e:	d146      	bne.n	80025be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002530:	4b3f      	ldr	r3, [pc, #252]	; (8002630 <HAL_RCC_OscConfig+0x4fc>)
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002536:	f7ff fb23 	bl	8001b80 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253e:	f7ff fb1f 	bl	8001b80 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e067      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002550:	4b35      	ldr	r3, [pc, #212]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1f0      	bne.n	800253e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002564:	d108      	bne.n	8002578 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002566:	4b30      	ldr	r3, [pc, #192]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	492d      	ldr	r1, [pc, #180]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002574:	4313      	orrs	r3, r2
 8002576:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002578:	4b2b      	ldr	r3, [pc, #172]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a19      	ldr	r1, [r3, #32]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	430b      	orrs	r3, r1
 800258a:	4927      	ldr	r1, [pc, #156]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 800258c:	4313      	orrs	r3, r2
 800258e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002590:	4b27      	ldr	r3, [pc, #156]	; (8002630 <HAL_RCC_OscConfig+0x4fc>)
 8002592:	2201      	movs	r2, #1
 8002594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002596:	f7ff faf3 	bl	8001b80 <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800259e:	f7ff faef 	bl	8001b80 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e037      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025b0:	4b1d      	ldr	r3, [pc, #116]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0f0      	beq.n	800259e <HAL_RCC_OscConfig+0x46a>
 80025bc:	e02f      	b.n	800261e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025be:	4b1c      	ldr	r3, [pc, #112]	; (8002630 <HAL_RCC_OscConfig+0x4fc>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c4:	f7ff fadc 	bl	8001b80 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025cc:	f7ff fad8 	bl	8001b80 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e020      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025de:	4b12      	ldr	r3, [pc, #72]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1f0      	bne.n	80025cc <HAL_RCC_OscConfig+0x498>
 80025ea:	e018      	b.n	800261e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d101      	bne.n	80025f8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e013      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025f8:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	429a      	cmp	r2, r3
 800260a:	d106      	bne.n	800261a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002616:	429a      	cmp	r2, r3
 8002618:	d001      	beq.n	800261e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40021000 	.word	0x40021000
 800262c:	40007000 	.word	0x40007000
 8002630:	42420060 	.word	0x42420060

08002634 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e0d0      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002648:	4b6a      	ldr	r3, [pc, #424]	; (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	d910      	bls.n	8002678 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002656:	4b67      	ldr	r3, [pc, #412]	; (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f023 0207 	bic.w	r2, r3, #7
 800265e:	4965      	ldr	r1, [pc, #404]	; (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	4313      	orrs	r3, r2
 8002664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002666:	4b63      	ldr	r3, [pc, #396]	; (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	429a      	cmp	r2, r3
 8002672:	d001      	beq.n	8002678 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e0b8      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d020      	beq.n	80026c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	2b00      	cmp	r3, #0
 800268e:	d005      	beq.n	800269c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002690:	4b59      	ldr	r3, [pc, #356]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	4a58      	ldr	r2, [pc, #352]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002696:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800269a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0308 	and.w	r3, r3, #8
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d005      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026a8:	4b53      	ldr	r3, [pc, #332]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	4a52      	ldr	r2, [pc, #328]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026b4:	4b50      	ldr	r3, [pc, #320]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	494d      	ldr	r1, [pc, #308]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d040      	beq.n	8002754 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d107      	bne.n	80026ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026da:	4b47      	ldr	r3, [pc, #284]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d115      	bne.n	8002712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e07f      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d107      	bne.n	8002702 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f2:	4b41      	ldr	r3, [pc, #260]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d109      	bne.n	8002712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e073      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002702:	4b3d      	ldr	r3, [pc, #244]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e06b      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002712:	4b39      	ldr	r3, [pc, #228]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f023 0203 	bic.w	r2, r3, #3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	4936      	ldr	r1, [pc, #216]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002720:	4313      	orrs	r3, r2
 8002722:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002724:	f7ff fa2c 	bl	8001b80 <HAL_GetTick>
 8002728:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272a:	e00a      	b.n	8002742 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800272c:	f7ff fa28 	bl	8001b80 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	f241 3288 	movw	r2, #5000	; 0x1388
 800273a:	4293      	cmp	r3, r2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e053      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002742:	4b2d      	ldr	r3, [pc, #180]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f003 020c 	and.w	r2, r3, #12
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	429a      	cmp	r2, r3
 8002752:	d1eb      	bne.n	800272c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002754:	4b27      	ldr	r3, [pc, #156]	; (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	429a      	cmp	r2, r3
 8002760:	d210      	bcs.n	8002784 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002762:	4b24      	ldr	r3, [pc, #144]	; (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f023 0207 	bic.w	r2, r3, #7
 800276a:	4922      	ldr	r1, [pc, #136]	; (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	4313      	orrs	r3, r2
 8002770:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002772:	4b20      	ldr	r3, [pc, #128]	; (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d001      	beq.n	8002784 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e032      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	2b00      	cmp	r3, #0
 800278e:	d008      	beq.n	80027a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002790:	4b19      	ldr	r3, [pc, #100]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	4916      	ldr	r1, [pc, #88]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d009      	beq.n	80027c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027ae:	4b12      	ldr	r3, [pc, #72]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	490e      	ldr	r1, [pc, #56]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027c2:	f000 f821 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 80027c6:	4602      	mov	r2, r0
 80027c8:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	091b      	lsrs	r3, r3, #4
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	490a      	ldr	r1, [pc, #40]	; (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 80027d4:	5ccb      	ldrb	r3, [r1, r3]
 80027d6:	fa22 f303 	lsr.w	r3, r2, r3
 80027da:	4a09      	ldr	r2, [pc, #36]	; (8002800 <HAL_RCC_ClockConfig+0x1cc>)
 80027dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027de:	4b09      	ldr	r3, [pc, #36]	; (8002804 <HAL_RCC_ClockConfig+0x1d0>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff f98a 	bl	8001afc <HAL_InitTick>

  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40022000 	.word	0x40022000
 80027f8:	40021000 	.word	0x40021000
 80027fc:	08003114 	.word	0x08003114
 8002800:	20000048 	.word	0x20000048
 8002804:	2000004c 	.word	0x2000004c

08002808 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002808:	b480      	push	{r7}
 800280a:	b087      	sub	sp, #28
 800280c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800280e:	2300      	movs	r3, #0
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	2300      	movs	r3, #0
 8002814:	60bb      	str	r3, [r7, #8]
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	2300      	movs	r3, #0
 800281c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800281e:	2300      	movs	r3, #0
 8002820:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002822:	4b1e      	ldr	r3, [pc, #120]	; (800289c <HAL_RCC_GetSysClockFreq+0x94>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f003 030c 	and.w	r3, r3, #12
 800282e:	2b04      	cmp	r3, #4
 8002830:	d002      	beq.n	8002838 <HAL_RCC_GetSysClockFreq+0x30>
 8002832:	2b08      	cmp	r3, #8
 8002834:	d003      	beq.n	800283e <HAL_RCC_GetSysClockFreq+0x36>
 8002836:	e027      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002838:	4b19      	ldr	r3, [pc, #100]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800283a:	613b      	str	r3, [r7, #16]
      break;
 800283c:	e027      	b.n	800288e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	0c9b      	lsrs	r3, r3, #18
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	4a17      	ldr	r2, [pc, #92]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002848:	5cd3      	ldrb	r3, [r2, r3]
 800284a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d010      	beq.n	8002878 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002856:	4b11      	ldr	r3, [pc, #68]	; (800289c <HAL_RCC_GetSysClockFreq+0x94>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	0c5b      	lsrs	r3, r3, #17
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	4a11      	ldr	r2, [pc, #68]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002862:	5cd3      	ldrb	r3, [r2, r3]
 8002864:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a0d      	ldr	r2, [pc, #52]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800286a:	fb02 f203 	mul.w	r2, r2, r3
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	fbb2 f3f3 	udiv	r3, r2, r3
 8002874:	617b      	str	r3, [r7, #20]
 8002876:	e004      	b.n	8002882 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a0c      	ldr	r2, [pc, #48]	; (80028ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800287c:	fb02 f303 	mul.w	r3, r2, r3
 8002880:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	613b      	str	r3, [r7, #16]
      break;
 8002886:	e002      	b.n	800288e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002888:	4b05      	ldr	r3, [pc, #20]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800288a:	613b      	str	r3, [r7, #16]
      break;
 800288c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800288e:	693b      	ldr	r3, [r7, #16]
}
 8002890:	4618      	mov	r0, r3
 8002892:	371c      	adds	r7, #28
 8002894:	46bd      	mov	sp, r7
 8002896:	bc80      	pop	{r7}
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	40021000 	.word	0x40021000
 80028a0:	007a1200 	.word	0x007a1200
 80028a4:	08003124 	.word	0x08003124
 80028a8:	08003134 	.word	0x08003134
 80028ac:	003d0900 	.word	0x003d0900

080028b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028b8:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <RCC_Delay+0x34>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a0a      	ldr	r2, [pc, #40]	; (80028e8 <RCC_Delay+0x38>)
 80028be:	fba2 2303 	umull	r2, r3, r2, r3
 80028c2:	0a5b      	lsrs	r3, r3, #9
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	fb02 f303 	mul.w	r3, r2, r3
 80028ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028cc:	bf00      	nop
  }
  while (Delay --);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	1e5a      	subs	r2, r3, #1
 80028d2:	60fa      	str	r2, [r7, #12]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1f9      	bne.n	80028cc <RCC_Delay+0x1c>
}
 80028d8:	bf00      	nop
 80028da:	bf00      	nop
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr
 80028e4:	20000048 	.word	0x20000048
 80028e8:	10624dd3 	.word	0x10624dd3

080028ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e041      	b.n	8002982 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d106      	bne.n	8002918 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7ff f85a 	bl	80019cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2202      	movs	r2, #2
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3304      	adds	r3, #4
 8002928:	4619      	mov	r1, r3
 800292a:	4610      	mov	r0, r2
 800292c:	f000 fa56 	bl	8002ddc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
	...

0800298c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b01      	cmp	r3, #1
 800299e:	d001      	beq.n	80029a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e035      	b.n	8002a10 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2202      	movs	r2, #2
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0201 	orr.w	r2, r2, #1
 80029ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a16      	ldr	r2, [pc, #88]	; (8002a1c <HAL_TIM_Base_Start_IT+0x90>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d009      	beq.n	80029da <HAL_TIM_Base_Start_IT+0x4e>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ce:	d004      	beq.n	80029da <HAL_TIM_Base_Start_IT+0x4e>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a12      	ldr	r2, [pc, #72]	; (8002a20 <HAL_TIM_Base_Start_IT+0x94>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d111      	bne.n	80029fe <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2b06      	cmp	r3, #6
 80029ea:	d010      	beq.n	8002a0e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0201 	orr.w	r2, r2, #1
 80029fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029fc:	e007      	b.n	8002a0e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f042 0201 	orr.w	r2, r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	40012c00 	.word	0x40012c00
 8002a20:	40000400 	.word	0x40000400

08002a24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d020      	beq.n	8002a88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d01b      	beq.n	8002a88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f06f 0202 	mvn.w	r2, #2
 8002a58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f998 	bl	8002da4 <HAL_TIM_IC_CaptureCallback>
 8002a74:	e005      	b.n	8002a82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f98b 	bl	8002d92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 f99a 	bl	8002db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	f003 0304 	and.w	r3, r3, #4
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d020      	beq.n	8002ad4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d01b      	beq.n	8002ad4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f06f 0204 	mvn.w	r2, #4
 8002aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f972 	bl	8002da4 <HAL_TIM_IC_CaptureCallback>
 8002ac0:	e005      	b.n	8002ace <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f965 	bl	8002d92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f974 	bl	8002db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	f003 0308 	and.w	r3, r3, #8
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d020      	beq.n	8002b20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f003 0308 	and.w	r3, r3, #8
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d01b      	beq.n	8002b20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f06f 0208 	mvn.w	r2, #8
 8002af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2204      	movs	r2, #4
 8002af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f94c 	bl	8002da4 <HAL_TIM_IC_CaptureCallback>
 8002b0c:	e005      	b.n	8002b1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f93f 	bl	8002d92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f94e 	bl	8002db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	f003 0310 	and.w	r3, r3, #16
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d020      	beq.n	8002b6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f003 0310 	and.w	r3, r3, #16
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d01b      	beq.n	8002b6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f06f 0210 	mvn.w	r2, #16
 8002b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2208      	movs	r2, #8
 8002b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f926 	bl	8002da4 <HAL_TIM_IC_CaptureCallback>
 8002b58:	e005      	b.n	8002b66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f919 	bl	8002d92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 f928 	bl	8002db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00c      	beq.n	8002b90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d007      	beq.n	8002b90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f06f 0201 	mvn.w	r2, #1
 8002b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7fe fe0c 	bl	80017a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00c      	beq.n	8002bb4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d007      	beq.n	8002bb4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 fa6f 	bl	8003092 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00c      	beq.n	8002bd8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d007      	beq.n	8002bd8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f8f8 	bl	8002dc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	f003 0320 	and.w	r3, r3, #32
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00c      	beq.n	8002bfc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f003 0320 	and.w	r3, r3, #32
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d007      	beq.n	8002bfc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f06f 0220 	mvn.w	r2, #32
 8002bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 fa42 	bl	8003080 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bfc:	bf00      	nop
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d101      	bne.n	8002c20 <HAL_TIM_ConfigClockSource+0x1c>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	e0b4      	b.n	8002d8a <HAL_TIM_ConfigClockSource+0x186>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68ba      	ldr	r2, [r7, #8]
 8002c4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c58:	d03e      	beq.n	8002cd8 <HAL_TIM_ConfigClockSource+0xd4>
 8002c5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c5e:	f200 8087 	bhi.w	8002d70 <HAL_TIM_ConfigClockSource+0x16c>
 8002c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c66:	f000 8086 	beq.w	8002d76 <HAL_TIM_ConfigClockSource+0x172>
 8002c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c6e:	d87f      	bhi.n	8002d70 <HAL_TIM_ConfigClockSource+0x16c>
 8002c70:	2b70      	cmp	r3, #112	; 0x70
 8002c72:	d01a      	beq.n	8002caa <HAL_TIM_ConfigClockSource+0xa6>
 8002c74:	2b70      	cmp	r3, #112	; 0x70
 8002c76:	d87b      	bhi.n	8002d70 <HAL_TIM_ConfigClockSource+0x16c>
 8002c78:	2b60      	cmp	r3, #96	; 0x60
 8002c7a:	d050      	beq.n	8002d1e <HAL_TIM_ConfigClockSource+0x11a>
 8002c7c:	2b60      	cmp	r3, #96	; 0x60
 8002c7e:	d877      	bhi.n	8002d70 <HAL_TIM_ConfigClockSource+0x16c>
 8002c80:	2b50      	cmp	r3, #80	; 0x50
 8002c82:	d03c      	beq.n	8002cfe <HAL_TIM_ConfigClockSource+0xfa>
 8002c84:	2b50      	cmp	r3, #80	; 0x50
 8002c86:	d873      	bhi.n	8002d70 <HAL_TIM_ConfigClockSource+0x16c>
 8002c88:	2b40      	cmp	r3, #64	; 0x40
 8002c8a:	d058      	beq.n	8002d3e <HAL_TIM_ConfigClockSource+0x13a>
 8002c8c:	2b40      	cmp	r3, #64	; 0x40
 8002c8e:	d86f      	bhi.n	8002d70 <HAL_TIM_ConfigClockSource+0x16c>
 8002c90:	2b30      	cmp	r3, #48	; 0x30
 8002c92:	d064      	beq.n	8002d5e <HAL_TIM_ConfigClockSource+0x15a>
 8002c94:	2b30      	cmp	r3, #48	; 0x30
 8002c96:	d86b      	bhi.n	8002d70 <HAL_TIM_ConfigClockSource+0x16c>
 8002c98:	2b20      	cmp	r3, #32
 8002c9a:	d060      	beq.n	8002d5e <HAL_TIM_ConfigClockSource+0x15a>
 8002c9c:	2b20      	cmp	r3, #32
 8002c9e:	d867      	bhi.n	8002d70 <HAL_TIM_ConfigClockSource+0x16c>
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d05c      	beq.n	8002d5e <HAL_TIM_ConfigClockSource+0x15a>
 8002ca4:	2b10      	cmp	r3, #16
 8002ca6:	d05a      	beq.n	8002d5e <HAL_TIM_ConfigClockSource+0x15a>
 8002ca8:	e062      	b.n	8002d70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6818      	ldr	r0, [r3, #0]
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	6899      	ldr	r1, [r3, #8]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	f000 f96a 	bl	8002f92 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ccc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	609a      	str	r2, [r3, #8]
      break;
 8002cd6:	e04f      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6818      	ldr	r0, [r3, #0]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	6899      	ldr	r1, [r3, #8]
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f000 f953 	bl	8002f92 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cfa:	609a      	str	r2, [r3, #8]
      break;
 8002cfc:	e03c      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6818      	ldr	r0, [r3, #0]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	6859      	ldr	r1, [r3, #4]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	f000 f8ca 	bl	8002ea4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2150      	movs	r1, #80	; 0x50
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 f921 	bl	8002f5e <TIM_ITRx_SetConfig>
      break;
 8002d1c:	e02c      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6818      	ldr	r0, [r3, #0]
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	6859      	ldr	r1, [r3, #4]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	f000 f8e8 	bl	8002f00 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2160      	movs	r1, #96	; 0x60
 8002d36:	4618      	mov	r0, r3
 8002d38:	f000 f911 	bl	8002f5e <TIM_ITRx_SetConfig>
      break;
 8002d3c:	e01c      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6818      	ldr	r0, [r3, #0]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	6859      	ldr	r1, [r3, #4]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	f000 f8aa 	bl	8002ea4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2140      	movs	r1, #64	; 0x40
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 f901 	bl	8002f5e <TIM_ITRx_SetConfig>
      break;
 8002d5c:	e00c      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4619      	mov	r1, r3
 8002d68:	4610      	mov	r0, r2
 8002d6a:	f000 f8f8 	bl	8002f5e <TIM_ITRx_SetConfig>
      break;
 8002d6e:	e003      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	73fb      	strb	r3, [r7, #15]
      break;
 8002d74:	e000      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr

08002da4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc80      	pop	{r7}
 8002db4:	4770      	bx	lr

08002db6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bc80      	pop	{r7}
 8002dd8:	4770      	bx	lr
	...

08002ddc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a2b      	ldr	r2, [pc, #172]	; (8002e9c <TIM_Base_SetConfig+0xc0>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d007      	beq.n	8002e04 <TIM_Base_SetConfig+0x28>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dfa:	d003      	beq.n	8002e04 <TIM_Base_SetConfig+0x28>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a28      	ldr	r2, [pc, #160]	; (8002ea0 <TIM_Base_SetConfig+0xc4>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d108      	bne.n	8002e16 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a20      	ldr	r2, [pc, #128]	; (8002e9c <TIM_Base_SetConfig+0xc0>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d007      	beq.n	8002e2e <TIM_Base_SetConfig+0x52>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e24:	d003      	beq.n	8002e2e <TIM_Base_SetConfig+0x52>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a1d      	ldr	r2, [pc, #116]	; (8002ea0 <TIM_Base_SetConfig+0xc4>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d108      	bne.n	8002e40 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a0d      	ldr	r2, [pc, #52]	; (8002e9c <TIM_Base_SetConfig+0xc0>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d103      	bne.n	8002e74 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	691a      	ldr	r2, [r3, #16]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d005      	beq.n	8002e92 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	f023 0201 	bic.w	r2, r3, #1
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	611a      	str	r2, [r3, #16]
  }
}
 8002e92:	bf00      	nop
 8002e94:	3714      	adds	r7, #20
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr
 8002e9c:	40012c00 	.word	0x40012c00
 8002ea0:	40000400 	.word	0x40000400

08002ea4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b087      	sub	sp, #28
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	f023 0201 	bic.w	r2, r3, #1
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f023 030a 	bic.w	r3, r3, #10
 8002ee0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	621a      	str	r2, [r3, #32]
}
 8002ef6:	bf00      	nop
 8002ef8:	371c      	adds	r7, #28
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr

08002f00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b087      	sub	sp, #28
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	f023 0210 	bic.w	r2, r3, #16
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	031b      	lsls	r3, r3, #12
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f3c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	011b      	lsls	r3, r3, #4
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	621a      	str	r2, [r3, #32]
}
 8002f54:	bf00      	nop
 8002f56:	371c      	adds	r7, #28
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bc80      	pop	{r7}
 8002f5c:	4770      	bx	lr

08002f5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b085      	sub	sp, #20
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
 8002f66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	f043 0307 	orr.w	r3, r3, #7
 8002f80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	609a      	str	r2, [r3, #8]
}
 8002f88:	bf00      	nop
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr

08002f92 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b087      	sub	sp, #28
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	60f8      	str	r0, [r7, #12]
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	607a      	str	r2, [r7, #4]
 8002f9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	021a      	lsls	r2, r3, #8
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	609a      	str	r2, [r3, #8]
}
 8002fc6:	bf00      	nop
 8002fc8:	371c      	adds	r7, #28
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr

08002fd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d101      	bne.n	8002fe8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	e041      	b.n	800306c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800300e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	4313      	orrs	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a14      	ldr	r2, [pc, #80]	; (8003078 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d009      	beq.n	8003040 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003034:	d004      	beq.n	8003040 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a10      	ldr	r2, [pc, #64]	; (800307c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d10c      	bne.n	800305a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003046:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	4313      	orrs	r3, r2
 8003050:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	bc80      	pop	{r7}
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	40012c00 	.word	0x40012c00
 800307c:	40000400 	.word	0x40000400

08003080 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	bc80      	pop	{r7}
 8003090:	4770      	bx	lr

08003092 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003092:	b480      	push	{r7}
 8003094:	b083      	sub	sp, #12
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc80      	pop	{r7}
 80030a2:	4770      	bx	lr

080030a4 <__libc_init_array>:
 80030a4:	b570      	push	{r4, r5, r6, lr}
 80030a6:	2600      	movs	r6, #0
 80030a8:	4d0c      	ldr	r5, [pc, #48]	; (80030dc <__libc_init_array+0x38>)
 80030aa:	4c0d      	ldr	r4, [pc, #52]	; (80030e0 <__libc_init_array+0x3c>)
 80030ac:	1b64      	subs	r4, r4, r5
 80030ae:	10a4      	asrs	r4, r4, #2
 80030b0:	42a6      	cmp	r6, r4
 80030b2:	d109      	bne.n	80030c8 <__libc_init_array+0x24>
 80030b4:	f000 f822 	bl	80030fc <_init>
 80030b8:	2600      	movs	r6, #0
 80030ba:	4d0a      	ldr	r5, [pc, #40]	; (80030e4 <__libc_init_array+0x40>)
 80030bc:	4c0a      	ldr	r4, [pc, #40]	; (80030e8 <__libc_init_array+0x44>)
 80030be:	1b64      	subs	r4, r4, r5
 80030c0:	10a4      	asrs	r4, r4, #2
 80030c2:	42a6      	cmp	r6, r4
 80030c4:	d105      	bne.n	80030d2 <__libc_init_array+0x2e>
 80030c6:	bd70      	pop	{r4, r5, r6, pc}
 80030c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80030cc:	4798      	blx	r3
 80030ce:	3601      	adds	r6, #1
 80030d0:	e7ee      	b.n	80030b0 <__libc_init_array+0xc>
 80030d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80030d6:	4798      	blx	r3
 80030d8:	3601      	adds	r6, #1
 80030da:	e7f2      	b.n	80030c2 <__libc_init_array+0x1e>
 80030dc:	08003138 	.word	0x08003138
 80030e0:	08003138 	.word	0x08003138
 80030e4:	08003138 	.word	0x08003138
 80030e8:	0800313c 	.word	0x0800313c

080030ec <memset>:
 80030ec:	4603      	mov	r3, r0
 80030ee:	4402      	add	r2, r0
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d100      	bne.n	80030f6 <memset+0xa>
 80030f4:	4770      	bx	lr
 80030f6:	f803 1b01 	strb.w	r1, [r3], #1
 80030fa:	e7f9      	b.n	80030f0 <memset+0x4>

080030fc <_init>:
 80030fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fe:	bf00      	nop
 8003100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003102:	bc08      	pop	{r3}
 8003104:	469e      	mov	lr, r3
 8003106:	4770      	bx	lr

08003108 <_fini>:
 8003108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800310a:	bf00      	nop
 800310c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800310e:	bc08      	pop	{r3}
 8003110:	469e      	mov	lr, r3
 8003112:	4770      	bx	lr
