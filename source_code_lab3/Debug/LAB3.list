
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080032c8  080032c8  000132c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032ec  080032ec  000200b8  2**0
                  CONTENTS
  4 .ARM          00000000  080032ec  080032ec  000200b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032ec  080032ec  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032ec  080032ec  000132ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032f0  080032f0  000132f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  080032f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  200000b8  080033ac  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  080033ac  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc8a  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002012  00000000  00000000  0002bd6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac8  00000000  00000000  0002dd80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b0  00000000  00000000  0002e848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ad5  00000000  00000000  0002f1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ccf4  00000000  00000000  00046ccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085e22  00000000  00000000  000539c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d97e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c3c  00000000  00000000  000d9838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b8 	.word	0x200000b8
 8000128:	00000000 	.word	0x00000000
 800012c:	080032b0 	.word	0x080032b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000bc 	.word	0x200000bc
 8000148:	080032b0 	.word	0x080032b0

0800014c <subKeyProcess>:
// after the button is pressed more than 1 second .
int counterForButtonPress1s [ BUTTONS_NUMBER ] = {100, 100, 100};
//int counterForButtonPress1s = 100;
//int TimeOutForKeyPress = 100;

void subKeyProcess(int i){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	button_flag[i] = 1;
 8000154:	4a04      	ldr	r2, [pc, #16]	; (8000168 <subKeyProcess+0x1c>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	2101      	movs	r1, #1
 800015a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800015e:	bf00      	nop
 8000160:	370c      	adds	r7, #12
 8000162:	46bd      	mov	sp, r7
 8000164:	bc80      	pop	{r7}
 8000166:	4770      	bx	lr
 8000168:	200000d4 	.word	0x200000d4

0800016c <getKeyInput>:

void getKeyInput () {
 800016c:	b580      	push	{r7, lr}
 800016e:	b082      	sub	sp, #8
 8000170:	af00      	add	r7, sp, #0
	for ( int i = 0; i < BUTTONS_NUMBER ; i++) {
 8000172:	2300      	movs	r3, #0
 8000174:	607b      	str	r3, [r7, #4]
 8000176:	e073      	b.n	8000260 <getKeyInput+0xf4>
		KeyReg2[i] = KeyReg1[i];
 8000178:	4a3d      	ldr	r2, [pc, #244]	; (8000270 <getKeyInput+0x104>)
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000180:	493c      	ldr	r1, [pc, #240]	; (8000274 <getKeyInput+0x108>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 8000188:	4a3b      	ldr	r2, [pc, #236]	; (8000278 <getKeyInput+0x10c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000190:	4937      	ldr	r1, [pc, #220]	; (8000270 <getKeyInput+0x104>)
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg0[0] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8000198:	2101      	movs	r1, #1
 800019a:	4838      	ldr	r0, [pc, #224]	; (800027c <getKeyInput+0x110>)
 800019c:	f001 ff82 	bl	80020a4 <HAL_GPIO_ReadPin>
 80001a0:	4603      	mov	r3, r0
 80001a2:	461a      	mov	r2, r3
 80001a4:	4b34      	ldr	r3, [pc, #208]	; (8000278 <getKeyInput+0x10c>)
 80001a6:	601a      	str	r2, [r3, #0]
		KeyReg0[1] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 80001a8:	2102      	movs	r1, #2
 80001aa:	4834      	ldr	r0, [pc, #208]	; (800027c <getKeyInput+0x110>)
 80001ac:	f001 ff7a 	bl	80020a4 <HAL_GPIO_ReadPin>
 80001b0:	4603      	mov	r3, r0
 80001b2:	461a      	mov	r2, r3
 80001b4:	4b30      	ldr	r3, [pc, #192]	; (8000278 <getKeyInput+0x10c>)
 80001b6:	605a      	str	r2, [r3, #4]
		KeyReg0[2] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 80001b8:	2104      	movs	r1, #4
 80001ba:	4830      	ldr	r0, [pc, #192]	; (800027c <getKeyInput+0x110>)
 80001bc:	f001 ff72 	bl	80020a4 <HAL_GPIO_ReadPin>
 80001c0:	4603      	mov	r3, r0
 80001c2:	461a      	mov	r2, r3
 80001c4:	4b2c      	ldr	r3, [pc, #176]	; (8000278 <getKeyInput+0x10c>)
 80001c6:	609a      	str	r2, [r3, #8]
		if( KeyReg1[i] == KeyReg0[i] && KeyReg1[i] == KeyReg2[i] ){
 80001c8:	4a29      	ldr	r2, [pc, #164]	; (8000270 <getKeyInput+0x104>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d0:	4929      	ldr	r1, [pc, #164]	; (8000278 <getKeyInput+0x10c>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001d8:	429a      	cmp	r2, r3
 80001da:	d13e      	bne.n	800025a <getKeyInput+0xee>
 80001dc:	4a24      	ldr	r2, [pc, #144]	; (8000270 <getKeyInput+0x104>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001e4:	4923      	ldr	r1, [pc, #140]	; (8000274 <getKeyInput+0x108>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001ec:	429a      	cmp	r2, r3
 80001ee:	d134      	bne.n	800025a <getKeyInput+0xee>
			if(KeyReg0[i] != KeyReg3[i]){
 80001f0:	4a21      	ldr	r2, [pc, #132]	; (8000278 <getKeyInput+0x10c>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f8:	4921      	ldr	r1, [pc, #132]	; (8000280 <getKeyInput+0x114>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000200:	429a      	cmp	r2, r3
 8000202:	d016      	beq.n	8000232 <getKeyInput+0xc6>
				KeyReg3[i] = KeyReg0[i];
 8000204:	4a1c      	ldr	r2, [pc, #112]	; (8000278 <getKeyInput+0x10c>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020c:	491c      	ldr	r1, [pc, #112]	; (8000280 <getKeyInput+0x114>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(KeyReg0[i] == PRESSED_STATE){
 8000214:	4a18      	ldr	r2, [pc, #96]	; (8000278 <getKeyInput+0x10c>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d11c      	bne.n	800025a <getKeyInput+0xee>
					//TODO
					subKeyProcess(i);
 8000220:	6878      	ldr	r0, [r7, #4]
 8000222:	f7ff ff93 	bl	800014c <subKeyProcess>
					counterForButtonPress1s[i] = 100;
 8000226:	4a17      	ldr	r2, [pc, #92]	; (8000284 <getKeyInput+0x118>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2164      	movs	r1, #100	; 0x64
 800022c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000230:	e013      	b.n	800025a <getKeyInput+0xee>
				}
			}
			else {
				counterForButtonPress1s[i]--;
 8000232:	4a14      	ldr	r2, [pc, #80]	; (8000284 <getKeyInput+0x118>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800023a:	1e5a      	subs	r2, r3, #1
 800023c:	4911      	ldr	r1, [pc, #68]	; (8000284 <getKeyInput+0x118>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(counterForButtonPress1s[i] <= 0){
 8000244:	4a0f      	ldr	r2, [pc, #60]	; (8000284 <getKeyInput+0x118>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800024c:	2b00      	cmp	r3, #0
 800024e:	dc04      	bgt.n	800025a <getKeyInput+0xee>
//					if(KeyReg0[i] == PRESSED_STATE){
//						//TODO
//						subKeyProcess(i);
//					}
//					counterForButtonPress1s[i] = 100;
					KeyReg3[i] = NORMAL_STATE;
 8000250:	4a0b      	ldr	r2, [pc, #44]	; (8000280 <getKeyInput+0x114>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	2101      	movs	r1, #1
 8000256:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for ( int i = 0; i < BUTTONS_NUMBER ; i++) {
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	3301      	adds	r3, #1
 800025e:	607b      	str	r3, [r7, #4]
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	2b02      	cmp	r3, #2
 8000264:	dd88      	ble.n	8000178 <getKeyInput+0xc>
				}
			}
		}
	}
}
 8000266:	bf00      	nop
 8000268:	bf00      	nop
 800026a:	3708      	adds	r7, #8
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	2000000c 	.word	0x2000000c
 8000274:	20000018 	.word	0x20000018
 8000278:	20000000 	.word	0x20000000
 800027c:	40010c00 	.word	0x40010c00
 8000280:	20000024 	.word	0x20000024
 8000284:	20000030 	.word	0x20000030

08000288 <is_button_pressed>:

int is_button_pressed ( int index ) {
 8000288:	b480      	push	{r7}
 800028a:	b083      	sub	sp, #12
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 8000290:	4a09      	ldr	r2, [pc, #36]	; (80002b8 <is_button_pressed+0x30>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000298:	2b01      	cmp	r3, #1
 800029a:	d106      	bne.n	80002aa <is_button_pressed+0x22>
		button_flag[index] = 0;
 800029c:	4a06      	ldr	r2, [pc, #24]	; (80002b8 <is_button_pressed+0x30>)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	2100      	movs	r1, #0
 80002a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80002a6:	2301      	movs	r3, #1
 80002a8:	e000      	b.n	80002ac <is_button_pressed+0x24>
	}
	return 0;
 80002aa:	2300      	movs	r3, #0
}
 80002ac:	4618      	mov	r0, r3
 80002ae:	370c      	adds	r7, #12
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bc80      	pop	{r7}
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	200000d4 	.word	0x200000d4

080002bc <updateCountDown>:

#include "fsm_automatic.h"

int countLEDauto = 0;

void updateCountDown(){
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
	countdownTopToBottomLed--;
 80002c0:	4b06      	ldr	r3, [pc, #24]	; (80002dc <updateCountDown+0x20>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	3b01      	subs	r3, #1
 80002c6:	4a05      	ldr	r2, [pc, #20]	; (80002dc <updateCountDown+0x20>)
 80002c8:	6013      	str	r3, [r2, #0]
	countdownLeftToRightLed--;
 80002ca:	4b05      	ldr	r3, [pc, #20]	; (80002e0 <updateCountDown+0x24>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	3b01      	subs	r3, #1
 80002d0:	4a03      	ldr	r2, [pc, #12]	; (80002e0 <updateCountDown+0x24>)
 80002d2:	6013      	str	r3, [r2, #0]
}
 80002d4:	bf00      	nop
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bc80      	pop	{r7}
 80002da:	4770      	bx	lr
 80002dc:	200000f8 	.word	0x200000f8
 80002e0:	20000104 	.word	0x20000104

080002e4 <fsm_auto>:

void fsm_auto(){
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	if(MODE == MODE1){
 80002e8:	4b72      	ldr	r3, [pc, #456]	; (80004b4 <fsm_auto+0x1d0>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	2b01      	cmp	r3, #1
 80002ee:	f040 80df 	bne.w	80004b0 <fsm_auto+0x1cc>
		switch(TopToBottomLedAutoState){
 80002f2:	4b71      	ldr	r3, [pc, #452]	; (80004b8 <fsm_auto+0x1d4>)
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b03      	cmp	r3, #3
 80002f8:	d83b      	bhi.n	8000372 <fsm_auto+0x8e>
 80002fa:	a201      	add	r2, pc, #4	; (adr r2, 8000300 <fsm_auto+0x1c>)
 80002fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000300:	08000311 	.word	0x08000311
 8000304:	08000319 	.word	0x08000319
 8000308:	08000337 	.word	0x08000337
 800030c:	08000355 	.word	0x08000355
		case LED_INIT:
			TopToBottomLedAutoState = RED;
 8000310:	4b69      	ldr	r3, [pc, #420]	; (80004b8 <fsm_auto+0x1d4>)
 8000312:	2201      	movs	r2, #1
 8000314:	701a      	strb	r2, [r3, #0]
//			setTimer0(100);
			break;
 8000316:	e033      	b.n	8000380 <fsm_auto+0x9c>
		case RED:
			displayTopToBottomLED(RED);
 8000318:	2001      	movs	r0, #1
 800031a:	f000 feb5 	bl	8001088 <displayTopToBottomLED>
//			if(timer0_flag == 1){
//				countdownTopToBottomLed--;
				if(countdownTopToBottomLed <= 0){
 800031e:	4b67      	ldr	r3, [pc, #412]	; (80004bc <fsm_auto+0x1d8>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	2b00      	cmp	r3, #0
 8000324:	dc27      	bgt.n	8000376 <fsm_auto+0x92>
					countdownTopToBottomLed = greenDelay;
 8000326:	4b66      	ldr	r3, [pc, #408]	; (80004c0 <fsm_auto+0x1dc>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4a64      	ldr	r2, [pc, #400]	; (80004bc <fsm_auto+0x1d8>)
 800032c:	6013      	str	r3, [r2, #0]
					TopToBottomLedAutoState = GREEN;
 800032e:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <fsm_auto+0x1d4>)
 8000330:	2202      	movs	r2, #2
 8000332:	701a      	strb	r2, [r3, #0]
				}
//				setTimer0(100);
//			}
			break;
 8000334:	e01f      	b.n	8000376 <fsm_auto+0x92>
		case GREEN:
			displayTopToBottomLED(GREEN);
 8000336:	2002      	movs	r0, #2
 8000338:	f000 fea6 	bl	8001088 <displayTopToBottomLED>
//			if(timer0_flag == 1){
//				countdownTopToBottomLed--;
				if(countdownTopToBottomLed <= 0){
 800033c:	4b5f      	ldr	r3, [pc, #380]	; (80004bc <fsm_auto+0x1d8>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	dc1a      	bgt.n	800037a <fsm_auto+0x96>
					countdownTopToBottomLed = yellowDelay;
 8000344:	4b5f      	ldr	r3, [pc, #380]	; (80004c4 <fsm_auto+0x1e0>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a5c      	ldr	r2, [pc, #368]	; (80004bc <fsm_auto+0x1d8>)
 800034a:	6013      	str	r3, [r2, #0]
					TopToBottomLedAutoState = YELLOW;
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <fsm_auto+0x1d4>)
 800034e:	2203      	movs	r2, #3
 8000350:	701a      	strb	r2, [r3, #0]
				}
//				setTimer0(100);
//			}
			break;
 8000352:	e012      	b.n	800037a <fsm_auto+0x96>
		case YELLOW:
			displayTopToBottomLED(YELLOW);
 8000354:	2003      	movs	r0, #3
 8000356:	f000 fe97 	bl	8001088 <displayTopToBottomLED>
//			if(timer0_flag == 1){
//				countdownTopToBottomLed--;
				if(countdownTopToBottomLed <= 0){
 800035a:	4b58      	ldr	r3, [pc, #352]	; (80004bc <fsm_auto+0x1d8>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	2b00      	cmp	r3, #0
 8000360:	dc0d      	bgt.n	800037e <fsm_auto+0x9a>
					countdownTopToBottomLed = redDelay;
 8000362:	4b59      	ldr	r3, [pc, #356]	; (80004c8 <fsm_auto+0x1e4>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4a55      	ldr	r2, [pc, #340]	; (80004bc <fsm_auto+0x1d8>)
 8000368:	6013      	str	r3, [r2, #0]
					TopToBottomLedAutoState = RED;
 800036a:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <fsm_auto+0x1d4>)
 800036c:	2201      	movs	r2, #1
 800036e:	701a      	strb	r2, [r3, #0]
				}
//				setTimer0(100);
//			}
			break;
 8000370:	e005      	b.n	800037e <fsm_auto+0x9a>
		default:
			break;
 8000372:	bf00      	nop
 8000374:	e004      	b.n	8000380 <fsm_auto+0x9c>
			break;
 8000376:	bf00      	nop
 8000378:	e002      	b.n	8000380 <fsm_auto+0x9c>
			break;
 800037a:	bf00      	nop
 800037c:	e000      	b.n	8000380 <fsm_auto+0x9c>
			break;
 800037e:	bf00      	nop
		}

		switch(LeftToRightLedAutoState){
 8000380:	4b52      	ldr	r3, [pc, #328]	; (80004cc <fsm_auto+0x1e8>)
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	2b03      	cmp	r3, #3
 8000386:	d83c      	bhi.n	8000402 <fsm_auto+0x11e>
 8000388:	a201      	add	r2, pc, #4	; (adr r2, 8000390 <fsm_auto+0xac>)
 800038a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800038e:	bf00      	nop
 8000390:	080003a1 	.word	0x080003a1
 8000394:	080003a9 	.word	0x080003a9
 8000398:	080003c7 	.word	0x080003c7
 800039c:	080003e5 	.word	0x080003e5
		case LED_INIT:
			LeftToRightLedAutoState = GREEN;
 80003a0:	4b4a      	ldr	r3, [pc, #296]	; (80004cc <fsm_auto+0x1e8>)
 80003a2:	2202      	movs	r2, #2
 80003a4:	701a      	strb	r2, [r3, #0]
//			setTimer1(100);
			break;
 80003a6:	e033      	b.n	8000410 <fsm_auto+0x12c>
		case RED:
			displayLeftToRightLED(RED);
 80003a8:	2001      	movs	r0, #1
 80003aa:	f000 fec9 	bl	8001140 <displayLeftToRightLED>
//			if(timer1_flag == 1){
//				countdownLeftToRightLed--;
				if(countdownLeftToRightLed <= 0){
 80003ae:	4b48      	ldr	r3, [pc, #288]	; (80004d0 <fsm_auto+0x1ec>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	dc27      	bgt.n	8000406 <fsm_auto+0x122>
					countdownLeftToRightLed = greenDelay;
 80003b6:	4b42      	ldr	r3, [pc, #264]	; (80004c0 <fsm_auto+0x1dc>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4a45      	ldr	r2, [pc, #276]	; (80004d0 <fsm_auto+0x1ec>)
 80003bc:	6013      	str	r3, [r2, #0]
					LeftToRightLedAutoState = GREEN;
 80003be:	4b43      	ldr	r3, [pc, #268]	; (80004cc <fsm_auto+0x1e8>)
 80003c0:	2202      	movs	r2, #2
 80003c2:	701a      	strb	r2, [r3, #0]
				}
//				setTimer1(100);
//			}
			break;
 80003c4:	e01f      	b.n	8000406 <fsm_auto+0x122>
		case GREEN:
			displayLeftToRightLED(GREEN);
 80003c6:	2002      	movs	r0, #2
 80003c8:	f000 feba 	bl	8001140 <displayLeftToRightLED>
//			if(timer1_flag == 1){
//				countdownLeftToRightLed--;
				if(countdownLeftToRightLed <= 0){
 80003cc:	4b40      	ldr	r3, [pc, #256]	; (80004d0 <fsm_auto+0x1ec>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	dc1a      	bgt.n	800040a <fsm_auto+0x126>
					countdownLeftToRightLed = yellowDelay;
 80003d4:	4b3b      	ldr	r3, [pc, #236]	; (80004c4 <fsm_auto+0x1e0>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a3d      	ldr	r2, [pc, #244]	; (80004d0 <fsm_auto+0x1ec>)
 80003da:	6013      	str	r3, [r2, #0]
					LeftToRightLedAutoState = YELLOW;
 80003dc:	4b3b      	ldr	r3, [pc, #236]	; (80004cc <fsm_auto+0x1e8>)
 80003de:	2203      	movs	r2, #3
 80003e0:	701a      	strb	r2, [r3, #0]
				}
//				setTimer1(100);
//			}
			break;
 80003e2:	e012      	b.n	800040a <fsm_auto+0x126>
		case YELLOW:
			displayLeftToRightLED(YELLOW);
 80003e4:	2003      	movs	r0, #3
 80003e6:	f000 feab 	bl	8001140 <displayLeftToRightLED>
//			if(timer1_flag == 1){
//				countdownLeftToRightLed--;
				if(countdownLeftToRightLed <= 0){
 80003ea:	4b39      	ldr	r3, [pc, #228]	; (80004d0 <fsm_auto+0x1ec>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	dc0d      	bgt.n	800040e <fsm_auto+0x12a>
					countdownLeftToRightLed = redDelay;
 80003f2:	4b35      	ldr	r3, [pc, #212]	; (80004c8 <fsm_auto+0x1e4>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a36      	ldr	r2, [pc, #216]	; (80004d0 <fsm_auto+0x1ec>)
 80003f8:	6013      	str	r3, [r2, #0]
					LeftToRightLedAutoState = RED;
 80003fa:	4b34      	ldr	r3, [pc, #208]	; (80004cc <fsm_auto+0x1e8>)
 80003fc:	2201      	movs	r2, #1
 80003fe:	701a      	strb	r2, [r3, #0]
				}
//				setTimer1(100);
//			}
			break;
 8000400:	e005      	b.n	800040e <fsm_auto+0x12a>
		default:
			break;
 8000402:	bf00      	nop
 8000404:	e004      	b.n	8000410 <fsm_auto+0x12c>
			break;
 8000406:	bf00      	nop
 8000408:	e002      	b.n	8000410 <fsm_auto+0x12c>
			break;
 800040a:	bf00      	nop
 800040c:	e000      	b.n	8000410 <fsm_auto+0x12c>
			break;
 800040e:	bf00      	nop
		}

		switch(seg7AutoState){
 8000410:	4b30      	ldr	r3, [pc, #192]	; (80004d4 <fsm_auto+0x1f0>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b02      	cmp	r3, #2
 8000416:	d025      	beq.n	8000464 <fsm_auto+0x180>
 8000418:	2b02      	cmp	r3, #2
 800041a:	dc3b      	bgt.n	8000494 <fsm_auto+0x1b0>
 800041c:	2b00      	cmp	r3, #0
 800041e:	d002      	beq.n	8000426 <fsm_auto+0x142>
 8000420:	2b01      	cmp	r3, #1
 8000422:	d007      	beq.n	8000434 <fsm_auto+0x150>
					countLEDauto = 0;
//					setTimer2(50);
				}
				break;
			default:
				break;
 8000424:	e036      	b.n	8000494 <fsm_auto+0x1b0>
				countLEDauto = 0;
 8000426:	4b2c      	ldr	r3, [pc, #176]	; (80004d8 <fsm_auto+0x1f4>)
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
				seg7AutoState = FIRST;
 800042c:	4b29      	ldr	r3, [pc, #164]	; (80004d4 <fsm_auto+0x1f0>)
 800042e:	2201      	movs	r2, #1
 8000430:	701a      	strb	r2, [r3, #0]
				break;
 8000432:	e034      	b.n	800049e <fsm_auto+0x1ba>
				countLEDauto++;
 8000434:	4b28      	ldr	r3, [pc, #160]	; (80004d8 <fsm_auto+0x1f4>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	3301      	adds	r3, #1
 800043a:	4a27      	ldr	r2, [pc, #156]	; (80004d8 <fsm_auto+0x1f4>)
 800043c:	6013      	str	r3, [r2, #0]
				if(countLEDauto == 50){
 800043e:	4b26      	ldr	r3, [pc, #152]	; (80004d8 <fsm_auto+0x1f4>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	2b32      	cmp	r3, #50	; 0x32
 8000444:	d128      	bne.n	8000498 <fsm_auto+0x1b4>
					showTimeDelay_First(countdownTopToBottomLed, countdownLeftToRightLed);
 8000446:	4b1d      	ldr	r3, [pc, #116]	; (80004bc <fsm_auto+0x1d8>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4a21      	ldr	r2, [pc, #132]	; (80004d0 <fsm_auto+0x1ec>)
 800044c:	6812      	ldr	r2, [r2, #0]
 800044e:	4611      	mov	r1, r2
 8000450:	4618      	mov	r0, r3
 8000452:	f000 ff8d 	bl	8001370 <showTimeDelay_First>
					seg7AutoState = SECOND;
 8000456:	4b1f      	ldr	r3, [pc, #124]	; (80004d4 <fsm_auto+0x1f0>)
 8000458:	2202      	movs	r2, #2
 800045a:	701a      	strb	r2, [r3, #0]
					countLEDauto = 0;
 800045c:	4b1e      	ldr	r3, [pc, #120]	; (80004d8 <fsm_auto+0x1f4>)
 800045e:	2200      	movs	r2, #0
 8000460:	601a      	str	r2, [r3, #0]
				break;
 8000462:	e019      	b.n	8000498 <fsm_auto+0x1b4>
				countLEDauto++;
 8000464:	4b1c      	ldr	r3, [pc, #112]	; (80004d8 <fsm_auto+0x1f4>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	3301      	adds	r3, #1
 800046a:	4a1b      	ldr	r2, [pc, #108]	; (80004d8 <fsm_auto+0x1f4>)
 800046c:	6013      	str	r3, [r2, #0]
				if(countLEDauto == 50){
 800046e:	4b1a      	ldr	r3, [pc, #104]	; (80004d8 <fsm_auto+0x1f4>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	2b32      	cmp	r3, #50	; 0x32
 8000474:	d112      	bne.n	800049c <fsm_auto+0x1b8>
					showTimeDelay_Second(countdownTopToBottomLed, countdownLeftToRightLed);
 8000476:	4b11      	ldr	r3, [pc, #68]	; (80004bc <fsm_auto+0x1d8>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a15      	ldr	r2, [pc, #84]	; (80004d0 <fsm_auto+0x1ec>)
 800047c:	6812      	ldr	r2, [r2, #0]
 800047e:	4611      	mov	r1, r2
 8000480:	4618      	mov	r0, r3
 8000482:	f000 ff99 	bl	80013b8 <showTimeDelay_Second>
					seg7AutoState = FIRST;
 8000486:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <fsm_auto+0x1f0>)
 8000488:	2201      	movs	r2, #1
 800048a:	701a      	strb	r2, [r3, #0]
					countLEDauto = 0;
 800048c:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <fsm_auto+0x1f4>)
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
				break;
 8000492:	e003      	b.n	800049c <fsm_auto+0x1b8>
				break;
 8000494:	bf00      	nop
 8000496:	e002      	b.n	800049e <fsm_auto+0x1ba>
				break;
 8000498:	bf00      	nop
 800049a:	e000      	b.n	800049e <fsm_auto+0x1ba>
				break;
 800049c:	bf00      	nop
		}

		if(is_button_pressed(0)){
 800049e:	2000      	movs	r0, #0
 80004a0:	f7ff fef2 	bl	8000288 <is_button_pressed>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d002      	beq.n	80004b0 <fsm_auto+0x1cc>
			MODE = MODE2;
 80004aa:	4b02      	ldr	r3, [pc, #8]	; (80004b4 <fsm_auto+0x1d0>)
 80004ac:	2202      	movs	r2, #2
 80004ae:	701a      	strb	r2, [r3, #0]
//			turnoff_leds();
		}
	}
}
 80004b0:	bf00      	nop
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	20000100 	.word	0x20000100
 80004b8:	200000fc 	.word	0x200000fc
 80004bc:	200000f8 	.word	0x200000f8
 80004c0:	20000040 	.word	0x20000040
 80004c4:	20000044 	.word	0x20000044
 80004c8:	2000003c 	.word	0x2000003c
 80004cc:	20000108 	.word	0x20000108
 80004d0:	20000104 	.word	0x20000104
 80004d4:	2000010d 	.word	0x2000010d
 80004d8:	200000e0 	.word	0x200000e0

080004dc <check_time_valid>:
	HAL_GPIO_WritePin(LR_RED_GPIO_Port, LR_RED_Pin, SET);
	HAL_GPIO_WritePin(LR_YELLOW_GPIO_Port, LR_YELLOW_Pin, SET);
	HAL_GPIO_WritePin(LR_GREEN_GPIO_Port, LR_GREEN_Pin, SET);
}

void check_time_valid(){
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
	if (redDelay > (yellowDelay + greenDelay)){
 80004e2:	4b24      	ldr	r3, [pc, #144]	; (8000574 <check_time_valid+0x98>)
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	4b24      	ldr	r3, [pc, #144]	; (8000578 <check_time_valid+0x9c>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	441a      	add	r2, r3
 80004ec:	4b23      	ldr	r3, [pc, #140]	; (800057c <check_time_valid+0xa0>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	429a      	cmp	r2, r3
 80004f2:	da1a      	bge.n	800052a <check_time_valid+0x4e>
		int remainder = redDelay - yellowDelay - greenDelay;
 80004f4:	4b21      	ldr	r3, [pc, #132]	; (800057c <check_time_valid+0xa0>)
 80004f6:	681a      	ldr	r2, [r3, #0]
 80004f8:	4b1e      	ldr	r3, [pc, #120]	; (8000574 <check_time_valid+0x98>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	1ad2      	subs	r2, r2, r3
 80004fe:	4b1e      	ldr	r3, [pc, #120]	; (8000578 <check_time_valid+0x9c>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	1ad3      	subs	r3, r2, r3
 8000504:	607b      	str	r3, [r7, #4]
		greenDelay = greenDelay + remainder/2;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	0fda      	lsrs	r2, r3, #31
 800050a:	4413      	add	r3, r2
 800050c:	105b      	asrs	r3, r3, #1
 800050e:	461a      	mov	r2, r3
 8000510:	4b19      	ldr	r3, [pc, #100]	; (8000578 <check_time_valid+0x9c>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4413      	add	r3, r2
 8000516:	4a18      	ldr	r2, [pc, #96]	; (8000578 <check_time_valid+0x9c>)
 8000518:	6013      	str	r3, [r2, #0]
		yellowDelay = redDelay - greenDelay;
 800051a:	4b18      	ldr	r3, [pc, #96]	; (800057c <check_time_valid+0xa0>)
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	4b16      	ldr	r3, [pc, #88]	; (8000578 <check_time_valid+0x9c>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	1ad3      	subs	r3, r2, r3
 8000524:	4a13      	ldr	r2, [pc, #76]	; (8000574 <check_time_valid+0x98>)
 8000526:	6013      	str	r3, [r2, #0]
 8000528:	e00f      	b.n	800054a <check_time_valid+0x6e>
	}
	else if (redDelay < (yellowDelay + greenDelay)){
 800052a:	4b12      	ldr	r3, [pc, #72]	; (8000574 <check_time_valid+0x98>)
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	4b12      	ldr	r3, [pc, #72]	; (8000578 <check_time_valid+0x9c>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	441a      	add	r2, r3
 8000534:	4b11      	ldr	r3, [pc, #68]	; (800057c <check_time_valid+0xa0>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	429a      	cmp	r2, r3
 800053a:	dd06      	ble.n	800054a <check_time_valid+0x6e>
		redDelay  = yellowDelay + greenDelay;
 800053c:	4b0d      	ldr	r3, [pc, #52]	; (8000574 <check_time_valid+0x98>)
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	4b0d      	ldr	r3, [pc, #52]	; (8000578 <check_time_valid+0x9c>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4413      	add	r3, r2
 8000546:	4a0d      	ldr	r2, [pc, #52]	; (800057c <check_time_valid+0xa0>)
 8000548:	6013      	str	r3, [r2, #0]
	}

	if (yellowDelay > greenDelay){
 800054a:	4b0a      	ldr	r3, [pc, #40]	; (8000574 <check_time_valid+0x98>)
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <check_time_valid+0x9c>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	429a      	cmp	r2, r3
 8000554:	dd09      	ble.n	800056a <check_time_valid+0x8e>
		int tmp = greenDelay;
 8000556:	4b08      	ldr	r3, [pc, #32]	; (8000578 <check_time_valid+0x9c>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	603b      	str	r3, [r7, #0]
		greenDelay = yellowDelay;
 800055c:	4b05      	ldr	r3, [pc, #20]	; (8000574 <check_time_valid+0x98>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a05      	ldr	r2, [pc, #20]	; (8000578 <check_time_valid+0x9c>)
 8000562:	6013      	str	r3, [r2, #0]
		yellowDelay= tmp;
 8000564:	4a03      	ldr	r2, [pc, #12]	; (8000574 <check_time_valid+0x98>)
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	6013      	str	r3, [r2, #0]
	}
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr
 8000574:	20000044 	.word	0x20000044
 8000578:	20000040 	.word	0x20000040
 800057c:	2000003c 	.word	0x2000003c

08000580 <MODE2_run>:


void MODE2_run(){
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	switch(mode2Toggle){
 8000584:	4b3a      	ldr	r3, [pc, #232]	; (8000670 <MODE2_run+0xf0>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d002      	beq.n	8000592 <MODE2_run+0x12>
 800058c:	2b01      	cmp	r3, #1
 800058e:	d004      	beq.n	800059a <MODE2_run+0x1a>
				toggleLeds(RED);
//				setTimer3(25);
//			}
			break;
		default:
			break;
 8000590:	e007      	b.n	80005a2 <MODE2_run+0x22>
			mode2Toggle = TOGGLE;
 8000592:	4b37      	ldr	r3, [pc, #220]	; (8000670 <MODE2_run+0xf0>)
 8000594:	2201      	movs	r2, #1
 8000596:	701a      	strb	r2, [r3, #0]
			break;
 8000598:	e003      	b.n	80005a2 <MODE2_run+0x22>
				toggleLeds(RED);
 800059a:	2001      	movs	r0, #1
 800059c:	f000 fe30 	bl	8001200 <toggleLeds>
			break;
 80005a0:	bf00      	nop
	}

	switch(mode2Increase){
 80005a2:	4b34      	ldr	r3, [pc, #208]	; (8000674 <MODE2_run+0xf4>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d002      	beq.n	80005b0 <MODE2_run+0x30>
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d013      	beq.n	80005d6 <MODE2_run+0x56>
				DelayTemp = 0;
				MODE = MODE3;
			}
			break;
		default:
			break;
 80005ae:	e038      	b.n	8000622 <MODE2_run+0xa2>
			DelayTemp = redDelay;
 80005b0:	4b31      	ldr	r3, [pc, #196]	; (8000678 <MODE2_run+0xf8>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a31      	ldr	r2, [pc, #196]	; (800067c <MODE2_run+0xfc>)
 80005b6:	6013      	str	r3, [r2, #0]
			if (is_button_pressed(1)==1){
 80005b8:	2001      	movs	r0, #1
 80005ba:	f7ff fe65 	bl	8000288 <is_button_pressed>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d12b      	bne.n	800061c <MODE2_run+0x9c>
				mode2Increase = INCREASE;
 80005c4:	4b2b      	ldr	r3, [pc, #172]	; (8000674 <MODE2_run+0xf4>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	701a      	strb	r2, [r3, #0]
				DelayTemp += 1;
 80005ca:	4b2c      	ldr	r3, [pc, #176]	; (800067c <MODE2_run+0xfc>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	3301      	adds	r3, #1
 80005d0:	4a2a      	ldr	r2, [pc, #168]	; (800067c <MODE2_run+0xfc>)
 80005d2:	6013      	str	r3, [r2, #0]
			break;
 80005d4:	e022      	b.n	800061c <MODE2_run+0x9c>
			if (is_button_pressed(1)==1){
 80005d6:	2001      	movs	r0, #1
 80005d8:	f7ff fe56 	bl	8000288 <is_button_pressed>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d10b      	bne.n	80005fa <MODE2_run+0x7a>
				DelayTemp += 1;
 80005e2:	4b26      	ldr	r3, [pc, #152]	; (800067c <MODE2_run+0xfc>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	3301      	adds	r3, #1
 80005e8:	4a24      	ldr	r2, [pc, #144]	; (800067c <MODE2_run+0xfc>)
 80005ea:	6013      	str	r3, [r2, #0]
				if(DelayTemp >= 99) DelayTemp = 1;
 80005ec:	4b23      	ldr	r3, [pc, #140]	; (800067c <MODE2_run+0xfc>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2b62      	cmp	r3, #98	; 0x62
 80005f2:	dd02      	ble.n	80005fa <MODE2_run+0x7a>
 80005f4:	4b21      	ldr	r3, [pc, #132]	; (800067c <MODE2_run+0xfc>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	601a      	str	r2, [r3, #0]
			if (is_button_pressed(2)==1){
 80005fa:	2002      	movs	r0, #2
 80005fc:	f7ff fe44 	bl	8000288 <is_button_pressed>
 8000600:	4603      	mov	r3, r0
 8000602:	2b01      	cmp	r3, #1
 8000604:	d10c      	bne.n	8000620 <MODE2_run+0xa0>
				redDelay = DelayTemp;
 8000606:	4b1d      	ldr	r3, [pc, #116]	; (800067c <MODE2_run+0xfc>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a1b      	ldr	r2, [pc, #108]	; (8000678 <MODE2_run+0xf8>)
 800060c:	6013      	str	r3, [r2, #0]
				DelayTemp = 0;
 800060e:	4b1b      	ldr	r3, [pc, #108]	; (800067c <MODE2_run+0xfc>)
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
				MODE = MODE3;
 8000614:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <MODE2_run+0x100>)
 8000616:	2203      	movs	r2, #3
 8000618:	701a      	strb	r2, [r3, #0]
			break;
 800061a:	e001      	b.n	8000620 <MODE2_run+0xa0>
			break;
 800061c:	bf00      	nop
 800061e:	e000      	b.n	8000622 <MODE2_run+0xa2>
			break;
 8000620:	bf00      	nop
	}

	switch(mode2Seg){
 8000622:	4b18      	ldr	r3, [pc, #96]	; (8000684 <MODE2_run+0x104>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b02      	cmp	r3, #2
 8000628:	d014      	beq.n	8000654 <MODE2_run+0xd4>
 800062a:	2b02      	cmp	r3, #2
 800062c:	dc1c      	bgt.n	8000668 <MODE2_run+0xe8>
 800062e:	2b00      	cmp	r3, #0
 8000630:	d002      	beq.n	8000638 <MODE2_run+0xb8>
 8000632:	2b01      	cmp	r3, #1
 8000634:	d004      	beq.n	8000640 <MODE2_run+0xc0>
//				setTimer4(25);
				mode2Seg = FIRST;
//			}
			break;
		default:
			break;
 8000636:	e017      	b.n	8000668 <MODE2_run+0xe8>
			mode2Seg = FIRST;
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MODE2_run+0x104>)
 800063a:	2201      	movs	r2, #1
 800063c:	701a      	strb	r2, [r3, #0]
			break;
 800063e:	e014      	b.n	800066a <MODE2_run+0xea>
				showTimeDelay_First(1,DelayTemp);
 8000640:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MODE2_run+0xfc>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4619      	mov	r1, r3
 8000646:	2001      	movs	r0, #1
 8000648:	f000 fe92 	bl	8001370 <showTimeDelay_First>
				mode2Seg = SECOND;
 800064c:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <MODE2_run+0x104>)
 800064e:	2202      	movs	r2, #2
 8000650:	701a      	strb	r2, [r3, #0]
			break;
 8000652:	e00a      	b.n	800066a <MODE2_run+0xea>
				showTimeDelay_Second(0,DelayTemp);
 8000654:	4b09      	ldr	r3, [pc, #36]	; (800067c <MODE2_run+0xfc>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4619      	mov	r1, r3
 800065a:	2000      	movs	r0, #0
 800065c:	f000 feac 	bl	80013b8 <showTimeDelay_Second>
				mode2Seg = FIRST;
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <MODE2_run+0x104>)
 8000662:	2201      	movs	r2, #1
 8000664:	701a      	strb	r2, [r3, #0]
			break;
 8000666:	e000      	b.n	800066a <MODE2_run+0xea>
			break;
 8000668:	bf00      	nop

	}
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	2000010a 	.word	0x2000010a
 8000674:	2000010c 	.word	0x2000010c
 8000678:	2000003c 	.word	0x2000003c
 800067c:	200000e4 	.word	0x200000e4
 8000680:	20000100 	.word	0x20000100
 8000684:	20000101 	.word	0x20000101

08000688 <MODE3_run>:

void MODE3_run(){
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	switch(mode3Toggle){
 800068c:	4b3a      	ldr	r3, [pc, #232]	; (8000778 <MODE3_run+0xf0>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d002      	beq.n	800069a <MODE3_run+0x12>
 8000694:	2b01      	cmp	r3, #1
 8000696:	d004      	beq.n	80006a2 <MODE3_run+0x1a>
				toggleLeds(YELLOW);
//				setTimer3(25);
//			}
			break;
		default:
			break;
 8000698:	e007      	b.n	80006aa <MODE3_run+0x22>
			mode3Toggle = TOGGLE;
 800069a:	4b37      	ldr	r3, [pc, #220]	; (8000778 <MODE3_run+0xf0>)
 800069c:	2201      	movs	r2, #1
 800069e:	701a      	strb	r2, [r3, #0]
			break;
 80006a0:	e003      	b.n	80006aa <MODE3_run+0x22>
				toggleLeds(YELLOW);
 80006a2:	2003      	movs	r0, #3
 80006a4:	f000 fdac 	bl	8001200 <toggleLeds>
			break;
 80006a8:	bf00      	nop
	}

	switch(mode3Increase){
 80006aa:	4b34      	ldr	r3, [pc, #208]	; (800077c <MODE3_run+0xf4>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d002      	beq.n	80006b8 <MODE3_run+0x30>
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d016      	beq.n	80006e4 <MODE3_run+0x5c>
				DelayTemp = 0;
				MODE = MODE4;
			}
			break;
		default:
			break;
 80006b6:	e038      	b.n	800072a <MODE3_run+0xa2>
			DelayTemp = yellowDelay;
 80006b8:	4b31      	ldr	r3, [pc, #196]	; (8000780 <MODE3_run+0xf8>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a31      	ldr	r2, [pc, #196]	; (8000784 <MODE3_run+0xfc>)
 80006be:	6013      	str	r3, [r2, #0]
			if (is_button_pressed(1)==1){
 80006c0:	2001      	movs	r0, #1
 80006c2:	f7ff fde1 	bl	8000288 <is_button_pressed>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d107      	bne.n	80006dc <MODE3_run+0x54>
				mode3Increase = INCREASE;
 80006cc:	4b2b      	ldr	r3, [pc, #172]	; (800077c <MODE3_run+0xf4>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	701a      	strb	r2, [r3, #0]
				DelayTemp +=1;
 80006d2:	4b2c      	ldr	r3, [pc, #176]	; (8000784 <MODE3_run+0xfc>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	3301      	adds	r3, #1
 80006d8:	4a2a      	ldr	r2, [pc, #168]	; (8000784 <MODE3_run+0xfc>)
 80006da:	6013      	str	r3, [r2, #0]
			mode3Increase = INCREASE;
 80006dc:	4b27      	ldr	r3, [pc, #156]	; (800077c <MODE3_run+0xf4>)
 80006de:	2201      	movs	r2, #1
 80006e0:	701a      	strb	r2, [r3, #0]
			break;
 80006e2:	e022      	b.n	800072a <MODE3_run+0xa2>
			if (is_button_pressed(1)==1){
 80006e4:	2001      	movs	r0, #1
 80006e6:	f7ff fdcf 	bl	8000288 <is_button_pressed>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d10b      	bne.n	8000708 <MODE3_run+0x80>
				DelayTemp +=1;
 80006f0:	4b24      	ldr	r3, [pc, #144]	; (8000784 <MODE3_run+0xfc>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	3301      	adds	r3, #1
 80006f6:	4a23      	ldr	r2, [pc, #140]	; (8000784 <MODE3_run+0xfc>)
 80006f8:	6013      	str	r3, [r2, #0]
				if(DelayTemp >= 99) DelayTemp = 1;
 80006fa:	4b22      	ldr	r3, [pc, #136]	; (8000784 <MODE3_run+0xfc>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	2b62      	cmp	r3, #98	; 0x62
 8000700:	dd02      	ble.n	8000708 <MODE3_run+0x80>
 8000702:	4b20      	ldr	r3, [pc, #128]	; (8000784 <MODE3_run+0xfc>)
 8000704:	2201      	movs	r2, #1
 8000706:	601a      	str	r2, [r3, #0]
			if (is_button_pressed(2)==1){
 8000708:	2002      	movs	r0, #2
 800070a:	f7ff fdbd 	bl	8000288 <is_button_pressed>
 800070e:	4603      	mov	r3, r0
 8000710:	2b01      	cmp	r3, #1
 8000712:	d109      	bne.n	8000728 <MODE3_run+0xa0>
				yellowDelay = DelayTemp;
 8000714:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <MODE3_run+0xfc>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a19      	ldr	r2, [pc, #100]	; (8000780 <MODE3_run+0xf8>)
 800071a:	6013      	str	r3, [r2, #0]
				DelayTemp = 0;
 800071c:	4b19      	ldr	r3, [pc, #100]	; (8000784 <MODE3_run+0xfc>)
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
				MODE = MODE4;
 8000722:	4b19      	ldr	r3, [pc, #100]	; (8000788 <MODE3_run+0x100>)
 8000724:	2204      	movs	r2, #4
 8000726:	701a      	strb	r2, [r3, #0]
			break;
 8000728:	bf00      	nop
		}

	switch(mode3Seg){
 800072a:	4b18      	ldr	r3, [pc, #96]	; (800078c <MODE3_run+0x104>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b02      	cmp	r3, #2
 8000730:	d014      	beq.n	800075c <MODE3_run+0xd4>
 8000732:	2b02      	cmp	r3, #2
 8000734:	dc1c      	bgt.n	8000770 <MODE3_run+0xe8>
 8000736:	2b00      	cmp	r3, #0
 8000738:	d002      	beq.n	8000740 <MODE3_run+0xb8>
 800073a:	2b01      	cmp	r3, #1
 800073c:	d004      	beq.n	8000748 <MODE3_run+0xc0>
//				setTimer4(25);
				mode3Seg = FIRST;
//			}
			break;
		default:
			break;
 800073e:	e017      	b.n	8000770 <MODE3_run+0xe8>
			mode3Seg = FIRST;
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <MODE3_run+0x104>)
 8000742:	2201      	movs	r2, #1
 8000744:	701a      	strb	r2, [r3, #0]
			break;
 8000746:	e014      	b.n	8000772 <MODE3_run+0xea>
				showTimeDelay_First(1,DelayTemp);
 8000748:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MODE3_run+0xfc>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4619      	mov	r1, r3
 800074e:	2001      	movs	r0, #1
 8000750:	f000 fe0e 	bl	8001370 <showTimeDelay_First>
				mode3Seg = SECOND;
 8000754:	4b0d      	ldr	r3, [pc, #52]	; (800078c <MODE3_run+0x104>)
 8000756:	2202      	movs	r2, #2
 8000758:	701a      	strb	r2, [r3, #0]
			break;
 800075a:	e00a      	b.n	8000772 <MODE3_run+0xea>
				showTimeDelay_Second(0,DelayTemp);
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MODE3_run+0xfc>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4619      	mov	r1, r3
 8000762:	2000      	movs	r0, #0
 8000764:	f000 fe28 	bl	80013b8 <showTimeDelay_Second>
				mode3Seg = FIRST;
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <MODE3_run+0x104>)
 800076a:	2201      	movs	r2, #1
 800076c:	701a      	strb	r2, [r3, #0]
			break;
 800076e:	e000      	b.n	8000772 <MODE3_run+0xea>
			break;
 8000770:	bf00      	nop
	}
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000102 	.word	0x20000102
 800077c:	2000010b 	.word	0x2000010b
 8000780:	20000044 	.word	0x20000044
 8000784:	200000e4 	.word	0x200000e4
 8000788:	20000100 	.word	0x20000100
 800078c:	200000fe 	.word	0x200000fe

08000790 <MODE4_run>:
void MODE4_run(){
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	switch(mode4Toggle){
 8000794:	4b3a      	ldr	r3, [pc, #232]	; (8000880 <MODE4_run+0xf0>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d002      	beq.n	80007a2 <MODE4_run+0x12>
 800079c:	2b01      	cmp	r3, #1
 800079e:	d004      	beq.n	80007aa <MODE4_run+0x1a>
				toggleLeds(GREEN);
//				setTimer3(25);
//			}
			break;
		default:
			break;
 80007a0:	e007      	b.n	80007b2 <MODE4_run+0x22>
			mode4Toggle = TOGGLE;
 80007a2:	4b37      	ldr	r3, [pc, #220]	; (8000880 <MODE4_run+0xf0>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	701a      	strb	r2, [r3, #0]
			break;
 80007a8:	e003      	b.n	80007b2 <MODE4_run+0x22>
				toggleLeds(GREEN);
 80007aa:	2002      	movs	r0, #2
 80007ac:	f000 fd28 	bl	8001200 <toggleLeds>
			break;
 80007b0:	bf00      	nop
	}

	switch(mode4Increase){
 80007b2:	4b34      	ldr	r3, [pc, #208]	; (8000884 <MODE4_run+0xf4>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d002      	beq.n	80007c0 <MODE4_run+0x30>
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d013      	beq.n	80007e6 <MODE4_run+0x56>
				MODE = MODE1;
				setValues();
			}
			break;
		default:
			break;
 80007be:	e039      	b.n	8000834 <MODE4_run+0xa4>
			DelayTemp = greenDelay;
 80007c0:	4b31      	ldr	r3, [pc, #196]	; (8000888 <MODE4_run+0xf8>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a31      	ldr	r2, [pc, #196]	; (800088c <MODE4_run+0xfc>)
 80007c6:	6013      	str	r3, [r2, #0]
			if (is_button_pressed(1)==1){
 80007c8:	2001      	movs	r0, #1
 80007ca:	f7ff fd5d 	bl	8000288 <is_button_pressed>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d12c      	bne.n	800082e <MODE4_run+0x9e>
				mode4Increase = INCREASE;
 80007d4:	4b2b      	ldr	r3, [pc, #172]	; (8000884 <MODE4_run+0xf4>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	701a      	strb	r2, [r3, #0]
				DelayTemp +=1;
 80007da:	4b2c      	ldr	r3, [pc, #176]	; (800088c <MODE4_run+0xfc>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	3301      	adds	r3, #1
 80007e0:	4a2a      	ldr	r2, [pc, #168]	; (800088c <MODE4_run+0xfc>)
 80007e2:	6013      	str	r3, [r2, #0]
			break;
 80007e4:	e023      	b.n	800082e <MODE4_run+0x9e>
			if (is_button_pressed(1)==1){
 80007e6:	2001      	movs	r0, #1
 80007e8:	f7ff fd4e 	bl	8000288 <is_button_pressed>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d10b      	bne.n	800080a <MODE4_run+0x7a>
				DelayTemp +=1;
 80007f2:	4b26      	ldr	r3, [pc, #152]	; (800088c <MODE4_run+0xfc>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	3301      	adds	r3, #1
 80007f8:	4a24      	ldr	r2, [pc, #144]	; (800088c <MODE4_run+0xfc>)
 80007fa:	6013      	str	r3, [r2, #0]
				if(DelayTemp >= 99) DelayTemp = 1;
 80007fc:	4b23      	ldr	r3, [pc, #140]	; (800088c <MODE4_run+0xfc>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b62      	cmp	r3, #98	; 0x62
 8000802:	dd02      	ble.n	800080a <MODE4_run+0x7a>
 8000804:	4b21      	ldr	r3, [pc, #132]	; (800088c <MODE4_run+0xfc>)
 8000806:	2201      	movs	r2, #1
 8000808:	601a      	str	r2, [r3, #0]
			if (is_button_pressed(2)==1){
 800080a:	2002      	movs	r0, #2
 800080c:	f7ff fd3c 	bl	8000288 <is_button_pressed>
 8000810:	4603      	mov	r3, r0
 8000812:	2b01      	cmp	r3, #1
 8000814:	d10d      	bne.n	8000832 <MODE4_run+0xa2>
				greenDelay = DelayTemp;
 8000816:	4b1d      	ldr	r3, [pc, #116]	; (800088c <MODE4_run+0xfc>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a1b      	ldr	r2, [pc, #108]	; (8000888 <MODE4_run+0xf8>)
 800081c:	6013      	str	r3, [r2, #0]
				check_time_valid();
 800081e:	f7ff fe5d 	bl	80004dc <check_time_valid>
				MODE = MODE1;
 8000822:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <MODE4_run+0x100>)
 8000824:	2201      	movs	r2, #1
 8000826:	701a      	strb	r2, [r3, #0]
				setValues();
 8000828:	f000 f876 	bl	8000918 <setValues>
			break;
 800082c:	e001      	b.n	8000832 <MODE4_run+0xa2>
			break;
 800082e:	bf00      	nop
 8000830:	e000      	b.n	8000834 <MODE4_run+0xa4>
			break;
 8000832:	bf00      	nop
	}

	switch(mode4Seg){
 8000834:	4b17      	ldr	r3, [pc, #92]	; (8000894 <MODE4_run+0x104>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b02      	cmp	r3, #2
 800083a:	d014      	beq.n	8000866 <MODE4_run+0xd6>
 800083c:	2b02      	cmp	r3, #2
 800083e:	dc1c      	bgt.n	800087a <MODE4_run+0xea>
 8000840:	2b00      	cmp	r3, #0
 8000842:	d002      	beq.n	800084a <MODE4_run+0xba>
 8000844:	2b01      	cmp	r3, #1
 8000846:	d004      	beq.n	8000852 <MODE4_run+0xc2>
//				setTimer4(25);
				mode4Seg = FIRST;
//			}
			break;
		default:
			break;
 8000848:	e017      	b.n	800087a <MODE4_run+0xea>
			mode4Seg = FIRST;
 800084a:	4b12      	ldr	r3, [pc, #72]	; (8000894 <MODE4_run+0x104>)
 800084c:	2201      	movs	r2, #1
 800084e:	701a      	strb	r2, [r3, #0]
			break;
 8000850:	e014      	b.n	800087c <MODE4_run+0xec>
				showTimeDelay_First(1,DelayTemp);
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MODE4_run+0xfc>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4619      	mov	r1, r3
 8000858:	2001      	movs	r0, #1
 800085a:	f000 fd89 	bl	8001370 <showTimeDelay_First>
				mode4Seg = SECOND;
 800085e:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <MODE4_run+0x104>)
 8000860:	2202      	movs	r2, #2
 8000862:	701a      	strb	r2, [r3, #0]
			break;
 8000864:	e00a      	b.n	800087c <MODE4_run+0xec>
				showTimeDelay_Second(0,DelayTemp);
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <MODE4_run+0xfc>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4619      	mov	r1, r3
 800086c:	2000      	movs	r0, #0
 800086e:	f000 fda3 	bl	80013b8 <showTimeDelay_Second>
				mode4Seg = FIRST;
 8000872:	4b08      	ldr	r3, [pc, #32]	; (8000894 <MODE4_run+0x104>)
 8000874:	2201      	movs	r2, #1
 8000876:	701a      	strb	r2, [r3, #0]
			break;
 8000878:	e000      	b.n	800087c <MODE4_run+0xec>
			break;
 800087a:	bf00      	nop
	}
}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	200000ff 	.word	0x200000ff
 8000884:	200000fd 	.word	0x200000fd
 8000888:	20000040 	.word	0x20000040
 800088c:	200000e4 	.word	0x200000e4
 8000890:	20000100 	.word	0x20000100
 8000894:	20000109 	.word	0x20000109

08000898 <fsm_manual>:

void fsm_manual(){
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
	switch(MODE){
 800089c:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <fsm_manual+0x7c>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b04      	cmp	r3, #4
 80008a2:	d01e      	beq.n	80008e2 <fsm_manual+0x4a>
 80008a4:	2b04      	cmp	r3, #4
 80008a6:	dc2c      	bgt.n	8000902 <fsm_manual+0x6a>
 80008a8:	2b02      	cmp	r3, #2
 80008aa:	d002      	beq.n	80008b2 <fsm_manual+0x1a>
 80008ac:	2b03      	cmp	r3, #3
 80008ae:	d00c      	beq.n	80008ca <fsm_manual+0x32>
			check_time_valid();
			setValues();
		}
		break;
	default:
		break;
 80008b0:	e027      	b.n	8000902 <fsm_manual+0x6a>
		MODE2_run();
 80008b2:	f7ff fe65 	bl	8000580 <MODE2_run>
		if (is_button_pressed(0) == 1){
 80008b6:	2000      	movs	r0, #0
 80008b8:	f7ff fce6 	bl	8000288 <is_button_pressed>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d121      	bne.n	8000906 <fsm_manual+0x6e>
			MODE = MODE3;
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <fsm_manual+0x7c>)
 80008c4:	2203      	movs	r2, #3
 80008c6:	701a      	strb	r2, [r3, #0]
		break;
 80008c8:	e01d      	b.n	8000906 <fsm_manual+0x6e>
		MODE3_run();
 80008ca:	f7ff fedd 	bl	8000688 <MODE3_run>
		if (is_button_pressed(0) == 1){
 80008ce:	2000      	movs	r0, #0
 80008d0:	f7ff fcda 	bl	8000288 <is_button_pressed>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d117      	bne.n	800090a <fsm_manual+0x72>
			MODE = MODE4;
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <fsm_manual+0x7c>)
 80008dc:	2204      	movs	r2, #4
 80008de:	701a      	strb	r2, [r3, #0]
		break;
 80008e0:	e013      	b.n	800090a <fsm_manual+0x72>
		MODE4_run();
 80008e2:	f7ff ff55 	bl	8000790 <MODE4_run>
		if(is_button_pressed(0)){
 80008e6:	2000      	movs	r0, #0
 80008e8:	f7ff fcce 	bl	8000288 <is_button_pressed>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d00d      	beq.n	800090e <fsm_manual+0x76>
			MODE = MODE1;
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <fsm_manual+0x7c>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	701a      	strb	r2, [r3, #0]
			check_time_valid();
 80008f8:	f7ff fdf0 	bl	80004dc <check_time_valid>
			setValues();
 80008fc:	f000 f80c 	bl	8000918 <setValues>
		break;
 8000900:	e005      	b.n	800090e <fsm_manual+0x76>
		break;
 8000902:	bf00      	nop
 8000904:	e004      	b.n	8000910 <fsm_manual+0x78>
		break;
 8000906:	bf00      	nop
 8000908:	e002      	b.n	8000910 <fsm_manual+0x78>
		break;
 800090a:	bf00      	nop
 800090c:	e000      	b.n	8000910 <fsm_manual+0x78>
		break;
 800090e:	bf00      	nop
	}
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000100 	.word	0x20000100

08000918 <setValues>:
int DelayTemp = 0;

int countdownTopToBottomLed;
int countdownLeftToRightLed;

void setValues(void){
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
	MODE = MODE1;
 800091c:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <setValues+0x70>)
 800091e:	2201      	movs	r2, #1
 8000920:	701a      	strb	r2, [r3, #0]

	mode2Toggle = TOGGLE_INIT;
 8000922:	4b1a      	ldr	r3, [pc, #104]	; (800098c <setValues+0x74>)
 8000924:	2200      	movs	r2, #0
 8000926:	701a      	strb	r2, [r3, #0]
	mode2Seg = SEG_INIT;
 8000928:	4b19      	ldr	r3, [pc, #100]	; (8000990 <setValues+0x78>)
 800092a:	2200      	movs	r2, #0
 800092c:	701a      	strb	r2, [r3, #0]
	mode2Increase = INCREASE_INIT;
 800092e:	4b19      	ldr	r3, [pc, #100]	; (8000994 <setValues+0x7c>)
 8000930:	2200      	movs	r2, #0
 8000932:	701a      	strb	r2, [r3, #0]

	mode3Toggle = TOGGLE_INIT;
 8000934:	4b18      	ldr	r3, [pc, #96]	; (8000998 <setValues+0x80>)
 8000936:	2200      	movs	r2, #0
 8000938:	701a      	strb	r2, [r3, #0]
	mode3Seg = SEG_INIT;
 800093a:	4b18      	ldr	r3, [pc, #96]	; (800099c <setValues+0x84>)
 800093c:	2200      	movs	r2, #0
 800093e:	701a      	strb	r2, [r3, #0]
	mode3Increase = INCREASE_INIT;
 8000940:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <setValues+0x88>)
 8000942:	2200      	movs	r2, #0
 8000944:	701a      	strb	r2, [r3, #0]

	mode4Toggle = TOGGLE_INIT;
 8000946:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <setValues+0x8c>)
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
	mode4Seg = SEG_INIT;
 800094c:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <setValues+0x90>)
 800094e:	2200      	movs	r2, #0
 8000950:	701a      	strb	r2, [r3, #0]
	mode4Increase = INCREASE_INIT;
 8000952:	4b16      	ldr	r3, [pc, #88]	; (80009ac <setValues+0x94>)
 8000954:	2200      	movs	r2, #0
 8000956:	701a      	strb	r2, [r3, #0]

	TopToBottomLedAutoState = LED_INIT;
 8000958:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <setValues+0x98>)
 800095a:	2200      	movs	r2, #0
 800095c:	701a      	strb	r2, [r3, #0]
	LeftToRightLedAutoState = LED_INIT;
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <setValues+0x9c>)
 8000960:	2200      	movs	r2, #0
 8000962:	701a      	strb	r2, [r3, #0]
	seg7AutoState = SEG_INIT;
 8000964:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <setValues+0xa0>)
 8000966:	2200      	movs	r2, #0
 8000968:	701a      	strb	r2, [r3, #0]

	DelayTemp = 0;
 800096a:	4b14      	ldr	r3, [pc, #80]	; (80009bc <setValues+0xa4>)
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
	countdownTopToBottomLed = redDelay;
 8000970:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <setValues+0xa8>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a13      	ldr	r2, [pc, #76]	; (80009c4 <setValues+0xac>)
 8000976:	6013      	str	r3, [r2, #0]
	countdownLeftToRightLed = greenDelay;
 8000978:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <setValues+0xb0>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a13      	ldr	r2, [pc, #76]	; (80009cc <setValues+0xb4>)
 800097e:	6013      	str	r3, [r2, #0]
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	20000100 	.word	0x20000100
 800098c:	2000010a 	.word	0x2000010a
 8000990:	20000101 	.word	0x20000101
 8000994:	2000010c 	.word	0x2000010c
 8000998:	20000102 	.word	0x20000102
 800099c:	200000fe 	.word	0x200000fe
 80009a0:	2000010b 	.word	0x2000010b
 80009a4:	200000ff 	.word	0x200000ff
 80009a8:	20000109 	.word	0x20000109
 80009ac:	200000fd 	.word	0x200000fd
 80009b0:	200000fc 	.word	0x200000fc
 80009b4:	20000108 	.word	0x20000108
 80009b8:	2000010d 	.word	0x2000010d
 80009bc:	200000e4 	.word	0x200000e4
 80009c0:	2000003c 	.word	0x2000003c
 80009c4:	200000f8 	.word	0x200000f8
 80009c8:	20000040 	.word	0x20000040
 80009cc:	20000104 	.word	0x20000104

080009d0 <display7SEG_TopToBottom>:
 *      Author: Asus
 */

#include "led_display.h"

void display7SEG_TopToBottom(int num){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2b09      	cmp	r3, #9
 80009dc:	f200 8180 	bhi.w	8000ce0 <display7SEG_TopToBottom+0x310>
 80009e0:	a201      	add	r2, pc, #4	; (adr r2, 80009e8 <display7SEG_TopToBottom+0x18>)
 80009e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e6:	bf00      	nop
 80009e8:	08000a11 	.word	0x08000a11
 80009ec:	08000a59 	.word	0x08000a59
 80009f0:	08000aa1 	.word	0x08000aa1
 80009f4:	08000ae9 	.word	0x08000ae9
 80009f8:	08000b31 	.word	0x08000b31
 80009fc:	08000b79 	.word	0x08000b79
 8000a00:	08000bc1 	.word	0x08000bc1
 8000a04:	08000c09 	.word	0x08000c09
 8000a08:	08000c51 	.word	0x08000c51
 8000a0c:	08000c99 	.word	0x08000c99
	switch(num){
	    case 0:
	        HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin ,GPIO_PIN_RESET) ;
 8000a10:	2200      	movs	r2, #0
 8000a12:	2101      	movs	r1, #1
 8000a14:	48b5      	ldr	r0, [pc, #724]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000a16:	f001 fb5c 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin ,GPIO_PIN_RESET) ;
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2102      	movs	r1, #2
 8000a1e:	48b3      	ldr	r0, [pc, #716]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000a20:	f001 fb57 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin ,GPIO_PIN_RESET) ;
 8000a24:	2200      	movs	r2, #0
 8000a26:	2104      	movs	r1, #4
 8000a28:	48b0      	ldr	r0, [pc, #704]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000a2a:	f001 fb52 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin ,GPIO_PIN_RESET) ;
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2108      	movs	r1, #8
 8000a32:	48ae      	ldr	r0, [pc, #696]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000a34:	f001 fb4d 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin ,GPIO_PIN_RESET) ;
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2110      	movs	r1, #16
 8000a3c:	48ab      	ldr	r0, [pc, #684]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000a3e:	f001 fb48 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin ,GPIO_PIN_RESET) ;
 8000a42:	2200      	movs	r2, #0
 8000a44:	2120      	movs	r1, #32
 8000a46:	48a9      	ldr	r0, [pc, #676]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000a48:	f001 fb43 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin ,GPIO_PIN_SET) ;
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	2140      	movs	r1, #64	; 0x40
 8000a50:	48a6      	ldr	r0, [pc, #664]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000a52:	f001 fb3e 	bl	80020d2 <HAL_GPIO_WritePin>
	        break;
 8000a56:	e144      	b.n	8000ce2 <display7SEG_TopToBottom+0x312>

	    case 1:
	        HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin ,GPIO_PIN_SET) ;
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	48a3      	ldr	r0, [pc, #652]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000a5e:	f001 fb38 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin ,GPIO_PIN_RESET) ;
 8000a62:	2200      	movs	r2, #0
 8000a64:	2102      	movs	r1, #2
 8000a66:	48a1      	ldr	r0, [pc, #644]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000a68:	f001 fb33 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin ,GPIO_PIN_RESET) ;
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2104      	movs	r1, #4
 8000a70:	489e      	ldr	r0, [pc, #632]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000a72:	f001 fb2e 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin ,GPIO_PIN_SET) ;
 8000a76:	2201      	movs	r2, #1
 8000a78:	2108      	movs	r1, #8
 8000a7a:	489c      	ldr	r0, [pc, #624]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000a7c:	f001 fb29 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin ,GPIO_PIN_SET) ;
 8000a80:	2201      	movs	r2, #1
 8000a82:	2110      	movs	r1, #16
 8000a84:	4899      	ldr	r0, [pc, #612]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000a86:	f001 fb24 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin ,GPIO_PIN_SET) ;
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	2120      	movs	r1, #32
 8000a8e:	4897      	ldr	r0, [pc, #604]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000a90:	f001 fb1f 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin ,GPIO_PIN_SET) ;
 8000a94:	2201      	movs	r2, #1
 8000a96:	2140      	movs	r1, #64	; 0x40
 8000a98:	4894      	ldr	r0, [pc, #592]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000a9a:	f001 fb1a 	bl	80020d2 <HAL_GPIO_WritePin>
	        break;
 8000a9e:	e120      	b.n	8000ce2 <display7SEG_TopToBottom+0x312>

	    case 2:
	        HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin ,GPIO_PIN_RESET) ;
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	4891      	ldr	r0, [pc, #580]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000aa6:	f001 fb14 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin ,GPIO_PIN_RESET) ;
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2102      	movs	r1, #2
 8000aae:	488f      	ldr	r0, [pc, #572]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000ab0:	f001 fb0f 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin ,GPIO_PIN_SET) ;
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	2104      	movs	r1, #4
 8000ab8:	488c      	ldr	r0, [pc, #560]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000aba:	f001 fb0a 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin ,GPIO_PIN_RESET) ;
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2108      	movs	r1, #8
 8000ac2:	488a      	ldr	r0, [pc, #552]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000ac4:	f001 fb05 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin ,GPIO_PIN_RESET) ;
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2110      	movs	r1, #16
 8000acc:	4887      	ldr	r0, [pc, #540]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000ace:	f001 fb00 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin ,GPIO_PIN_SET) ;
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	2120      	movs	r1, #32
 8000ad6:	4885      	ldr	r0, [pc, #532]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000ad8:	f001 fafb 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin ,GPIO_PIN_RESET) ;
 8000adc:	2200      	movs	r2, #0
 8000ade:	2140      	movs	r1, #64	; 0x40
 8000ae0:	4882      	ldr	r0, [pc, #520]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000ae2:	f001 faf6 	bl	80020d2 <HAL_GPIO_WritePin>
	        break;
 8000ae6:	e0fc      	b.n	8000ce2 <display7SEG_TopToBottom+0x312>

	    case 3:
	        HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin ,GPIO_PIN_RESET) ;
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2101      	movs	r1, #1
 8000aec:	487f      	ldr	r0, [pc, #508]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000aee:	f001 faf0 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin ,GPIO_PIN_RESET) ;
 8000af2:	2200      	movs	r2, #0
 8000af4:	2102      	movs	r1, #2
 8000af6:	487d      	ldr	r0, [pc, #500]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000af8:	f001 faeb 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin ,GPIO_PIN_RESET) ;
 8000afc:	2200      	movs	r2, #0
 8000afe:	2104      	movs	r1, #4
 8000b00:	487a      	ldr	r0, [pc, #488]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000b02:	f001 fae6 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin ,GPIO_PIN_RESET) ;
 8000b06:	2200      	movs	r2, #0
 8000b08:	2108      	movs	r1, #8
 8000b0a:	4878      	ldr	r0, [pc, #480]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000b0c:	f001 fae1 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin ,GPIO_PIN_SET) ;
 8000b10:	2201      	movs	r2, #1
 8000b12:	2110      	movs	r1, #16
 8000b14:	4875      	ldr	r0, [pc, #468]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000b16:	f001 fadc 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin ,GPIO_PIN_SET) ;
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	2120      	movs	r1, #32
 8000b1e:	4873      	ldr	r0, [pc, #460]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000b20:	f001 fad7 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin ,GPIO_PIN_RESET) ;
 8000b24:	2200      	movs	r2, #0
 8000b26:	2140      	movs	r1, #64	; 0x40
 8000b28:	4870      	ldr	r0, [pc, #448]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000b2a:	f001 fad2 	bl	80020d2 <HAL_GPIO_WritePin>
	        break;
 8000b2e:	e0d8      	b.n	8000ce2 <display7SEG_TopToBottom+0x312>

	    case 4:
	        HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin ,GPIO_PIN_SET) ;
 8000b30:	2201      	movs	r2, #1
 8000b32:	2101      	movs	r1, #1
 8000b34:	486d      	ldr	r0, [pc, #436]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000b36:	f001 facc 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin ,GPIO_PIN_RESET) ;
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2102      	movs	r1, #2
 8000b3e:	486b      	ldr	r0, [pc, #428]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000b40:	f001 fac7 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin ,GPIO_PIN_RESET) ;
 8000b44:	2200      	movs	r2, #0
 8000b46:	2104      	movs	r1, #4
 8000b48:	4868      	ldr	r0, [pc, #416]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000b4a:	f001 fac2 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin ,GPIO_PIN_SET) ;
 8000b4e:	2201      	movs	r2, #1
 8000b50:	2108      	movs	r1, #8
 8000b52:	4866      	ldr	r0, [pc, #408]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000b54:	f001 fabd 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin ,GPIO_PIN_SET) ;
 8000b58:	2201      	movs	r2, #1
 8000b5a:	2110      	movs	r1, #16
 8000b5c:	4863      	ldr	r0, [pc, #396]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000b5e:	f001 fab8 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin ,GPIO_PIN_RESET) ;
 8000b62:	2200      	movs	r2, #0
 8000b64:	2120      	movs	r1, #32
 8000b66:	4861      	ldr	r0, [pc, #388]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000b68:	f001 fab3 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin ,GPIO_PIN_RESET) ;
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2140      	movs	r1, #64	; 0x40
 8000b70:	485e      	ldr	r0, [pc, #376]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000b72:	f001 faae 	bl	80020d2 <HAL_GPIO_WritePin>
	        break;
 8000b76:	e0b4      	b.n	8000ce2 <display7SEG_TopToBottom+0x312>
	    case 5:
	        HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin ,GPIO_PIN_RESET) ;
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	485b      	ldr	r0, [pc, #364]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000b7e:	f001 faa8 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin ,GPIO_PIN_SET) ;
 8000b82:	2201      	movs	r2, #1
 8000b84:	2102      	movs	r1, #2
 8000b86:	4859      	ldr	r0, [pc, #356]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000b88:	f001 faa3 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin ,GPIO_PIN_RESET) ;
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2104      	movs	r1, #4
 8000b90:	4856      	ldr	r0, [pc, #344]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000b92:	f001 fa9e 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin ,GPIO_PIN_RESET) ;
 8000b96:	2200      	movs	r2, #0
 8000b98:	2108      	movs	r1, #8
 8000b9a:	4854      	ldr	r0, [pc, #336]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000b9c:	f001 fa99 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin ,GPIO_PIN_SET) ;
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	2110      	movs	r1, #16
 8000ba4:	4851      	ldr	r0, [pc, #324]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000ba6:	f001 fa94 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin ,GPIO_PIN_RESET) ;
 8000baa:	2200      	movs	r2, #0
 8000bac:	2120      	movs	r1, #32
 8000bae:	484f      	ldr	r0, [pc, #316]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000bb0:	f001 fa8f 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin ,GPIO_PIN_RESET) ;
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2140      	movs	r1, #64	; 0x40
 8000bb8:	484c      	ldr	r0, [pc, #304]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000bba:	f001 fa8a 	bl	80020d2 <HAL_GPIO_WritePin>
	        break;
 8000bbe:	e090      	b.n	8000ce2 <display7SEG_TopToBottom+0x312>
	    case 6:
		    HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin ,GPIO_PIN_RESET) ;
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	4849      	ldr	r0, [pc, #292]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000bc6:	f001 fa84 	bl	80020d2 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin ,GPIO_PIN_SET) ;
 8000bca:	2201      	movs	r2, #1
 8000bcc:	2102      	movs	r1, #2
 8000bce:	4847      	ldr	r0, [pc, #284]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000bd0:	f001 fa7f 	bl	80020d2 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin ,GPIO_PIN_RESET) ;
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2104      	movs	r1, #4
 8000bd8:	4844      	ldr	r0, [pc, #272]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000bda:	f001 fa7a 	bl	80020d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin ,GPIO_PIN_RESET) ;
 8000bde:	2200      	movs	r2, #0
 8000be0:	2108      	movs	r1, #8
 8000be2:	4842      	ldr	r0, [pc, #264]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000be4:	f001 fa75 	bl	80020d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin ,GPIO_PIN_RESET) ;
 8000be8:	2200      	movs	r2, #0
 8000bea:	2110      	movs	r1, #16
 8000bec:	483f      	ldr	r0, [pc, #252]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000bee:	f001 fa70 	bl	80020d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin ,GPIO_PIN_RESET) ;
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2120      	movs	r1, #32
 8000bf6:	483d      	ldr	r0, [pc, #244]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000bf8:	f001 fa6b 	bl	80020d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin ,GPIO_PIN_RESET) ;
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2140      	movs	r1, #64	; 0x40
 8000c00:	483a      	ldr	r0, [pc, #232]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000c02:	f001 fa66 	bl	80020d2 <HAL_GPIO_WritePin>
			break;
 8000c06:	e06c      	b.n	8000ce2 <display7SEG_TopToBottom+0x312>
	    case 7:
			HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin ,GPIO_PIN_RESET) ;
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	4837      	ldr	r0, [pc, #220]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000c0e:	f001 fa60 	bl	80020d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin ,GPIO_PIN_RESET) ;
 8000c12:	2200      	movs	r2, #0
 8000c14:	2102      	movs	r1, #2
 8000c16:	4835      	ldr	r0, [pc, #212]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000c18:	f001 fa5b 	bl	80020d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin ,GPIO_PIN_RESET) ;
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2104      	movs	r1, #4
 8000c20:	4832      	ldr	r0, [pc, #200]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000c22:	f001 fa56 	bl	80020d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin ,GPIO_PIN_SET) ;
 8000c26:	2201      	movs	r2, #1
 8000c28:	2108      	movs	r1, #8
 8000c2a:	4830      	ldr	r0, [pc, #192]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000c2c:	f001 fa51 	bl	80020d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin ,GPIO_PIN_SET) ;
 8000c30:	2201      	movs	r2, #1
 8000c32:	2110      	movs	r1, #16
 8000c34:	482d      	ldr	r0, [pc, #180]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000c36:	f001 fa4c 	bl	80020d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin ,GPIO_PIN_SET) ;
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	2120      	movs	r1, #32
 8000c3e:	482b      	ldr	r0, [pc, #172]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000c40:	f001 fa47 	bl	80020d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin ,GPIO_PIN_SET) ;
 8000c44:	2201      	movs	r2, #1
 8000c46:	2140      	movs	r1, #64	; 0x40
 8000c48:	4828      	ldr	r0, [pc, #160]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000c4a:	f001 fa42 	bl	80020d2 <HAL_GPIO_WritePin>
			break;
 8000c4e:	e048      	b.n	8000ce2 <display7SEG_TopToBottom+0x312>
	    case 8:
			HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin ,GPIO_PIN_RESET) ;
 8000c50:	2200      	movs	r2, #0
 8000c52:	2101      	movs	r1, #1
 8000c54:	4825      	ldr	r0, [pc, #148]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000c56:	f001 fa3c 	bl	80020d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin ,GPIO_PIN_RESET) ;
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2102      	movs	r1, #2
 8000c5e:	4823      	ldr	r0, [pc, #140]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000c60:	f001 fa37 	bl	80020d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin ,GPIO_PIN_RESET) ;
 8000c64:	2200      	movs	r2, #0
 8000c66:	2104      	movs	r1, #4
 8000c68:	4820      	ldr	r0, [pc, #128]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000c6a:	f001 fa32 	bl	80020d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin ,GPIO_PIN_RESET) ;
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2108      	movs	r1, #8
 8000c72:	481e      	ldr	r0, [pc, #120]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000c74:	f001 fa2d 	bl	80020d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin ,GPIO_PIN_RESET) ;
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2110      	movs	r1, #16
 8000c7c:	481b      	ldr	r0, [pc, #108]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000c7e:	f001 fa28 	bl	80020d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin ,GPIO_PIN_RESET) ;
 8000c82:	2200      	movs	r2, #0
 8000c84:	2120      	movs	r1, #32
 8000c86:	4819      	ldr	r0, [pc, #100]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000c88:	f001 fa23 	bl	80020d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin ,GPIO_PIN_RESET) ;
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2140      	movs	r1, #64	; 0x40
 8000c90:	4816      	ldr	r0, [pc, #88]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000c92:	f001 fa1e 	bl	80020d2 <HAL_GPIO_WritePin>
			break;
 8000c96:	e024      	b.n	8000ce2 <display7SEG_TopToBottom+0x312>
	    case 9:
	    	HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin ,GPIO_PIN_RESET) ;
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	4813      	ldr	r0, [pc, #76]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000c9e:	f001 fa18 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin ,GPIO_PIN_RESET) ;
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2102      	movs	r1, #2
 8000ca6:	4811      	ldr	r0, [pc, #68]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000ca8:	f001 fa13 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin ,GPIO_PIN_RESET) ;
 8000cac:	2200      	movs	r2, #0
 8000cae:	2104      	movs	r1, #4
 8000cb0:	480e      	ldr	r0, [pc, #56]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000cb2:	f001 fa0e 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin ,GPIO_PIN_RESET) ;
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2108      	movs	r1, #8
 8000cba:	480c      	ldr	r0, [pc, #48]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000cbc:	f001 fa09 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin ,GPIO_PIN_SET) ;
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	2110      	movs	r1, #16
 8000cc4:	4809      	ldr	r0, [pc, #36]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000cc6:	f001 fa04 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin ,GPIO_PIN_RESET) ;
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2120      	movs	r1, #32
 8000cce:	4807      	ldr	r0, [pc, #28]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000cd0:	f001 f9ff 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin ,GPIO_PIN_RESET) ;
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2140      	movs	r1, #64	; 0x40
 8000cd8:	4804      	ldr	r0, [pc, #16]	; (8000cec <display7SEG_TopToBottom+0x31c>)
 8000cda:	f001 f9fa 	bl	80020d2 <HAL_GPIO_WritePin>
	    	break;
 8000cde:	e000      	b.n	8000ce2 <display7SEG_TopToBottom+0x312>
	    default:
	    	break;
 8000ce0:	bf00      	nop
	 }
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40010800 	.word	0x40010800

08000cf0 <display7SEG_LeftToRight>:

void display7SEG_LeftToRight(int num){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2b09      	cmp	r3, #9
 8000cfc:	f200 81bc 	bhi.w	8001078 <display7SEG_LeftToRight+0x388>
 8000d00:	a201      	add	r2, pc, #4	; (adr r2, 8000d08 <display7SEG_LeftToRight+0x18>)
 8000d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d06:	bf00      	nop
 8000d08:	08000d31 	.word	0x08000d31
 8000d0c:	08000d85 	.word	0x08000d85
 8000d10:	08000dd9 	.word	0x08000dd9
 8000d14:	08000e2d 	.word	0x08000e2d
 8000d18:	08000e81 	.word	0x08000e81
 8000d1c:	08000ed5 	.word	0x08000ed5
 8000d20:	08000f29 	.word	0x08000f29
 8000d24:	08000f7d 	.word	0x08000f7d
 8000d28:	08000fd1 	.word	0x08000fd1
 8000d2c:	08001025 	.word	0x08001025
	switch(num){
	    case 0:
	        HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin ,GPIO_PIN_RESET) ;
 8000d30:	2200      	movs	r2, #0
 8000d32:	2180      	movs	r1, #128	; 0x80
 8000d34:	48d3      	ldr	r0, [pc, #844]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000d36:	f001 f9cc 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin ,GPIO_PIN_RESET) ;
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d40:	48d0      	ldr	r0, [pc, #832]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000d42:	f001 f9c6 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin ,GPIO_PIN_RESET) ;
 8000d46:	2200      	movs	r2, #0
 8000d48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d4c:	48cd      	ldr	r0, [pc, #820]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000d4e:	f001 f9c0 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin ,GPIO_PIN_RESET) ;
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d58:	48ca      	ldr	r0, [pc, #808]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000d5a:	f001 f9ba 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin ,GPIO_PIN_RESET) ;
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d64:	48c7      	ldr	r0, [pc, #796]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000d66:	f001 f9b4 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin ,GPIO_PIN_RESET) ;
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d70:	48c4      	ldr	r0, [pc, #784]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000d72:	f001 f9ae 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin ,GPIO_PIN_SET) ;
 8000d76:	2201      	movs	r2, #1
 8000d78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d7c:	48c1      	ldr	r0, [pc, #772]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000d7e:	f001 f9a8 	bl	80020d2 <HAL_GPIO_WritePin>
	        break;
 8000d82:	e17a      	b.n	800107a <display7SEG_LeftToRight+0x38a>
	    case 1:
	        HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin ,GPIO_PIN_SET) ;
 8000d84:	2201      	movs	r2, #1
 8000d86:	2180      	movs	r1, #128	; 0x80
 8000d88:	48be      	ldr	r0, [pc, #760]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000d8a:	f001 f9a2 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin ,GPIO_PIN_RESET) ;
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d94:	48bb      	ldr	r0, [pc, #748]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000d96:	f001 f99c 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin ,GPIO_PIN_RESET) ;
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000da0:	48b8      	ldr	r0, [pc, #736]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000da2:	f001 f996 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin ,GPIO_PIN_SET) ;
 8000da6:	2201      	movs	r2, #1
 8000da8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dac:	48b5      	ldr	r0, [pc, #724]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000dae:	f001 f990 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin ,GPIO_PIN_SET) ;
 8000db2:	2201      	movs	r2, #1
 8000db4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000db8:	48b2      	ldr	r0, [pc, #712]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000dba:	f001 f98a 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin ,GPIO_PIN_SET) ;
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dc4:	48af      	ldr	r0, [pc, #700]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000dc6:	f001 f984 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin ,GPIO_PIN_SET) ;
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dd0:	48ac      	ldr	r0, [pc, #688]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000dd2:	f001 f97e 	bl	80020d2 <HAL_GPIO_WritePin>
	        break;
 8000dd6:	e150      	b.n	800107a <display7SEG_LeftToRight+0x38a>
	    case 2:
	        HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin ,GPIO_PIN_RESET) ;
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2180      	movs	r1, #128	; 0x80
 8000ddc:	48a9      	ldr	r0, [pc, #676]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000dde:	f001 f978 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin ,GPIO_PIN_RESET) ;
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000de8:	48a6      	ldr	r0, [pc, #664]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000dea:	f001 f972 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin ,GPIO_PIN_SET) ;
 8000dee:	2201      	movs	r2, #1
 8000df0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000df4:	48a3      	ldr	r0, [pc, #652]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000df6:	f001 f96c 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin ,GPIO_PIN_RESET) ;
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e00:	48a0      	ldr	r0, [pc, #640]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000e02:	f001 f966 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin ,GPIO_PIN_RESET) ;
 8000e06:	2200      	movs	r2, #0
 8000e08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e0c:	489d      	ldr	r0, [pc, #628]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000e0e:	f001 f960 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin ,GPIO_PIN_SET) ;
 8000e12:	2201      	movs	r2, #1
 8000e14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e18:	489a      	ldr	r0, [pc, #616]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000e1a:	f001 f95a 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin ,GPIO_PIN_RESET) ;
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e24:	4897      	ldr	r0, [pc, #604]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000e26:	f001 f954 	bl	80020d2 <HAL_GPIO_WritePin>
	        break;
 8000e2a:	e126      	b.n	800107a <display7SEG_LeftToRight+0x38a>
	    case 3:
	        HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin ,GPIO_PIN_RESET) ;
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2180      	movs	r1, #128	; 0x80
 8000e30:	4894      	ldr	r0, [pc, #592]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000e32:	f001 f94e 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin ,GPIO_PIN_RESET) ;
 8000e36:	2200      	movs	r2, #0
 8000e38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e3c:	4891      	ldr	r0, [pc, #580]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000e3e:	f001 f948 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin ,GPIO_PIN_RESET) ;
 8000e42:	2200      	movs	r2, #0
 8000e44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e48:	488e      	ldr	r0, [pc, #568]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000e4a:	f001 f942 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin ,GPIO_PIN_RESET) ;
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e54:	488b      	ldr	r0, [pc, #556]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000e56:	f001 f93c 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin ,GPIO_PIN_SET) ;
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e60:	4888      	ldr	r0, [pc, #544]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000e62:	f001 f936 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin ,GPIO_PIN_SET) ;
 8000e66:	2201      	movs	r2, #1
 8000e68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e6c:	4885      	ldr	r0, [pc, #532]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000e6e:	f001 f930 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin ,GPIO_PIN_RESET) ;
 8000e72:	2200      	movs	r2, #0
 8000e74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e78:	4882      	ldr	r0, [pc, #520]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000e7a:	f001 f92a 	bl	80020d2 <HAL_GPIO_WritePin>
	        break;
 8000e7e:	e0fc      	b.n	800107a <display7SEG_LeftToRight+0x38a>
	    case 4:
	        HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin ,GPIO_PIN_SET) ;
 8000e80:	2201      	movs	r2, #1
 8000e82:	2180      	movs	r1, #128	; 0x80
 8000e84:	487f      	ldr	r0, [pc, #508]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000e86:	f001 f924 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin ,GPIO_PIN_RESET) ;
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e90:	487c      	ldr	r0, [pc, #496]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000e92:	f001 f91e 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin ,GPIO_PIN_RESET) ;
 8000e96:	2200      	movs	r2, #0
 8000e98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e9c:	4879      	ldr	r0, [pc, #484]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000e9e:	f001 f918 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin ,GPIO_PIN_SET) ;
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ea8:	4876      	ldr	r0, [pc, #472]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000eaa:	f001 f912 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin ,GPIO_PIN_SET) ;
 8000eae:	2201      	movs	r2, #1
 8000eb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eb4:	4873      	ldr	r0, [pc, #460]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000eb6:	f001 f90c 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin ,GPIO_PIN_RESET) ;
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ec0:	4870      	ldr	r0, [pc, #448]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000ec2:	f001 f906 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin ,GPIO_PIN_RESET) ;
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ecc:	486d      	ldr	r0, [pc, #436]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000ece:	f001 f900 	bl	80020d2 <HAL_GPIO_WritePin>
	        break;
 8000ed2:	e0d2      	b.n	800107a <display7SEG_LeftToRight+0x38a>
	    case 5:
	        HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin ,GPIO_PIN_RESET) ;
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2180      	movs	r1, #128	; 0x80
 8000ed8:	486a      	ldr	r0, [pc, #424]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000eda:	f001 f8fa 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin ,GPIO_PIN_SET) ;
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ee4:	4867      	ldr	r0, [pc, #412]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000ee6:	f001 f8f4 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin ,GPIO_PIN_RESET) ;
 8000eea:	2200      	movs	r2, #0
 8000eec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ef0:	4864      	ldr	r0, [pc, #400]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000ef2:	f001 f8ee 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin ,GPIO_PIN_RESET) ;
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000efc:	4861      	ldr	r0, [pc, #388]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000efe:	f001 f8e8 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin ,GPIO_PIN_SET) ;
 8000f02:	2201      	movs	r2, #1
 8000f04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f08:	485e      	ldr	r0, [pc, #376]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000f0a:	f001 f8e2 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin ,GPIO_PIN_RESET) ;
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f14:	485b      	ldr	r0, [pc, #364]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000f16:	f001 f8dc 	bl	80020d2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin ,GPIO_PIN_RESET) ;
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f20:	4858      	ldr	r0, [pc, #352]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000f22:	f001 f8d6 	bl	80020d2 <HAL_GPIO_WritePin>
	        break;
 8000f26:	e0a8      	b.n	800107a <display7SEG_LeftToRight+0x38a>
	    case 6:
		    HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin ,GPIO_PIN_RESET) ;
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2180      	movs	r1, #128	; 0x80
 8000f2c:	4855      	ldr	r0, [pc, #340]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000f2e:	f001 f8d0 	bl	80020d2 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin ,GPIO_PIN_SET) ;
 8000f32:	2201      	movs	r2, #1
 8000f34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f38:	4852      	ldr	r0, [pc, #328]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000f3a:	f001 f8ca 	bl	80020d2 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin ,GPIO_PIN_RESET) ;
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f44:	484f      	ldr	r0, [pc, #316]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000f46:	f001 f8c4 	bl	80020d2 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin ,GPIO_PIN_RESET) ;
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f50:	484c      	ldr	r0, [pc, #304]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000f52:	f001 f8be 	bl	80020d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin ,GPIO_PIN_RESET) ;
 8000f56:	2200      	movs	r2, #0
 8000f58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f5c:	4849      	ldr	r0, [pc, #292]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000f5e:	f001 f8b8 	bl	80020d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin ,GPIO_PIN_RESET) ;
 8000f62:	2200      	movs	r2, #0
 8000f64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f68:	4846      	ldr	r0, [pc, #280]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000f6a:	f001 f8b2 	bl	80020d2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin ,GPIO_PIN_RESET) ;
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f74:	4843      	ldr	r0, [pc, #268]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000f76:	f001 f8ac 	bl	80020d2 <HAL_GPIO_WritePin>
			break;
 8000f7a:	e07e      	b.n	800107a <display7SEG_LeftToRight+0x38a>
	    case 7:
	    	HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin ,GPIO_PIN_RESET) ;
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2180      	movs	r1, #128	; 0x80
 8000f80:	4840      	ldr	r0, [pc, #256]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000f82:	f001 f8a6 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin ,GPIO_PIN_RESET) ;
 8000f86:	2200      	movs	r2, #0
 8000f88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f8c:	483d      	ldr	r0, [pc, #244]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000f8e:	f001 f8a0 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin ,GPIO_PIN_RESET) ;
 8000f92:	2200      	movs	r2, #0
 8000f94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f98:	483a      	ldr	r0, [pc, #232]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000f9a:	f001 f89a 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin ,GPIO_PIN_SET) ;
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fa4:	4837      	ldr	r0, [pc, #220]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000fa6:	f001 f894 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin ,GPIO_PIN_SET) ;
 8000faa:	2201      	movs	r2, #1
 8000fac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fb0:	4834      	ldr	r0, [pc, #208]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000fb2:	f001 f88e 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin ,GPIO_PIN_SET) ;
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fbc:	4831      	ldr	r0, [pc, #196]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000fbe:	f001 f888 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin ,GPIO_PIN_SET) ;
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fc8:	482e      	ldr	r0, [pc, #184]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000fca:	f001 f882 	bl	80020d2 <HAL_GPIO_WritePin>
	    	break;
 8000fce:	e054      	b.n	800107a <display7SEG_LeftToRight+0x38a>
	    case 8:
	    	HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin ,GPIO_PIN_RESET) ;
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2180      	movs	r1, #128	; 0x80
 8000fd4:	482b      	ldr	r0, [pc, #172]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000fd6:	f001 f87c 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin ,GPIO_PIN_RESET) ;
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fe0:	4828      	ldr	r0, [pc, #160]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000fe2:	f001 f876 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin ,GPIO_PIN_RESET) ;
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fec:	4825      	ldr	r0, [pc, #148]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000fee:	f001 f870 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin ,GPIO_PIN_RESET) ;
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ff8:	4822      	ldr	r0, [pc, #136]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8000ffa:	f001 f86a 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin ,GPIO_PIN_RESET) ;
 8000ffe:	2200      	movs	r2, #0
 8001000:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001004:	481f      	ldr	r0, [pc, #124]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8001006:	f001 f864 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin ,GPIO_PIN_RESET) ;
 800100a:	2200      	movs	r2, #0
 800100c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001010:	481c      	ldr	r0, [pc, #112]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8001012:	f001 f85e 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin ,GPIO_PIN_RESET) ;
 8001016:	2200      	movs	r2, #0
 8001018:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800101c:	4819      	ldr	r0, [pc, #100]	; (8001084 <display7SEG_LeftToRight+0x394>)
 800101e:	f001 f858 	bl	80020d2 <HAL_GPIO_WritePin>
	    	break;
 8001022:	e02a      	b.n	800107a <display7SEG_LeftToRight+0x38a>
	    case 9:
	    	HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin ,GPIO_PIN_RESET) ;
 8001024:	2200      	movs	r2, #0
 8001026:	2180      	movs	r1, #128	; 0x80
 8001028:	4816      	ldr	r0, [pc, #88]	; (8001084 <display7SEG_LeftToRight+0x394>)
 800102a:	f001 f852 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin ,GPIO_PIN_RESET) ;
 800102e:	2200      	movs	r2, #0
 8001030:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001034:	4813      	ldr	r0, [pc, #76]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8001036:	f001 f84c 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin ,GPIO_PIN_RESET) ;
 800103a:	2200      	movs	r2, #0
 800103c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001040:	4810      	ldr	r0, [pc, #64]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8001042:	f001 f846 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin ,GPIO_PIN_RESET) ;
 8001046:	2200      	movs	r2, #0
 8001048:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800104c:	480d      	ldr	r0, [pc, #52]	; (8001084 <display7SEG_LeftToRight+0x394>)
 800104e:	f001 f840 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin ,GPIO_PIN_SET) ;
 8001052:	2201      	movs	r2, #1
 8001054:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001058:	480a      	ldr	r0, [pc, #40]	; (8001084 <display7SEG_LeftToRight+0x394>)
 800105a:	f001 f83a 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin ,GPIO_PIN_RESET) ;
 800105e:	2200      	movs	r2, #0
 8001060:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001064:	4807      	ldr	r0, [pc, #28]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8001066:	f001 f834 	bl	80020d2 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin ,GPIO_PIN_RESET) ;
 800106a:	2200      	movs	r2, #0
 800106c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001070:	4804      	ldr	r0, [pc, #16]	; (8001084 <display7SEG_LeftToRight+0x394>)
 8001072:	f001 f82e 	bl	80020d2 <HAL_GPIO_WritePin>
			break;
 8001076:	e000      	b.n	800107a <display7SEG_LeftToRight+0x38a>
	    default:
	    	break;
 8001078:	bf00      	nop
	}
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40010800 	.word	0x40010800

08001088 <displayTopToBottomLED>:

void displayTopToBottomLED(enum LedState state_1){
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
	switch(state_1){
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	2b03      	cmp	r3, #3
 8001096:	d84b      	bhi.n	8001130 <displayTopToBottomLED+0xa8>
 8001098:	a201      	add	r2, pc, #4	; (adr r2, 80010a0 <displayTopToBottomLED+0x18>)
 800109a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800109e:	bf00      	nop
 80010a0:	080010b1 	.word	0x080010b1
 80010a4:	080010d1 	.word	0x080010d1
 80010a8:	08001111 	.word	0x08001111
 80010ac:	080010f1 	.word	0x080010f1
		case LED_INIT:
			 HAL_GPIO_WritePin( TB_GREEN_GPIO_Port , TB_GREEN_Pin , GPIO_PIN_SET) ;
 80010b0:	2201      	movs	r2, #1
 80010b2:	2120      	movs	r1, #32
 80010b4:	4821      	ldr	r0, [pc, #132]	; (800113c <displayTopToBottomLED+0xb4>)
 80010b6:	f001 f80c 	bl	80020d2 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( TB_YELLOW_GPIO_Port , TB_YELLOW_Pin , GPIO_PIN_SET ) ;
 80010ba:	2201      	movs	r2, #1
 80010bc:	2110      	movs	r1, #16
 80010be:	481f      	ldr	r0, [pc, #124]	; (800113c <displayTopToBottomLED+0xb4>)
 80010c0:	f001 f807 	bl	80020d2 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( TB_RED_GPIO_Port , TB_RED_Pin , GPIO_PIN_SET ) ;
 80010c4:	2201      	movs	r2, #1
 80010c6:	2108      	movs	r1, #8
 80010c8:	481c      	ldr	r0, [pc, #112]	; (800113c <displayTopToBottomLED+0xb4>)
 80010ca:	f001 f802 	bl	80020d2 <HAL_GPIO_WritePin>
			 break;
 80010ce:	e030      	b.n	8001132 <displayTopToBottomLED+0xaa>
		case RED:
			 HAL_GPIO_WritePin( TB_GREEN_GPIO_Port , TB_GREEN_Pin , GPIO_PIN_SET) ;
 80010d0:	2201      	movs	r2, #1
 80010d2:	2120      	movs	r1, #32
 80010d4:	4819      	ldr	r0, [pc, #100]	; (800113c <displayTopToBottomLED+0xb4>)
 80010d6:	f000 fffc 	bl	80020d2 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( TB_YELLOW_GPIO_Port , TB_YELLOW_Pin , GPIO_PIN_SET ) ;
 80010da:	2201      	movs	r2, #1
 80010dc:	2110      	movs	r1, #16
 80010de:	4817      	ldr	r0, [pc, #92]	; (800113c <displayTopToBottomLED+0xb4>)
 80010e0:	f000 fff7 	bl	80020d2 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( TB_RED_GPIO_Port , TB_RED_Pin , GPIO_PIN_RESET ) ;
 80010e4:	2200      	movs	r2, #0
 80010e6:	2108      	movs	r1, #8
 80010e8:	4814      	ldr	r0, [pc, #80]	; (800113c <displayTopToBottomLED+0xb4>)
 80010ea:	f000 fff2 	bl	80020d2 <HAL_GPIO_WritePin>
			 break;
 80010ee:	e020      	b.n	8001132 <displayTopToBottomLED+0xaa>
		case YELLOW:
			 HAL_GPIO_WritePin( TB_GREEN_GPIO_Port , TB_GREEN_Pin , GPIO_PIN_SET) ;
 80010f0:	2201      	movs	r2, #1
 80010f2:	2120      	movs	r1, #32
 80010f4:	4811      	ldr	r0, [pc, #68]	; (800113c <displayTopToBottomLED+0xb4>)
 80010f6:	f000 ffec 	bl	80020d2 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( TB_YELLOW_GPIO_Port , TB_YELLOW_Pin , GPIO_PIN_RESET ) ;
 80010fa:	2200      	movs	r2, #0
 80010fc:	2110      	movs	r1, #16
 80010fe:	480f      	ldr	r0, [pc, #60]	; (800113c <displayTopToBottomLED+0xb4>)
 8001100:	f000 ffe7 	bl	80020d2 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( TB_RED_GPIO_Port , TB_RED_Pin , GPIO_PIN_SET ) ;
 8001104:	2201      	movs	r2, #1
 8001106:	2108      	movs	r1, #8
 8001108:	480c      	ldr	r0, [pc, #48]	; (800113c <displayTopToBottomLED+0xb4>)
 800110a:	f000 ffe2 	bl	80020d2 <HAL_GPIO_WritePin>
			 break;
 800110e:	e010      	b.n	8001132 <displayTopToBottomLED+0xaa>
		case GREEN:
			 HAL_GPIO_WritePin( TB_GREEN_GPIO_Port , TB_GREEN_Pin , GPIO_PIN_RESET) ;
 8001110:	2200      	movs	r2, #0
 8001112:	2120      	movs	r1, #32
 8001114:	4809      	ldr	r0, [pc, #36]	; (800113c <displayTopToBottomLED+0xb4>)
 8001116:	f000 ffdc 	bl	80020d2 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( TB_YELLOW_GPIO_Port , TB_YELLOW_Pin , GPIO_PIN_SET ) ;
 800111a:	2201      	movs	r2, #1
 800111c:	2110      	movs	r1, #16
 800111e:	4807      	ldr	r0, [pc, #28]	; (800113c <displayTopToBottomLED+0xb4>)
 8001120:	f000 ffd7 	bl	80020d2 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( TB_RED_GPIO_Port , TB_RED_Pin , GPIO_PIN_SET ) ;
 8001124:	2201      	movs	r2, #1
 8001126:	2108      	movs	r1, #8
 8001128:	4804      	ldr	r0, [pc, #16]	; (800113c <displayTopToBottomLED+0xb4>)
 800112a:	f000 ffd2 	bl	80020d2 <HAL_GPIO_WritePin>
			 break;
 800112e:	e000      	b.n	8001132 <displayTopToBottomLED+0xaa>
		default:
			 break;
 8001130:	bf00      	nop
	}
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40010c00 	.word	0x40010c00

08001140 <displayLeftToRightLED>:

void displayLeftToRightLED(enum LedState state_2){
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
	switch(state_2){
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	2b03      	cmp	r3, #3
 800114e:	d84f      	bhi.n	80011f0 <displayLeftToRightLED+0xb0>
 8001150:	a201      	add	r2, pc, #4	; (adr r2, 8001158 <displayLeftToRightLED+0x18>)
 8001152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001156:	bf00      	nop
 8001158:	08001169 	.word	0x08001169
 800115c:	0800118b 	.word	0x0800118b
 8001160:	080011cf 	.word	0x080011cf
 8001164:	080011ad 	.word	0x080011ad
		case LED_INIT:
			 HAL_GPIO_WritePin( LR_GREEN_GPIO_Port , LR_GREEN_Pin , GPIO_PIN_SET) ;
 8001168:	2201      	movs	r2, #1
 800116a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800116e:	4823      	ldr	r0, [pc, #140]	; (80011fc <displayLeftToRightLED+0xbc>)
 8001170:	f000 ffaf 	bl	80020d2 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( LR_YELLOW_GPIO_Port , LR_YELLOW_Pin , GPIO_PIN_SET ) ;
 8001174:	2201      	movs	r2, #1
 8001176:	2180      	movs	r1, #128	; 0x80
 8001178:	4820      	ldr	r0, [pc, #128]	; (80011fc <displayLeftToRightLED+0xbc>)
 800117a:	f000 ffaa 	bl	80020d2 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( LR_RED_GPIO_Port , LR_RED_Pin , GPIO_PIN_SET ) ;
 800117e:	2201      	movs	r2, #1
 8001180:	2140      	movs	r1, #64	; 0x40
 8001182:	481e      	ldr	r0, [pc, #120]	; (80011fc <displayLeftToRightLED+0xbc>)
 8001184:	f000 ffa5 	bl	80020d2 <HAL_GPIO_WritePin>
			 break;
 8001188:	e033      	b.n	80011f2 <displayLeftToRightLED+0xb2>
		case RED:
			 HAL_GPIO_WritePin( LR_GREEN_GPIO_Port , LR_GREEN_Pin , GPIO_PIN_SET) ;
 800118a:	2201      	movs	r2, #1
 800118c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001190:	481a      	ldr	r0, [pc, #104]	; (80011fc <displayLeftToRightLED+0xbc>)
 8001192:	f000 ff9e 	bl	80020d2 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( LR_YELLOW_GPIO_Port , LR_YELLOW_Pin , GPIO_PIN_SET ) ;
 8001196:	2201      	movs	r2, #1
 8001198:	2180      	movs	r1, #128	; 0x80
 800119a:	4818      	ldr	r0, [pc, #96]	; (80011fc <displayLeftToRightLED+0xbc>)
 800119c:	f000 ff99 	bl	80020d2 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( LR_RED_GPIO_Port , LR_RED_Pin , GPIO_PIN_RESET ) ;
 80011a0:	2200      	movs	r2, #0
 80011a2:	2140      	movs	r1, #64	; 0x40
 80011a4:	4815      	ldr	r0, [pc, #84]	; (80011fc <displayLeftToRightLED+0xbc>)
 80011a6:	f000 ff94 	bl	80020d2 <HAL_GPIO_WritePin>
			 break;
 80011aa:	e022      	b.n	80011f2 <displayLeftToRightLED+0xb2>
		case YELLOW:
			 HAL_GPIO_WritePin( LR_GREEN_GPIO_Port , LR_GREEN_Pin , GPIO_PIN_SET) ;
 80011ac:	2201      	movs	r2, #1
 80011ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011b2:	4812      	ldr	r0, [pc, #72]	; (80011fc <displayLeftToRightLED+0xbc>)
 80011b4:	f000 ff8d 	bl	80020d2 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( LR_YELLOW_GPIO_Port , LR_YELLOW_Pin , GPIO_PIN_RESET ) ;
 80011b8:	2200      	movs	r2, #0
 80011ba:	2180      	movs	r1, #128	; 0x80
 80011bc:	480f      	ldr	r0, [pc, #60]	; (80011fc <displayLeftToRightLED+0xbc>)
 80011be:	f000 ff88 	bl	80020d2 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( LR_RED_GPIO_Port , LR_RED_Pin , GPIO_PIN_SET ) ;
 80011c2:	2201      	movs	r2, #1
 80011c4:	2140      	movs	r1, #64	; 0x40
 80011c6:	480d      	ldr	r0, [pc, #52]	; (80011fc <displayLeftToRightLED+0xbc>)
 80011c8:	f000 ff83 	bl	80020d2 <HAL_GPIO_WritePin>
			 break;
 80011cc:	e011      	b.n	80011f2 <displayLeftToRightLED+0xb2>
		case GREEN:
			 HAL_GPIO_WritePin( LR_GREEN_GPIO_Port , LR_GREEN_Pin , GPIO_PIN_RESET) ;
 80011ce:	2200      	movs	r2, #0
 80011d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d4:	4809      	ldr	r0, [pc, #36]	; (80011fc <displayLeftToRightLED+0xbc>)
 80011d6:	f000 ff7c 	bl	80020d2 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( LR_YELLOW_GPIO_Port , LR_YELLOW_Pin , GPIO_PIN_SET ) ;
 80011da:	2201      	movs	r2, #1
 80011dc:	2180      	movs	r1, #128	; 0x80
 80011de:	4807      	ldr	r0, [pc, #28]	; (80011fc <displayLeftToRightLED+0xbc>)
 80011e0:	f000 ff77 	bl	80020d2 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( LR_RED_GPIO_Port , LR_RED_Pin , GPIO_PIN_SET ) ;
 80011e4:	2201      	movs	r2, #1
 80011e6:	2140      	movs	r1, #64	; 0x40
 80011e8:	4804      	ldr	r0, [pc, #16]	; (80011fc <displayLeftToRightLED+0xbc>)
 80011ea:	f000 ff72 	bl	80020d2 <HAL_GPIO_WritePin>
			 break;
 80011ee:	e000      	b.n	80011f2 <displayLeftToRightLED+0xb2>
		default:
			 break;
 80011f0:	bf00      	nop
	}
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40010c00 	.word	0x40010c00

08001200 <toggleLeds>:

void toggleLeds(enum LedState state){
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
	switch(state){
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	2b03      	cmp	r3, #3
 800120e:	d023      	beq.n	8001258 <toggleLeds+0x58>
 8001210:	2b03      	cmp	r3, #3
 8001212:	dc5d      	bgt.n	80012d0 <toggleLeds+0xd0>
 8001214:	2b01      	cmp	r3, #1
 8001216:	d03d      	beq.n	8001294 <toggleLeds+0x94>
 8001218:	2b02      	cmp	r3, #2
 800121a:	d159      	bne.n	80012d0 <toggleLeds+0xd0>
	case GREEN:
		HAL_GPIO_WritePin(TB_RED_GPIO_Port, TB_RED_Pin, SET);
 800121c:	2201      	movs	r2, #1
 800121e:	2108      	movs	r1, #8
 8001220:	482e      	ldr	r0, [pc, #184]	; (80012dc <toggleLeds+0xdc>)
 8001222:	f000 ff56 	bl	80020d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TB_YELLOW_GPIO_Port, TB_YELLOW_Pin, SET);
 8001226:	2201      	movs	r2, #1
 8001228:	2110      	movs	r1, #16
 800122a:	482c      	ldr	r0, [pc, #176]	; (80012dc <toggleLeds+0xdc>)
 800122c:	f000 ff51 	bl	80020d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LR_RED_GPIO_Port, LR_RED_Pin, SET);
 8001230:	2201      	movs	r2, #1
 8001232:	2140      	movs	r1, #64	; 0x40
 8001234:	4829      	ldr	r0, [pc, #164]	; (80012dc <toggleLeds+0xdc>)
 8001236:	f000 ff4c 	bl	80020d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LR_YELLOW_GPIO_Port, LR_YELLOW_Pin, SET);
 800123a:	2201      	movs	r2, #1
 800123c:	2180      	movs	r1, #128	; 0x80
 800123e:	4827      	ldr	r0, [pc, #156]	; (80012dc <toggleLeds+0xdc>)
 8001240:	f000 ff47 	bl	80020d2 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin( TB_GREEN_GPIO_Port , TB_GREEN_Pin) ;
 8001244:	2120      	movs	r1, #32
 8001246:	4825      	ldr	r0, [pc, #148]	; (80012dc <toggleLeds+0xdc>)
 8001248:	f000 ff5b 	bl	8002102 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin( LR_GREEN_GPIO_Port , LR_GREEN_Pin) ;
 800124c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001250:	4822      	ldr	r0, [pc, #136]	; (80012dc <toggleLeds+0xdc>)
 8001252:	f000 ff56 	bl	8002102 <HAL_GPIO_TogglePin>
		break;
 8001256:	e03c      	b.n	80012d2 <toggleLeds+0xd2>
	case YELLOW:
		HAL_GPIO_WritePin(TB_RED_GPIO_Port, TB_RED_Pin, SET);
 8001258:	2201      	movs	r2, #1
 800125a:	2108      	movs	r1, #8
 800125c:	481f      	ldr	r0, [pc, #124]	; (80012dc <toggleLeds+0xdc>)
 800125e:	f000 ff38 	bl	80020d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TB_GREEN_GPIO_Port, TB_GREEN_Pin, SET);
 8001262:	2201      	movs	r2, #1
 8001264:	2120      	movs	r1, #32
 8001266:	481d      	ldr	r0, [pc, #116]	; (80012dc <toggleLeds+0xdc>)
 8001268:	f000 ff33 	bl	80020d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LR_RED_GPIO_Port, LR_RED_Pin, SET);
 800126c:	2201      	movs	r2, #1
 800126e:	2140      	movs	r1, #64	; 0x40
 8001270:	481a      	ldr	r0, [pc, #104]	; (80012dc <toggleLeds+0xdc>)
 8001272:	f000 ff2e 	bl	80020d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LR_GREEN_GPIO_Port, LR_GREEN_Pin, SET);
 8001276:	2201      	movs	r2, #1
 8001278:	f44f 7180 	mov.w	r1, #256	; 0x100
 800127c:	4817      	ldr	r0, [pc, #92]	; (80012dc <toggleLeds+0xdc>)
 800127e:	f000 ff28 	bl	80020d2 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin( TB_YELLOW_GPIO_Port , TB_YELLOW_Pin) ;
 8001282:	2110      	movs	r1, #16
 8001284:	4815      	ldr	r0, [pc, #84]	; (80012dc <toggleLeds+0xdc>)
 8001286:	f000 ff3c 	bl	8002102 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin( LR_YELLOW_GPIO_Port , LR_YELLOW_Pin) ;
 800128a:	2180      	movs	r1, #128	; 0x80
 800128c:	4813      	ldr	r0, [pc, #76]	; (80012dc <toggleLeds+0xdc>)
 800128e:	f000 ff38 	bl	8002102 <HAL_GPIO_TogglePin>
		break;
 8001292:	e01e      	b.n	80012d2 <toggleLeds+0xd2>
	case RED:
		HAL_GPIO_WritePin(TB_YELLOW_GPIO_Port, TB_YELLOW_Pin, SET);
 8001294:	2201      	movs	r2, #1
 8001296:	2110      	movs	r1, #16
 8001298:	4810      	ldr	r0, [pc, #64]	; (80012dc <toggleLeds+0xdc>)
 800129a:	f000 ff1a 	bl	80020d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TB_GREEN_GPIO_Port, TB_GREEN_Pin, SET);
 800129e:	2201      	movs	r2, #1
 80012a0:	2120      	movs	r1, #32
 80012a2:	480e      	ldr	r0, [pc, #56]	; (80012dc <toggleLeds+0xdc>)
 80012a4:	f000 ff15 	bl	80020d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LR_YELLOW_GPIO_Port, LR_YELLOW_Pin, SET);
 80012a8:	2201      	movs	r2, #1
 80012aa:	2180      	movs	r1, #128	; 0x80
 80012ac:	480b      	ldr	r0, [pc, #44]	; (80012dc <toggleLeds+0xdc>)
 80012ae:	f000 ff10 	bl	80020d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LR_GREEN_GPIO_Port, LR_GREEN_Pin, SET);
 80012b2:	2201      	movs	r2, #1
 80012b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012b8:	4808      	ldr	r0, [pc, #32]	; (80012dc <toggleLeds+0xdc>)
 80012ba:	f000 ff0a 	bl	80020d2 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin( TB_RED_GPIO_Port , TB_RED_Pin) ;
 80012be:	2108      	movs	r1, #8
 80012c0:	4806      	ldr	r0, [pc, #24]	; (80012dc <toggleLeds+0xdc>)
 80012c2:	f000 ff1e 	bl	8002102 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin( LR_RED_GPIO_Port , LR_RED_Pin) ;
 80012c6:	2140      	movs	r1, #64	; 0x40
 80012c8:	4804      	ldr	r0, [pc, #16]	; (80012dc <toggleLeds+0xdc>)
 80012ca:	f000 ff1a 	bl	8002102 <HAL_GPIO_TogglePin>
		break;
 80012ce:	e000      	b.n	80012d2 <toggleLeds+0xd2>
	default:
		break;
 80012d0:	bf00      	nop
	}
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40010c00 	.word	0x40010c00

080012e0 <enable0>:

void enable0(){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 80012e4:	2200      	movs	r2, #0
 80012e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012ea:	4805      	ldr	r0, [pc, #20]	; (8001300 <enable0+0x20>)
 80012ec:	f000 fef1 	bl	80020d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80012f0:	2201      	movs	r2, #1
 80012f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012f6:	4802      	ldr	r0, [pc, #8]	; (8001300 <enable0+0x20>)
 80012f8:	f000 feeb 	bl	80020d2 <HAL_GPIO_WritePin>
}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40010c00 	.word	0x40010c00

08001304 <enable1>:

void enable1(){
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8001308:	2201      	movs	r2, #1
 800130a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800130e:	4805      	ldr	r0, [pc, #20]	; (8001324 <enable1+0x20>)
 8001310:	f000 fedf 	bl	80020d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8001314:	2200      	movs	r2, #0
 8001316:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800131a:	4802      	ldr	r0, [pc, #8]	; (8001324 <enable1+0x20>)
 800131c:	f000 fed9 	bl	80020d2 <HAL_GPIO_WritePin>
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40010c00 	.word	0x40010c00

08001328 <enable2>:

void enable2(){
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 800132c:	2200      	movs	r2, #0
 800132e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <enable2+0x20>)
 8001334:	f000 fecd 	bl	80020d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8001338:	2201      	movs	r2, #1
 800133a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800133e:	4802      	ldr	r0, [pc, #8]	; (8001348 <enable2+0x20>)
 8001340:	f000 fec7 	bl	80020d2 <HAL_GPIO_WritePin>
}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40010c00 	.word	0x40010c00

0800134c <enable3>:

void enable3(){
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8001350:	2201      	movs	r2, #1
 8001352:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001356:	4805      	ldr	r0, [pc, #20]	; (800136c <enable3+0x20>)
 8001358:	f000 febb 	bl	80020d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 800135c:	2200      	movs	r2, #0
 800135e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001362:	4802      	ldr	r0, [pc, #8]	; (800136c <enable3+0x20>)
 8001364:	f000 feb5 	bl	80020d2 <HAL_GPIO_WritePin>
}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40010c00 	.word	0x40010c00

08001370 <showTimeDelay_First>:

void showTimeDelay_First(int first, int second){
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
	enable0();
 800137a:	f7ff ffb1 	bl	80012e0 <enable0>
	display7SEG_TopToBottom(first/10);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a0c      	ldr	r2, [pc, #48]	; (80013b4 <showTimeDelay_First+0x44>)
 8001382:	fb82 1203 	smull	r1, r2, r2, r3
 8001386:	1092      	asrs	r2, r2, #2
 8001388:	17db      	asrs	r3, r3, #31
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fb1f 	bl	80009d0 <display7SEG_TopToBottom>
	enable2();
 8001392:	f7ff ffc9 	bl	8001328 <enable2>
	display7SEG_LeftToRight(second/10);
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	4a06      	ldr	r2, [pc, #24]	; (80013b4 <showTimeDelay_First+0x44>)
 800139a:	fb82 1203 	smull	r1, r2, r2, r3
 800139e:	1092      	asrs	r2, r2, #2
 80013a0:	17db      	asrs	r3, r3, #31
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fca3 	bl	8000cf0 <display7SEG_LeftToRight>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	66666667 	.word	0x66666667

080013b8 <showTimeDelay_Second>:

void showTimeDelay_Second(int first, int second){
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
	enable1();
 80013c2:	f7ff ff9f 	bl	8001304 <enable1>
	display7SEG_TopToBottom(first%10);
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <showTimeDelay_Second+0x58>)
 80013ca:	fb83 1302 	smull	r1, r3, r3, r2
 80013ce:	1099      	asrs	r1, r3, #2
 80013d0:	17d3      	asrs	r3, r2, #31
 80013d2:	1ac9      	subs	r1, r1, r3
 80013d4:	460b      	mov	r3, r1
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	440b      	add	r3, r1
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	1ad1      	subs	r1, r2, r3
 80013de:	4608      	mov	r0, r1
 80013e0:	f7ff faf6 	bl	80009d0 <display7SEG_TopToBottom>
	enable3();
 80013e4:	f7ff ffb2 	bl	800134c <enable3>
	display7SEG_LeftToRight(second%10);
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <showTimeDelay_Second+0x58>)
 80013ec:	fb83 1302 	smull	r1, r3, r3, r2
 80013f0:	1099      	asrs	r1, r3, #2
 80013f2:	17d3      	asrs	r3, r2, #31
 80013f4:	1ac9      	subs	r1, r1, r3
 80013f6:	460b      	mov	r3, r1
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	440b      	add	r3, r1
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	1ad1      	subs	r1, r2, r3
 8001400:	4608      	mov	r0, r1
 8001402:	f7ff fc75 	bl	8000cf0 <display7SEG_LeftToRight>
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	66666667 	.word	0x66666667

08001414 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001418:	f000 fb5a 	bl	8001ad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800141c:	f000 f82a 	bl	8001474 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001420:	f000 f8b0 	bl	8001584 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001424:	f000 f862 	bl	80014ec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8001428:	480e      	ldr	r0, [pc, #56]	; (8001464 <main+0x50>)
 800142a:	f001 faaf 	bl	800298c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setValues();
 800142e:	f7ff fa73 	bl	8000918 <setValues>
  displayTopToBottomLED(LED_INIT);
 8001432:	2000      	movs	r0, #0
 8001434:	f7ff fe28 	bl	8001088 <displayTopToBottomLED>
  displayLeftToRightLED(LED_INIT);
 8001438:	2000      	movs	r0, #0
 800143a:	f7ff fe81 	bl	8001140 <displayLeftToRightLED>

  SCH_Add_Task(updateCountDown, 100, 100);
 800143e:	2264      	movs	r2, #100	; 0x64
 8001440:	2164      	movs	r1, #100	; 0x64
 8001442:	4809      	ldr	r0, [pc, #36]	; (8001468 <main+0x54>)
 8001444:	f000 f984 	bl	8001750 <SCH_Add_Task>
  SCH_Add_Task(fsm_auto, 0, 1);
 8001448:	2201      	movs	r2, #1
 800144a:	2100      	movs	r1, #0
 800144c:	4807      	ldr	r0, [pc, #28]	; (800146c <main+0x58>)
 800144e:	f000 f97f 	bl	8001750 <SCH_Add_Task>
  SCH_Add_Task(fsm_manual, 0, 25);
 8001452:	2219      	movs	r2, #25
 8001454:	2100      	movs	r1, #0
 8001456:	4806      	ldr	r0, [pc, #24]	; (8001470 <main+0x5c>)
 8001458:	f000 f97a 	bl	8001750 <SCH_Add_Task>

  while (1){
	  SCH_Dispatch_Tasks();
 800145c:	f000 fa22 	bl	80018a4 <SCH_Dispatch_Tasks>
 8001460:	e7fc      	b.n	800145c <main+0x48>
 8001462:	bf00      	nop
 8001464:	20000110 	.word	0x20000110
 8001468:	080002bd 	.word	0x080002bd
 800146c:	080002e5 	.word	0x080002e5
 8001470:	08000899 	.word	0x08000899

08001474 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b090      	sub	sp, #64	; 0x40
 8001478:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800147a:	f107 0318 	add.w	r3, r7, #24
 800147e:	2228      	movs	r2, #40	; 0x28
 8001480:	2100      	movs	r1, #0
 8001482:	4618      	mov	r0, r3
 8001484:	f001 fe48 	bl	8003118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
 8001494:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001496:	2302      	movs	r3, #2
 8001498:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800149a:	2301      	movs	r3, #1
 800149c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800149e:	2310      	movs	r3, #16
 80014a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a6:	f107 0318 	add.w	r3, r7, #24
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 fe42 	bl	8002134 <HAL_RCC_OscConfig>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <SystemClock_Config+0x46>
  {
    Error_Handler();
 80014b6:	f000 f8d3 	bl	8001660 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ba:	230f      	movs	r3, #15
 80014bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014be:	2300      	movs	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f001 f8ae 	bl	8002634 <HAL_RCC_ClockConfig>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80014de:	f000 f8bf 	bl	8001660 <Error_Handler>
  }
}
 80014e2:	bf00      	nop
 80014e4:	3740      	adds	r7, #64	; 0x40
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f2:	f107 0308 	add.w	r3, r7, #8
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001500:	463b      	mov	r3, r7
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001508:	4b1d      	ldr	r3, [pc, #116]	; (8001580 <MX_TIM2_Init+0x94>)
 800150a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800150e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001510:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <MX_TIM2_Init+0x94>)
 8001512:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001516:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001518:	4b19      	ldr	r3, [pc, #100]	; (8001580 <MX_TIM2_Init+0x94>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800151e:	4b18      	ldr	r3, [pc, #96]	; (8001580 <MX_TIM2_Init+0x94>)
 8001520:	2209      	movs	r2, #9
 8001522:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001524:	4b16      	ldr	r3, [pc, #88]	; (8001580 <MX_TIM2_Init+0x94>)
 8001526:	2200      	movs	r2, #0
 8001528:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800152a:	4b15      	ldr	r3, [pc, #84]	; (8001580 <MX_TIM2_Init+0x94>)
 800152c:	2200      	movs	r2, #0
 800152e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001530:	4813      	ldr	r0, [pc, #76]	; (8001580 <MX_TIM2_Init+0x94>)
 8001532:	f001 f9db 	bl	80028ec <HAL_TIM_Base_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800153c:	f000 f890 	bl	8001660 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001544:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001546:	f107 0308 	add.w	r3, r7, #8
 800154a:	4619      	mov	r1, r3
 800154c:	480c      	ldr	r0, [pc, #48]	; (8001580 <MX_TIM2_Init+0x94>)
 800154e:	f001 fb59 	bl	8002c04 <HAL_TIM_ConfigClockSource>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001558:	f000 f882 	bl	8001660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800155c:	2300      	movs	r3, #0
 800155e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001564:	463b      	mov	r3, r7
 8001566:	4619      	mov	r1, r3
 8001568:	4805      	ldr	r0, [pc, #20]	; (8001580 <MX_TIM2_Init+0x94>)
 800156a:	f001 fd31 	bl	8002fd0 <HAL_TIMEx_MasterConfigSynchronization>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001574:	f000 f874 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001578:	bf00      	nop
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000110 	.word	0x20000110

08001584 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158a:	f107 0308 	add.w	r3, r7, #8
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001598:	4b28      	ldr	r3, [pc, #160]	; (800163c <MX_GPIO_Init+0xb8>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	4a27      	ldr	r2, [pc, #156]	; (800163c <MX_GPIO_Init+0xb8>)
 800159e:	f043 0304 	orr.w	r3, r3, #4
 80015a2:	6193      	str	r3, [r2, #24]
 80015a4:	4b25      	ldr	r3, [pc, #148]	; (800163c <MX_GPIO_Init+0xb8>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	607b      	str	r3, [r7, #4]
 80015ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b0:	4b22      	ldr	r3, [pc, #136]	; (800163c <MX_GPIO_Init+0xb8>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	4a21      	ldr	r2, [pc, #132]	; (800163c <MX_GPIO_Init+0xb8>)
 80015b6:	f043 0308 	orr.w	r3, r3, #8
 80015ba:	6193      	str	r3, [r2, #24]
 80015bc:	4b1f      	ldr	r3, [pc, #124]	; (800163c <MX_GPIO_Init+0xb8>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	f003 0308 	and.w	r3, r3, #8
 80015c4:	603b      	str	r3, [r7, #0]
 80015c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A1_Pin|B1_Pin|C1_Pin|D1_Pin
 80015c8:	2200      	movs	r2, #0
 80015ca:	f643 71ff 	movw	r1, #16383	; 0x3fff
 80015ce:	481c      	ldr	r0, [pc, #112]	; (8001640 <MX_GPIO_Init+0xbc>)
 80015d0:	f000 fd7f 	bl	80020d2 <HAL_GPIO_WritePin>
                          |E1_Pin|F1_Pin|G1_Pin|A2_Pin
                          |B2_Pin|C2_Pin|D2_Pin|E2_Pin
                          |F2_Pin|G2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN1_Pin|EN2_Pin|EN3_Pin|TB_RED_Pin
 80015d4:	2200      	movs	r2, #0
 80015d6:	f641 71f8 	movw	r1, #8184	; 0x1ff8
 80015da:	481a      	ldr	r0, [pc, #104]	; (8001644 <MX_GPIO_Init+0xc0>)
 80015dc:	f000 fd79 	bl	80020d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A1_Pin B1_Pin C1_Pin D1_Pin
                           E1_Pin F1_Pin G1_Pin A2_Pin
                           B2_Pin C2_Pin D2_Pin E2_Pin
                           F2_Pin G2_Pin */
  GPIO_InitStruct.Pin = A1_Pin|B1_Pin|C1_Pin|D1_Pin
 80015e0:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80015e4:	60bb      	str	r3, [r7, #8]
                          |E1_Pin|F1_Pin|G1_Pin|A2_Pin
                          |B2_Pin|C2_Pin|D2_Pin|E2_Pin
                          |F2_Pin|G2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e6:	2301      	movs	r3, #1
 80015e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2302      	movs	r3, #2
 80015f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f2:	f107 0308 	add.w	r3, r7, #8
 80015f6:	4619      	mov	r1, r3
 80015f8:	4811      	ldr	r0, [pc, #68]	; (8001640 <MX_GPIO_Init+0xbc>)
 80015fa:	f000 fbd9 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 80015fe:	2307      	movs	r3, #7
 8001600:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001606:	2301      	movs	r3, #1
 8001608:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160a:	f107 0308 	add.w	r3, r7, #8
 800160e:	4619      	mov	r1, r3
 8001610:	480c      	ldr	r0, [pc, #48]	; (8001644 <MX_GPIO_Init+0xc0>)
 8001612:	f000 fbcd 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN1_Pin EN2_Pin EN3_Pin TB_RED_Pin
                           TB_YELLOW_Pin TB_GREEN_Pin LR_RED_Pin LR_YELLOW_Pin
                           LR_GREEN_Pin EN0_Pin */
  GPIO_InitStruct.Pin = EN1_Pin|EN2_Pin|EN3_Pin|TB_RED_Pin
 8001616:	f641 73f8 	movw	r3, #8184	; 0x1ff8
 800161a:	60bb      	str	r3, [r7, #8]
                          |TB_YELLOW_Pin|TB_GREEN_Pin|LR_RED_Pin|LR_YELLOW_Pin
                          |LR_GREEN_Pin|EN0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161c:	2301      	movs	r3, #1
 800161e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2302      	movs	r3, #2
 8001626:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001628:	f107 0308 	add.w	r3, r7, #8
 800162c:	4619      	mov	r1, r3
 800162e:	4805      	ldr	r0, [pc, #20]	; (8001644 <MX_GPIO_Init+0xc0>)
 8001630:	f000 fbbe 	bl	8001db0 <HAL_GPIO_Init>

}
 8001634:	bf00      	nop
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40021000 	.word	0x40021000
 8001640:	40010800 	.word	0x40010800
 8001644:	40010c00 	.word	0x40010c00

08001648 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
	getKeyInput();
 8001650:	f7fe fd8c 	bl	800016c <getKeyInput>
//	timerRun();
	SCH_Update();
 8001654:	f000 f80a 	bl	800166c <SCH_Update>
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001664:	b672      	cpsid	i
}
 8001666:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001668:	e7fe      	b.n	8001668 <Error_Handler+0x8>
	...

0800166c <SCH_Update>:
	TaskList.head = NULL;
	TaskList.size = 0;
}

void SCH_Update()
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0

	if(TaskList.size && TaskList.head->Delay > 0) TaskList.head->Delay--;
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <SCH_Update+0x28>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d009      	beq.n	800168c <SCH_Update+0x20>
 8001678:	4b06      	ldr	r3, [pc, #24]	; (8001694 <SCH_Update+0x28>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d004      	beq.n	800168c <SCH_Update+0x20>
 8001682:	4b04      	ldr	r3, [pc, #16]	; (8001694 <SCH_Update+0x28>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	3a01      	subs	r2, #1
 800168a:	609a      	str	r2, [r3, #8]
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr
 8001694:	20000158 	.word	0x20000158

08001698 <addTask>:

void addTask(TaskControlBlock_t * task)
{
 8001698:	b480      	push	{r7}
 800169a:	b087      	sub	sp, #28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
    if(TaskList.size >= SCH_MAX_TASKS)
 80016a0:	4b2a      	ldr	r3, [pc, #168]	; (800174c <addTask+0xb4>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b1f      	cmp	r3, #31
 80016a6:	dc4c      	bgt.n	8001742 <addTask+0xaa>
    {
        return;
    }
    if(TaskList.size == 0){
 80016a8:	4b28      	ldr	r3, [pc, #160]	; (800174c <addTask+0xb4>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d108      	bne.n	80016c2 <addTask+0x2a>
        TaskList.head = task;
 80016b0:	4a26      	ldr	r2, [pc, #152]	; (800174c <addTask+0xb4>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6013      	str	r3, [r2, #0]
        TaskList.size++;
 80016b6:	4b25      	ldr	r3, [pc, #148]	; (800174c <addTask+0xb4>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	3301      	adds	r3, #1
 80016bc:	4a23      	ldr	r2, [pc, #140]	; (800174c <addTask+0xb4>)
 80016be:	6053      	str	r3, [r2, #4]
        return;
 80016c0:	e040      	b.n	8001744 <addTask+0xac>
    }

    TaskControlBlock_t * curr = TaskList.head;
 80016c2:	4b22      	ldr	r3, [pc, #136]	; (800174c <addTask+0xb4>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	617b      	str	r3, [r7, #20]
    TaskControlBlock_t * prev = NULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	613b      	str	r3, [r7, #16]
    int found = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
    while(!found)
 80016d0:	e033      	b.n	800173a <addTask+0xa2>
    {
        if(curr != NULL && task-> Delay >= curr-> Delay)
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d012      	beq.n	80016fe <addTask+0x66>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d30c      	bcc.n	80016fe <addTask+0x66>
        {
            task -> Delay -= curr -> Delay;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	1ad2      	subs	r2, r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	609a      	str	r2, [r3, #8]
            prev = curr;
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	613b      	str	r3, [r7, #16]
            curr = curr -> NextTask;
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	e01d      	b.n	800173a <addTask+0xa2>
        }
        else
        {
            task -> NextTask = curr;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	611a      	str	r2, [r3, #16]

            if(prev != NULL) prev->NextTask = task;
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <addTask+0x7a>
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	611a      	str	r2, [r3, #16]
 8001710:	e002      	b.n	8001718 <addTask+0x80>
            else TaskList.head = task;
 8001712:	4a0e      	ldr	r2, [pc, #56]	; (800174c <addTask+0xb4>)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6013      	str	r3, [r2, #0]

            if(curr != NULL) curr -> Delay -= task->Delay;
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d006      	beq.n	800172c <addTask+0x94>
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	689a      	ldr	r2, [r3, #8]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	1ad2      	subs	r2, r2, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	609a      	str	r2, [r3, #8]
            TaskList.size++;
 800172c:	4b07      	ldr	r3, [pc, #28]	; (800174c <addTask+0xb4>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	3301      	adds	r3, #1
 8001732:	4a06      	ldr	r2, [pc, #24]	; (800174c <addTask+0xb4>)
 8001734:	6053      	str	r3, [r2, #4]
            found = 1;
 8001736:	2301      	movs	r3, #1
 8001738:	60fb      	str	r3, [r7, #12]
    while(!found)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0c8      	beq.n	80016d2 <addTask+0x3a>
        }
    }
    return;
 8001740:	e000      	b.n	8001744 <addTask+0xac>
        return;
 8001742:	bf00      	nop
}
 8001744:	371c      	adds	r7, #28
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr
 800174c:	20000158 	.word	0x20000158

08001750 <SCH_Add_Task>:

void SCH_Add_Task(void (*functionPointer)(), unsigned int DELAY, unsigned int PERIOD)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
	TaskControlBlock_t * task = (TaskControlBlock_t *)malloc(sizeof(TaskControlBlock_t));
 800175c:	2014      	movs	r0, #20
 800175e:	f001 fccb 	bl	80030f8 <malloc>
 8001762:	4603      	mov	r3, r0
 8001764:	617b      	str	r3, [r7, #20]

	task -> Delay 		= DELAY;
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	68ba      	ldr	r2, [r7, #8]
 800176a:	609a      	str	r2, [r3, #8]
	task -> Period 		= PERIOD;
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	60da      	str	r2, [r3, #12]
	task -> TaskID 		= (++TaskIDCounter)%256;
 8001772:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <SCH_Add_Task+0x50>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	3301      	adds	r3, #1
 8001778:	4a09      	ldr	r2, [pc, #36]	; (80017a0 <SCH_Add_Task+0x50>)
 800177a:	6013      	str	r3, [r2, #0]
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <SCH_Add_Task+0x50>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	b2da      	uxtb	r2, r3
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	605a      	str	r2, [r3, #4]
	task -> TaskPointer = functionPointer;
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	68fa      	ldr	r2, [r7, #12]
 800178a:	601a      	str	r2, [r3, #0]
	task -> NextTask 	= NULL;
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	2200      	movs	r2, #0
 8001790:	611a      	str	r2, [r3, #16]

	addTask(task);
 8001792:	6978      	ldr	r0, [r7, #20]
 8001794:	f7ff ff80 	bl	8001698 <addTask>
}
 8001798:	bf00      	nop
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	200000e8 	.word	0x200000e8

080017a4 <SCH_DeleteTask>:

void SCH_DeleteTask(uint32_t ID)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	if(TaskList.size == 0)
 80017ac:	4b3c      	ldr	r3, [pc, #240]	; (80018a0 <SCH_DeleteTask+0xfc>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d070      	beq.n	8001896 <SCH_DeleteTask+0xf2>
	{
		return;
	}

	TaskControlBlock_t * curr = TaskList.head;
 80017b4:	4b3a      	ldr	r3, [pc, #232]	; (80018a0 <SCH_DeleteTask+0xfc>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	60fb      	str	r3, [r7, #12]
	TaskControlBlock_t * prev = NULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60bb      	str	r3, [r7, #8]

	while(curr != NULL)
 80017be:	e066      	b.n	800188e <SCH_DeleteTask+0xea>
	{
		if(ID == curr -> TaskID)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d15c      	bne.n	8001884 <SCH_DeleteTask+0xe0>
		{
			if(prev == NULL && curr -> NextTask == NULL)
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d111      	bne.n	80017f4 <SCH_DeleteTask+0x50>
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d10d      	bne.n	80017f4 <SCH_DeleteTask+0x50>
			{
				free(curr);
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	f001 fc95 	bl	8003108 <free>
				TaskList.head = NULL;
 80017de:	4b30      	ldr	r3, [pc, #192]	; (80018a0 <SCH_DeleteTask+0xfc>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
				TaskList.size--;
 80017e4:	4b2e      	ldr	r3, [pc, #184]	; (80018a0 <SCH_DeleteTask+0xfc>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	3b01      	subs	r3, #1
 80017ea:	4a2d      	ldr	r2, [pc, #180]	; (80018a0 <SCH_DeleteTask+0xfc>)
 80017ec:	6053      	str	r3, [r2, #4]
				curr = NULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	e04c      	b.n	800188e <SCH_DeleteTask+0xea>
			}
			else if (prev == NULL)
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d117      	bne.n	800182a <SCH_DeleteTask+0x86>
			{
				curr -> NextTask -> Delay += curr -> Delay;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	6899      	ldr	r1, [r3, #8]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	440a      	add	r2, r1
 800180a:	609a      	str	r2, [r3, #8]
				TaskList.head = curr -> NextTask;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	4a23      	ldr	r2, [pc, #140]	; (80018a0 <SCH_DeleteTask+0xfc>)
 8001812:	6013      	str	r3, [r2, #0]
				free(curr);
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	f001 fc77 	bl	8003108 <free>
				TaskList.size--;
 800181a:	4b21      	ldr	r3, [pc, #132]	; (80018a0 <SCH_DeleteTask+0xfc>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	3b01      	subs	r3, #1
 8001820:	4a1f      	ldr	r2, [pc, #124]	; (80018a0 <SCH_DeleteTask+0xfc>)
 8001822:	6053      	str	r3, [r2, #4]
				curr = NULL;
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	e031      	b.n	800188e <SCH_DeleteTask+0xea>
			}
			else if (curr -> NextTask == NULL)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d10d      	bne.n	800184e <SCH_DeleteTask+0xaa>
			{
				free(curr);
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	f001 fc68 	bl	8003108 <free>
				prev -> NextTask = NULL;
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	2200      	movs	r2, #0
 800183c:	611a      	str	r2, [r3, #16]
				TaskList.size--;
 800183e:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <SCH_DeleteTask+0xfc>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	3b01      	subs	r3, #1
 8001844:	4a16      	ldr	r2, [pc, #88]	; (80018a0 <SCH_DeleteTask+0xfc>)
 8001846:	6053      	str	r3, [r2, #4]
				curr = NULL;
 8001848:	2300      	movs	r3, #0
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	e01f      	b.n	800188e <SCH_DeleteTask+0xea>
			}
			else
			{
				curr -> NextTask -> Delay += curr -> Delay;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	6899      	ldr	r1, [r3, #8]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	440a      	add	r2, r1
 800185e:	609a      	str	r2, [r3, #8]
				prev -> NextTask = curr -> NextTask;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	691a      	ldr	r2, [r3, #16]
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	611a      	str	r2, [r3, #16]
				curr -> NextTask = NULL;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2200      	movs	r2, #0
 800186c:	611a      	str	r2, [r3, #16]
				free(curr);
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	f001 fc4a 	bl	8003108 <free>
				TaskList.size--;
 8001874:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <SCH_DeleteTask+0xfc>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	3b01      	subs	r3, #1
 800187a:	4a09      	ldr	r2, [pc, #36]	; (80018a0 <SCH_DeleteTask+0xfc>)
 800187c:	6053      	str	r3, [r2, #4]

				curr = NULL;
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	e004      	b.n	800188e <SCH_DeleteTask+0xea>
			}

		}
		else
		{
			prev = curr;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	60bb      	str	r3, [r7, #8]
			curr = curr -> NextTask;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	60fb      	str	r3, [r7, #12]
	while(curr != NULL)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d195      	bne.n	80017c0 <SCH_DeleteTask+0x1c>
 8001894:	e000      	b.n	8001898 <SCH_DeleteTask+0xf4>
		return;
 8001896:	bf00      	nop
		}
	}
}
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000158 	.word	0x20000158

080018a4 <SCH_Dispatch_Tasks>:



void SCH_Dispatch_Tasks(){
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
	while(TaskList.size != 0 && TaskList.head->Delay == 0){
 80018a8:	e01a      	b.n	80018e0 <SCH_Dispatch_Tasks+0x3c>
		(*TaskList.head -> TaskPointer)();
 80018aa:	4b13      	ldr	r3, [pc, #76]	; (80018f8 <SCH_Dispatch_Tasks+0x54>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4798      	blx	r3
		if(TaskList.head->Period)
 80018b2:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <SCH_Dispatch_Tasks+0x54>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d00b      	beq.n	80018d4 <SCH_Dispatch_Tasks+0x30>
			SCH_Add_Task(TaskList.head -> TaskPointer, TaskList.head -> Period, TaskList.head -> Period);
 80018bc:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <SCH_Dispatch_Tasks+0x54>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6818      	ldr	r0, [r3, #0]
 80018c2:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <SCH_Dispatch_Tasks+0x54>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68d9      	ldr	r1, [r3, #12]
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <SCH_Dispatch_Tasks+0x54>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	461a      	mov	r2, r3
 80018d0:	f7ff ff3e 	bl	8001750 <SCH_Add_Task>
		SCH_DeleteTask(TaskList.head -> TaskID);
 80018d4:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <SCH_Dispatch_Tasks+0x54>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff ff62 	bl	80017a4 <SCH_DeleteTask>
	while(TaskList.size != 0 && TaskList.head->Delay == 0){
 80018e0:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <SCH_Dispatch_Tasks+0x54>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d004      	beq.n	80018f2 <SCH_Dispatch_Tasks+0x4e>
 80018e8:	4b03      	ldr	r3, [pc, #12]	; (80018f8 <SCH_Dispatch_Tasks+0x54>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0db      	beq.n	80018aa <SCH_Dispatch_Tasks+0x6>
	}
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000158 	.word	0x20000158

080018fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001902:	4b15      	ldr	r3, [pc, #84]	; (8001958 <HAL_MspInit+0x5c>)
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	4a14      	ldr	r2, [pc, #80]	; (8001958 <HAL_MspInit+0x5c>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6193      	str	r3, [r2, #24]
 800190e:	4b12      	ldr	r3, [pc, #72]	; (8001958 <HAL_MspInit+0x5c>)
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800191a:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <HAL_MspInit+0x5c>)
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	4a0e      	ldr	r2, [pc, #56]	; (8001958 <HAL_MspInit+0x5c>)
 8001920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001924:	61d3      	str	r3, [r2, #28]
 8001926:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <HAL_MspInit+0x5c>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001932:	4b0a      	ldr	r3, [pc, #40]	; (800195c <HAL_MspInit+0x60>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	4a04      	ldr	r2, [pc, #16]	; (800195c <HAL_MspInit+0x60>)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800194e:	bf00      	nop
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr
 8001958:	40021000 	.word	0x40021000
 800195c:	40010000 	.word	0x40010000

08001960 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001970:	d113      	bne.n	800199a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001972:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <HAL_TIM_Base_MspInit+0x44>)
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	4a0b      	ldr	r2, [pc, #44]	; (80019a4 <HAL_TIM_Base_MspInit+0x44>)
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	61d3      	str	r3, [r2, #28]
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <HAL_TIM_Base_MspInit+0x44>)
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	2100      	movs	r1, #0
 800198e:	201c      	movs	r0, #28
 8001990:	f000 f9d7 	bl	8001d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001994:	201c      	movs	r0, #28
 8001996:	f000 f9f0 	bl	8001d7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800199a:	bf00      	nop
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40021000 	.word	0x40021000

080019a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019ac:	e7fe      	b.n	80019ac <NMI_Handler+0x4>

080019ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019b2:	e7fe      	b.n	80019b2 <HardFault_Handler+0x4>

080019b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b8:	e7fe      	b.n	80019b8 <MemManage_Handler+0x4>

080019ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ba:	b480      	push	{r7}
 80019bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019be:	e7fe      	b.n	80019be <BusFault_Handler+0x4>

080019c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c4:	e7fe      	b.n	80019c4 <UsageFault_Handler+0x4>

080019c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr

080019d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr

080019de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr

080019ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ee:	f000 f8b5 	bl	8001b5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019fc:	4802      	ldr	r0, [pc, #8]	; (8001a08 <TIM2_IRQHandler+0x10>)
 80019fe:	f001 f811 	bl	8002a24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000110 	.word	0x20000110

08001a0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a14:	4a14      	ldr	r2, [pc, #80]	; (8001a68 <_sbrk+0x5c>)
 8001a16:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <_sbrk+0x60>)
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a20:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <_sbrk+0x64>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d102      	bne.n	8001a2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a28:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <_sbrk+0x64>)
 8001a2a:	4a12      	ldr	r2, [pc, #72]	; (8001a74 <_sbrk+0x68>)
 8001a2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a2e:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <_sbrk+0x64>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d207      	bcs.n	8001a4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a3c:	f001 fb32 	bl	80030a4 <__errno>
 8001a40:	4603      	mov	r3, r0
 8001a42:	220c      	movs	r2, #12
 8001a44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a46:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4a:	e009      	b.n	8001a60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a4c:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <_sbrk+0x64>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a52:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <_sbrk+0x64>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4413      	add	r3, r2
 8001a5a:	4a05      	ldr	r2, [pc, #20]	; (8001a70 <_sbrk+0x64>)
 8001a5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3718      	adds	r7, #24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20002800 	.word	0x20002800
 8001a6c:	00000400 	.word	0x00000400
 8001a70:	200000ec 	.word	0x200000ec
 8001a74:	20000178 	.word	0x20000178

08001a78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr

08001a84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a84:	f7ff fff8 	bl	8001a78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a88:	480b      	ldr	r0, [pc, #44]	; (8001ab8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a8a:	490c      	ldr	r1, [pc, #48]	; (8001abc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a8c:	4a0c      	ldr	r2, [pc, #48]	; (8001ac0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a90:	e002      	b.n	8001a98 <LoopCopyDataInit>

08001a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a96:	3304      	adds	r3, #4

08001a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a9c:	d3f9      	bcc.n	8001a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a9e:	4a09      	ldr	r2, [pc, #36]	; (8001ac4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001aa0:	4c09      	ldr	r4, [pc, #36]	; (8001ac8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa4:	e001      	b.n	8001aaa <LoopFillZerobss>

08001aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa8:	3204      	adds	r2, #4

08001aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aac:	d3fb      	bcc.n	8001aa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aae:	f001 faff 	bl	80030b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ab2:	f7ff fcaf 	bl	8001414 <main>
  bx lr
 8001ab6:	4770      	bx	lr
  ldr r0, =_sdata
 8001ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001abc:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8001ac0:	080032f4 	.word	0x080032f4
  ldr r2, =_sbss
 8001ac4:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8001ac8:	20000174 	.word	0x20000174

08001acc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001acc:	e7fe      	b.n	8001acc <ADC1_2_IRQHandler>
	...

08001ad0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ad4:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <HAL_Init+0x28>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a07      	ldr	r2, [pc, #28]	; (8001af8 <HAL_Init+0x28>)
 8001ada:	f043 0310 	orr.w	r3, r3, #16
 8001ade:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae0:	2003      	movs	r0, #3
 8001ae2:	f000 f923 	bl	8001d2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ae6:	200f      	movs	r0, #15
 8001ae8:	f000 f808 	bl	8001afc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aec:	f7ff ff06 	bl	80018fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40022000 	.word	0x40022000

08001afc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b04:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <HAL_InitTick+0x54>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <HAL_InitTick+0x58>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f000 f93b 	bl	8001d96 <HAL_SYSTICK_Config>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e00e      	b.n	8001b48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b0f      	cmp	r3, #15
 8001b2e:	d80a      	bhi.n	8001b46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b30:	2200      	movs	r2, #0
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	f04f 30ff 	mov.w	r0, #4294967295
 8001b38:	f000 f903 	bl	8001d42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b3c:	4a06      	ldr	r2, [pc, #24]	; (8001b58 <HAL_InitTick+0x5c>)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
 8001b44:	e000      	b.n	8001b48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20000048 	.word	0x20000048
 8001b54:	20000050 	.word	0x20000050
 8001b58:	2000004c 	.word	0x2000004c

08001b5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <HAL_IncTick+0x1c>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	461a      	mov	r2, r3
 8001b66:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <HAL_IncTick+0x20>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	4a03      	ldr	r2, [pc, #12]	; (8001b7c <HAL_IncTick+0x20>)
 8001b6e:	6013      	str	r3, [r2, #0]
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr
 8001b78:	20000050 	.word	0x20000050
 8001b7c:	20000160 	.word	0x20000160

08001b80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return uwTick;
 8001b84:	4b02      	ldr	r3, [pc, #8]	; (8001b90 <HAL_GetTick+0x10>)
 8001b86:	681b      	ldr	r3, [r3, #0]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr
 8001b90:	20000160 	.word	0x20000160

08001b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bc6:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	60d3      	str	r3, [r2, #12]
}
 8001bcc:	bf00      	nop
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be0:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	0a1b      	lsrs	r3, r3, #8
 8001be6:	f003 0307 	and.w	r3, r3, #7
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	db0b      	blt.n	8001c22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	f003 021f 	and.w	r2, r3, #31
 8001c10:	4906      	ldr	r1, [pc, #24]	; (8001c2c <__NVIC_EnableIRQ+0x34>)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	095b      	lsrs	r3, r3, #5
 8001c18:	2001      	movs	r0, #1
 8001c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr
 8001c2c:	e000e100 	.word	0xe000e100

08001c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	6039      	str	r1, [r7, #0]
 8001c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	db0a      	blt.n	8001c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	490c      	ldr	r1, [pc, #48]	; (8001c7c <__NVIC_SetPriority+0x4c>)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	0112      	lsls	r2, r2, #4
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	440b      	add	r3, r1
 8001c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c58:	e00a      	b.n	8001c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	4908      	ldr	r1, [pc, #32]	; (8001c80 <__NVIC_SetPriority+0x50>)
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	3b04      	subs	r3, #4
 8001c68:	0112      	lsls	r2, r2, #4
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	761a      	strb	r2, [r3, #24]
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	e000e100 	.word	0xe000e100
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b089      	sub	sp, #36	; 0x24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f1c3 0307 	rsb	r3, r3, #7
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	bf28      	it	cs
 8001ca2:	2304      	movcs	r3, #4
 8001ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	2b06      	cmp	r3, #6
 8001cac:	d902      	bls.n	8001cb4 <NVIC_EncodePriority+0x30>
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3b03      	subs	r3, #3
 8001cb2:	e000      	b.n	8001cb6 <NVIC_EncodePriority+0x32>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43da      	mvns	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	401a      	ands	r2, r3
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd6:	43d9      	mvns	r1, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cdc:	4313      	orrs	r3, r2
         );
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3724      	adds	r7, #36	; 0x24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf8:	d301      	bcc.n	8001cfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e00f      	b.n	8001d1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cfe:	4a0a      	ldr	r2, [pc, #40]	; (8001d28 <SysTick_Config+0x40>)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d06:	210f      	movs	r1, #15
 8001d08:	f04f 30ff 	mov.w	r0, #4294967295
 8001d0c:	f7ff ff90 	bl	8001c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <SysTick_Config+0x40>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d16:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <SysTick_Config+0x40>)
 8001d18:	2207      	movs	r2, #7
 8001d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	e000e010 	.word	0xe000e010

08001d2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff ff2d 	bl	8001b94 <__NVIC_SetPriorityGrouping>
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b086      	sub	sp, #24
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	4603      	mov	r3, r0
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
 8001d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d54:	f7ff ff42 	bl	8001bdc <__NVIC_GetPriorityGrouping>
 8001d58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	68b9      	ldr	r1, [r7, #8]
 8001d5e:	6978      	ldr	r0, [r7, #20]
 8001d60:	f7ff ff90 	bl	8001c84 <NVIC_EncodePriority>
 8001d64:	4602      	mov	r2, r0
 8001d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff ff5f 	bl	8001c30 <__NVIC_SetPriority>
}
 8001d72:	bf00      	nop
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	4603      	mov	r3, r0
 8001d82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff35 	bl	8001bf8 <__NVIC_EnableIRQ>
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7ff ffa2 	bl	8001ce8 <SysTick_Config>
 8001da4:	4603      	mov	r3, r0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b08b      	sub	sp, #44	; 0x2c
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dc2:	e148      	b.n	8002056 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	69fa      	ldr	r2, [r7, #28]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	f040 8137 	bne.w	8002050 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	4aa3      	ldr	r2, [pc, #652]	; (8002074 <HAL_GPIO_Init+0x2c4>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d05e      	beq.n	8001eaa <HAL_GPIO_Init+0xfa>
 8001dec:	4aa1      	ldr	r2, [pc, #644]	; (8002074 <HAL_GPIO_Init+0x2c4>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d875      	bhi.n	8001ede <HAL_GPIO_Init+0x12e>
 8001df2:	4aa1      	ldr	r2, [pc, #644]	; (8002078 <HAL_GPIO_Init+0x2c8>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d058      	beq.n	8001eaa <HAL_GPIO_Init+0xfa>
 8001df8:	4a9f      	ldr	r2, [pc, #636]	; (8002078 <HAL_GPIO_Init+0x2c8>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d86f      	bhi.n	8001ede <HAL_GPIO_Init+0x12e>
 8001dfe:	4a9f      	ldr	r2, [pc, #636]	; (800207c <HAL_GPIO_Init+0x2cc>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d052      	beq.n	8001eaa <HAL_GPIO_Init+0xfa>
 8001e04:	4a9d      	ldr	r2, [pc, #628]	; (800207c <HAL_GPIO_Init+0x2cc>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d869      	bhi.n	8001ede <HAL_GPIO_Init+0x12e>
 8001e0a:	4a9d      	ldr	r2, [pc, #628]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d04c      	beq.n	8001eaa <HAL_GPIO_Init+0xfa>
 8001e10:	4a9b      	ldr	r2, [pc, #620]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d863      	bhi.n	8001ede <HAL_GPIO_Init+0x12e>
 8001e16:	4a9b      	ldr	r2, [pc, #620]	; (8002084 <HAL_GPIO_Init+0x2d4>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d046      	beq.n	8001eaa <HAL_GPIO_Init+0xfa>
 8001e1c:	4a99      	ldr	r2, [pc, #612]	; (8002084 <HAL_GPIO_Init+0x2d4>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d85d      	bhi.n	8001ede <HAL_GPIO_Init+0x12e>
 8001e22:	2b12      	cmp	r3, #18
 8001e24:	d82a      	bhi.n	8001e7c <HAL_GPIO_Init+0xcc>
 8001e26:	2b12      	cmp	r3, #18
 8001e28:	d859      	bhi.n	8001ede <HAL_GPIO_Init+0x12e>
 8001e2a:	a201      	add	r2, pc, #4	; (adr r2, 8001e30 <HAL_GPIO_Init+0x80>)
 8001e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e30:	08001eab 	.word	0x08001eab
 8001e34:	08001e85 	.word	0x08001e85
 8001e38:	08001e97 	.word	0x08001e97
 8001e3c:	08001ed9 	.word	0x08001ed9
 8001e40:	08001edf 	.word	0x08001edf
 8001e44:	08001edf 	.word	0x08001edf
 8001e48:	08001edf 	.word	0x08001edf
 8001e4c:	08001edf 	.word	0x08001edf
 8001e50:	08001edf 	.word	0x08001edf
 8001e54:	08001edf 	.word	0x08001edf
 8001e58:	08001edf 	.word	0x08001edf
 8001e5c:	08001edf 	.word	0x08001edf
 8001e60:	08001edf 	.word	0x08001edf
 8001e64:	08001edf 	.word	0x08001edf
 8001e68:	08001edf 	.word	0x08001edf
 8001e6c:	08001edf 	.word	0x08001edf
 8001e70:	08001edf 	.word	0x08001edf
 8001e74:	08001e8d 	.word	0x08001e8d
 8001e78:	08001ea1 	.word	0x08001ea1
 8001e7c:	4a82      	ldr	r2, [pc, #520]	; (8002088 <HAL_GPIO_Init+0x2d8>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d013      	beq.n	8001eaa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e82:	e02c      	b.n	8001ede <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	623b      	str	r3, [r7, #32]
          break;
 8001e8a:	e029      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	3304      	adds	r3, #4
 8001e92:	623b      	str	r3, [r7, #32]
          break;
 8001e94:	e024      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	3308      	adds	r3, #8
 8001e9c:	623b      	str	r3, [r7, #32]
          break;
 8001e9e:	e01f      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	330c      	adds	r3, #12
 8001ea6:	623b      	str	r3, [r7, #32]
          break;
 8001ea8:	e01a      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d102      	bne.n	8001eb8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001eb2:	2304      	movs	r3, #4
 8001eb4:	623b      	str	r3, [r7, #32]
          break;
 8001eb6:	e013      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d105      	bne.n	8001ecc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ec0:	2308      	movs	r3, #8
 8001ec2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	69fa      	ldr	r2, [r7, #28]
 8001ec8:	611a      	str	r2, [r3, #16]
          break;
 8001eca:	e009      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ecc:	2308      	movs	r3, #8
 8001ece:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	69fa      	ldr	r2, [r7, #28]
 8001ed4:	615a      	str	r2, [r3, #20]
          break;
 8001ed6:	e003      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	623b      	str	r3, [r7, #32]
          break;
 8001edc:	e000      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          break;
 8001ede:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	2bff      	cmp	r3, #255	; 0xff
 8001ee4:	d801      	bhi.n	8001eea <HAL_GPIO_Init+0x13a>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	e001      	b.n	8001eee <HAL_GPIO_Init+0x13e>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3304      	adds	r3, #4
 8001eee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	2bff      	cmp	r3, #255	; 0xff
 8001ef4:	d802      	bhi.n	8001efc <HAL_GPIO_Init+0x14c>
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	e002      	b.n	8001f02 <HAL_GPIO_Init+0x152>
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	3b08      	subs	r3, #8
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	210f      	movs	r1, #15
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	401a      	ands	r2, r3
 8001f14:	6a39      	ldr	r1, [r7, #32]
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 8090 	beq.w	8002050 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f30:	4b56      	ldr	r3, [pc, #344]	; (800208c <HAL_GPIO_Init+0x2dc>)
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	4a55      	ldr	r2, [pc, #340]	; (800208c <HAL_GPIO_Init+0x2dc>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	6193      	str	r3, [r2, #24]
 8001f3c:	4b53      	ldr	r3, [pc, #332]	; (800208c <HAL_GPIO_Init+0x2dc>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f48:	4a51      	ldr	r2, [pc, #324]	; (8002090 <HAL_GPIO_Init+0x2e0>)
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	089b      	lsrs	r3, r3, #2
 8001f4e:	3302      	adds	r3, #2
 8001f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	220f      	movs	r2, #15
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a49      	ldr	r2, [pc, #292]	; (8002094 <HAL_GPIO_Init+0x2e4>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d00d      	beq.n	8001f90 <HAL_GPIO_Init+0x1e0>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a48      	ldr	r2, [pc, #288]	; (8002098 <HAL_GPIO_Init+0x2e8>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d007      	beq.n	8001f8c <HAL_GPIO_Init+0x1dc>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a47      	ldr	r2, [pc, #284]	; (800209c <HAL_GPIO_Init+0x2ec>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d101      	bne.n	8001f88 <HAL_GPIO_Init+0x1d8>
 8001f84:	2302      	movs	r3, #2
 8001f86:	e004      	b.n	8001f92 <HAL_GPIO_Init+0x1e2>
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e002      	b.n	8001f92 <HAL_GPIO_Init+0x1e2>
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e000      	b.n	8001f92 <HAL_GPIO_Init+0x1e2>
 8001f90:	2300      	movs	r3, #0
 8001f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f94:	f002 0203 	and.w	r2, r2, #3
 8001f98:	0092      	lsls	r2, r2, #2
 8001f9a:	4093      	lsls	r3, r2
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fa2:	493b      	ldr	r1, [pc, #236]	; (8002090 <HAL_GPIO_Init+0x2e0>)
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	089b      	lsrs	r3, r3, #2
 8001fa8:	3302      	adds	r3, #2
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d006      	beq.n	8001fca <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fbc:	4b38      	ldr	r3, [pc, #224]	; (80020a0 <HAL_GPIO_Init+0x2f0>)
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	4937      	ldr	r1, [pc, #220]	; (80020a0 <HAL_GPIO_Init+0x2f0>)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	608b      	str	r3, [r1, #8]
 8001fc8:	e006      	b.n	8001fd8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fca:	4b35      	ldr	r3, [pc, #212]	; (80020a0 <HAL_GPIO_Init+0x2f0>)
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	4933      	ldr	r1, [pc, #204]	; (80020a0 <HAL_GPIO_Init+0x2f0>)
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d006      	beq.n	8001ff2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fe4:	4b2e      	ldr	r3, [pc, #184]	; (80020a0 <HAL_GPIO_Init+0x2f0>)
 8001fe6:	68da      	ldr	r2, [r3, #12]
 8001fe8:	492d      	ldr	r1, [pc, #180]	; (80020a0 <HAL_GPIO_Init+0x2f0>)
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	60cb      	str	r3, [r1, #12]
 8001ff0:	e006      	b.n	8002000 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ff2:	4b2b      	ldr	r3, [pc, #172]	; (80020a0 <HAL_GPIO_Init+0x2f0>)
 8001ff4:	68da      	ldr	r2, [r3, #12]
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	4929      	ldr	r1, [pc, #164]	; (80020a0 <HAL_GPIO_Init+0x2f0>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d006      	beq.n	800201a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800200c:	4b24      	ldr	r3, [pc, #144]	; (80020a0 <HAL_GPIO_Init+0x2f0>)
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	4923      	ldr	r1, [pc, #140]	; (80020a0 <HAL_GPIO_Init+0x2f0>)
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	604b      	str	r3, [r1, #4]
 8002018:	e006      	b.n	8002028 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800201a:	4b21      	ldr	r3, [pc, #132]	; (80020a0 <HAL_GPIO_Init+0x2f0>)
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	43db      	mvns	r3, r3
 8002022:	491f      	ldr	r1, [pc, #124]	; (80020a0 <HAL_GPIO_Init+0x2f0>)
 8002024:	4013      	ands	r3, r2
 8002026:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d006      	beq.n	8002042 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002034:	4b1a      	ldr	r3, [pc, #104]	; (80020a0 <HAL_GPIO_Init+0x2f0>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	4919      	ldr	r1, [pc, #100]	; (80020a0 <HAL_GPIO_Init+0x2f0>)
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	4313      	orrs	r3, r2
 800203e:	600b      	str	r3, [r1, #0]
 8002040:	e006      	b.n	8002050 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002042:	4b17      	ldr	r3, [pc, #92]	; (80020a0 <HAL_GPIO_Init+0x2f0>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	43db      	mvns	r3, r3
 800204a:	4915      	ldr	r1, [pc, #84]	; (80020a0 <HAL_GPIO_Init+0x2f0>)
 800204c:	4013      	ands	r3, r2
 800204e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	3301      	adds	r3, #1
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	fa22 f303 	lsr.w	r3, r2, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	f47f aeaf 	bne.w	8001dc4 <HAL_GPIO_Init+0x14>
  }
}
 8002066:	bf00      	nop
 8002068:	bf00      	nop
 800206a:	372c      	adds	r7, #44	; 0x2c
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	10320000 	.word	0x10320000
 8002078:	10310000 	.word	0x10310000
 800207c:	10220000 	.word	0x10220000
 8002080:	10210000 	.word	0x10210000
 8002084:	10120000 	.word	0x10120000
 8002088:	10110000 	.word	0x10110000
 800208c:	40021000 	.word	0x40021000
 8002090:	40010000 	.word	0x40010000
 8002094:	40010800 	.word	0x40010800
 8002098:	40010c00 	.word	0x40010c00
 800209c:	40011000 	.word	0x40011000
 80020a0:	40010400 	.word	0x40010400

080020a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	887b      	ldrh	r3, [r7, #2]
 80020b6:	4013      	ands	r3, r2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d002      	beq.n	80020c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020bc:	2301      	movs	r3, #1
 80020be:	73fb      	strb	r3, [r7, #15]
 80020c0:	e001      	b.n	80020c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020c2:	2300      	movs	r3, #0
 80020c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr

080020d2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	460b      	mov	r3, r1
 80020dc:	807b      	strh	r3, [r7, #2]
 80020de:	4613      	mov	r3, r2
 80020e0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020e2:	787b      	ldrb	r3, [r7, #1]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020e8:	887a      	ldrh	r2, [r7, #2]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020ee:	e003      	b.n	80020f8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020f0:	887b      	ldrh	r3, [r7, #2]
 80020f2:	041a      	lsls	r2, r3, #16
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	611a      	str	r2, [r3, #16]
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr

08002102 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002102:	b480      	push	{r7}
 8002104:	b085      	sub	sp, #20
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	460b      	mov	r3, r1
 800210c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002114:	887a      	ldrh	r2, [r7, #2]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	4013      	ands	r3, r2
 800211a:	041a      	lsls	r2, r3, #16
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	43d9      	mvns	r1, r3
 8002120:	887b      	ldrh	r3, [r7, #2]
 8002122:	400b      	ands	r3, r1
 8002124:	431a      	orrs	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	611a      	str	r2, [r3, #16]
}
 800212a:	bf00      	nop
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr

08002134 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e26c      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	f000 8087 	beq.w	8002262 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002154:	4b92      	ldr	r3, [pc, #584]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f003 030c 	and.w	r3, r3, #12
 800215c:	2b04      	cmp	r3, #4
 800215e:	d00c      	beq.n	800217a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002160:	4b8f      	ldr	r3, [pc, #572]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 030c 	and.w	r3, r3, #12
 8002168:	2b08      	cmp	r3, #8
 800216a:	d112      	bne.n	8002192 <HAL_RCC_OscConfig+0x5e>
 800216c:	4b8c      	ldr	r3, [pc, #560]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002178:	d10b      	bne.n	8002192 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800217a:	4b89      	ldr	r3, [pc, #548]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d06c      	beq.n	8002260 <HAL_RCC_OscConfig+0x12c>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d168      	bne.n	8002260 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e246      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800219a:	d106      	bne.n	80021aa <HAL_RCC_OscConfig+0x76>
 800219c:	4b80      	ldr	r3, [pc, #512]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a7f      	ldr	r2, [pc, #508]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a6:	6013      	str	r3, [r2, #0]
 80021a8:	e02e      	b.n	8002208 <HAL_RCC_OscConfig+0xd4>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10c      	bne.n	80021cc <HAL_RCC_OscConfig+0x98>
 80021b2:	4b7b      	ldr	r3, [pc, #492]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a7a      	ldr	r2, [pc, #488]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021bc:	6013      	str	r3, [r2, #0]
 80021be:	4b78      	ldr	r3, [pc, #480]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a77      	ldr	r2, [pc, #476]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	e01d      	b.n	8002208 <HAL_RCC_OscConfig+0xd4>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021d4:	d10c      	bne.n	80021f0 <HAL_RCC_OscConfig+0xbc>
 80021d6:	4b72      	ldr	r3, [pc, #456]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a71      	ldr	r2, [pc, #452]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	4b6f      	ldr	r3, [pc, #444]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a6e      	ldr	r2, [pc, #440]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	e00b      	b.n	8002208 <HAL_RCC_OscConfig+0xd4>
 80021f0:	4b6b      	ldr	r3, [pc, #428]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a6a      	ldr	r2, [pc, #424]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021fa:	6013      	str	r3, [r2, #0]
 80021fc:	4b68      	ldr	r3, [pc, #416]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a67      	ldr	r2, [pc, #412]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 8002202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002206:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d013      	beq.n	8002238 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002210:	f7ff fcb6 	bl	8001b80 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002218:	f7ff fcb2 	bl	8001b80 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b64      	cmp	r3, #100	; 0x64
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e1fa      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222a:	4b5d      	ldr	r3, [pc, #372]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f0      	beq.n	8002218 <HAL_RCC_OscConfig+0xe4>
 8002236:	e014      	b.n	8002262 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002238:	f7ff fca2 	bl	8001b80 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002240:	f7ff fc9e 	bl	8001b80 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b64      	cmp	r3, #100	; 0x64
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e1e6      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002252:	4b53      	ldr	r3, [pc, #332]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0x10c>
 800225e:	e000      	b.n	8002262 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d063      	beq.n	8002336 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800226e:	4b4c      	ldr	r3, [pc, #304]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f003 030c 	and.w	r3, r3, #12
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00b      	beq.n	8002292 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800227a:	4b49      	ldr	r3, [pc, #292]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f003 030c 	and.w	r3, r3, #12
 8002282:	2b08      	cmp	r3, #8
 8002284:	d11c      	bne.n	80022c0 <HAL_RCC_OscConfig+0x18c>
 8002286:	4b46      	ldr	r3, [pc, #280]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d116      	bne.n	80022c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002292:	4b43      	ldr	r3, [pc, #268]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d005      	beq.n	80022aa <HAL_RCC_OscConfig+0x176>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d001      	beq.n	80022aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e1ba      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022aa:	4b3d      	ldr	r3, [pc, #244]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	4939      	ldr	r1, [pc, #228]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022be:	e03a      	b.n	8002336 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d020      	beq.n	800230a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022c8:	4b36      	ldr	r3, [pc, #216]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 80022ca:	2201      	movs	r2, #1
 80022cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ce:	f7ff fc57 	bl	8001b80 <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d6:	f7ff fc53 	bl	8001b80 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e19b      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e8:	4b2d      	ldr	r3, [pc, #180]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0f0      	beq.n	80022d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f4:	4b2a      	ldr	r3, [pc, #168]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	4927      	ldr	r1, [pc, #156]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 8002304:	4313      	orrs	r3, r2
 8002306:	600b      	str	r3, [r1, #0]
 8002308:	e015      	b.n	8002336 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800230a:	4b26      	ldr	r3, [pc, #152]	; (80023a4 <HAL_RCC_OscConfig+0x270>)
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002310:	f7ff fc36 	bl	8001b80 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002318:	f7ff fc32 	bl	8001b80 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e17a      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800232a:	4b1d      	ldr	r3, [pc, #116]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1f0      	bne.n	8002318 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b00      	cmp	r3, #0
 8002340:	d03a      	beq.n	80023b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d019      	beq.n	800237e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800234a:	4b17      	ldr	r3, [pc, #92]	; (80023a8 <HAL_RCC_OscConfig+0x274>)
 800234c:	2201      	movs	r2, #1
 800234e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002350:	f7ff fc16 	bl	8001b80 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002358:	f7ff fc12 	bl	8001b80 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e15a      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800236a:	4b0d      	ldr	r3, [pc, #52]	; (80023a0 <HAL_RCC_OscConfig+0x26c>)
 800236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f0      	beq.n	8002358 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002376:	2001      	movs	r0, #1
 8002378:	f000 fa9a 	bl	80028b0 <RCC_Delay>
 800237c:	e01c      	b.n	80023b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800237e:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <HAL_RCC_OscConfig+0x274>)
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002384:	f7ff fbfc 	bl	8001b80 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800238a:	e00f      	b.n	80023ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800238c:	f7ff fbf8 	bl	8001b80 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d908      	bls.n	80023ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e140      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
 800239e:	bf00      	nop
 80023a0:	40021000 	.word	0x40021000
 80023a4:	42420000 	.word	0x42420000
 80023a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ac:	4b9e      	ldr	r3, [pc, #632]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 80023ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1e9      	bne.n	800238c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 80a6 	beq.w	8002512 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023c6:	2300      	movs	r3, #0
 80023c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ca:	4b97      	ldr	r3, [pc, #604]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10d      	bne.n	80023f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023d6:	4b94      	ldr	r3, [pc, #592]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	4a93      	ldr	r2, [pc, #588]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 80023dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e0:	61d3      	str	r3, [r2, #28]
 80023e2:	4b91      	ldr	r3, [pc, #580]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ea:	60bb      	str	r3, [r7, #8]
 80023ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ee:	2301      	movs	r3, #1
 80023f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f2:	4b8e      	ldr	r3, [pc, #568]	; (800262c <HAL_RCC_OscConfig+0x4f8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d118      	bne.n	8002430 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023fe:	4b8b      	ldr	r3, [pc, #556]	; (800262c <HAL_RCC_OscConfig+0x4f8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a8a      	ldr	r2, [pc, #552]	; (800262c <HAL_RCC_OscConfig+0x4f8>)
 8002404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002408:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800240a:	f7ff fbb9 	bl	8001b80 <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002412:	f7ff fbb5 	bl	8001b80 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b64      	cmp	r3, #100	; 0x64
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e0fd      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002424:	4b81      	ldr	r3, [pc, #516]	; (800262c <HAL_RCC_OscConfig+0x4f8>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0f0      	beq.n	8002412 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d106      	bne.n	8002446 <HAL_RCC_OscConfig+0x312>
 8002438:	4b7b      	ldr	r3, [pc, #492]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	4a7a      	ldr	r2, [pc, #488]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 800243e:	f043 0301 	orr.w	r3, r3, #1
 8002442:	6213      	str	r3, [r2, #32]
 8002444:	e02d      	b.n	80024a2 <HAL_RCC_OscConfig+0x36e>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10c      	bne.n	8002468 <HAL_RCC_OscConfig+0x334>
 800244e:	4b76      	ldr	r3, [pc, #472]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	4a75      	ldr	r2, [pc, #468]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002454:	f023 0301 	bic.w	r3, r3, #1
 8002458:	6213      	str	r3, [r2, #32]
 800245a:	4b73      	ldr	r3, [pc, #460]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	4a72      	ldr	r2, [pc, #456]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002460:	f023 0304 	bic.w	r3, r3, #4
 8002464:	6213      	str	r3, [r2, #32]
 8002466:	e01c      	b.n	80024a2 <HAL_RCC_OscConfig+0x36e>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	2b05      	cmp	r3, #5
 800246e:	d10c      	bne.n	800248a <HAL_RCC_OscConfig+0x356>
 8002470:	4b6d      	ldr	r3, [pc, #436]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	4a6c      	ldr	r2, [pc, #432]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002476:	f043 0304 	orr.w	r3, r3, #4
 800247a:	6213      	str	r3, [r2, #32]
 800247c:	4b6a      	ldr	r3, [pc, #424]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	4a69      	ldr	r2, [pc, #420]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	6213      	str	r3, [r2, #32]
 8002488:	e00b      	b.n	80024a2 <HAL_RCC_OscConfig+0x36e>
 800248a:	4b67      	ldr	r3, [pc, #412]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	4a66      	ldr	r2, [pc, #408]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002490:	f023 0301 	bic.w	r3, r3, #1
 8002494:	6213      	str	r3, [r2, #32]
 8002496:	4b64      	ldr	r3, [pc, #400]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	4a63      	ldr	r2, [pc, #396]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 800249c:	f023 0304 	bic.w	r3, r3, #4
 80024a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d015      	beq.n	80024d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024aa:	f7ff fb69 	bl	8001b80 <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b0:	e00a      	b.n	80024c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b2:	f7ff fb65 	bl	8001b80 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e0ab      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c8:	4b57      	ldr	r3, [pc, #348]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0ee      	beq.n	80024b2 <HAL_RCC_OscConfig+0x37e>
 80024d4:	e014      	b.n	8002500 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d6:	f7ff fb53 	bl	8001b80 <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024dc:	e00a      	b.n	80024f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024de:	f7ff fb4f 	bl	8001b80 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e095      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f4:	4b4c      	ldr	r3, [pc, #304]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1ee      	bne.n	80024de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002500:	7dfb      	ldrb	r3, [r7, #23]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d105      	bne.n	8002512 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002506:	4b48      	ldr	r3, [pc, #288]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	4a47      	ldr	r2, [pc, #284]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 800250c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002510:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 8081 	beq.w	800261e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800251c:	4b42      	ldr	r3, [pc, #264]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 030c 	and.w	r3, r3, #12
 8002524:	2b08      	cmp	r3, #8
 8002526:	d061      	beq.n	80025ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	2b02      	cmp	r3, #2
 800252e:	d146      	bne.n	80025be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002530:	4b3f      	ldr	r3, [pc, #252]	; (8002630 <HAL_RCC_OscConfig+0x4fc>)
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002536:	f7ff fb23 	bl	8001b80 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253e:	f7ff fb1f 	bl	8001b80 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e067      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002550:	4b35      	ldr	r3, [pc, #212]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1f0      	bne.n	800253e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002564:	d108      	bne.n	8002578 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002566:	4b30      	ldr	r3, [pc, #192]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	492d      	ldr	r1, [pc, #180]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 8002574:	4313      	orrs	r3, r2
 8002576:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002578:	4b2b      	ldr	r3, [pc, #172]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a19      	ldr	r1, [r3, #32]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	430b      	orrs	r3, r1
 800258a:	4927      	ldr	r1, [pc, #156]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 800258c:	4313      	orrs	r3, r2
 800258e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002590:	4b27      	ldr	r3, [pc, #156]	; (8002630 <HAL_RCC_OscConfig+0x4fc>)
 8002592:	2201      	movs	r2, #1
 8002594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002596:	f7ff faf3 	bl	8001b80 <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800259e:	f7ff faef 	bl	8001b80 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e037      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025b0:	4b1d      	ldr	r3, [pc, #116]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0f0      	beq.n	800259e <HAL_RCC_OscConfig+0x46a>
 80025bc:	e02f      	b.n	800261e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025be:	4b1c      	ldr	r3, [pc, #112]	; (8002630 <HAL_RCC_OscConfig+0x4fc>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c4:	f7ff fadc 	bl	8001b80 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025cc:	f7ff fad8 	bl	8001b80 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e020      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025de:	4b12      	ldr	r3, [pc, #72]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1f0      	bne.n	80025cc <HAL_RCC_OscConfig+0x498>
 80025ea:	e018      	b.n	800261e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d101      	bne.n	80025f8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e013      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025f8:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <HAL_RCC_OscConfig+0x4f4>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	429a      	cmp	r2, r3
 800260a:	d106      	bne.n	800261a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002616:	429a      	cmp	r2, r3
 8002618:	d001      	beq.n	800261e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40021000 	.word	0x40021000
 800262c:	40007000 	.word	0x40007000
 8002630:	42420060 	.word	0x42420060

08002634 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e0d0      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002648:	4b6a      	ldr	r3, [pc, #424]	; (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	d910      	bls.n	8002678 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002656:	4b67      	ldr	r3, [pc, #412]	; (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f023 0207 	bic.w	r2, r3, #7
 800265e:	4965      	ldr	r1, [pc, #404]	; (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	4313      	orrs	r3, r2
 8002664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002666:	4b63      	ldr	r3, [pc, #396]	; (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	429a      	cmp	r2, r3
 8002672:	d001      	beq.n	8002678 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e0b8      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d020      	beq.n	80026c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	2b00      	cmp	r3, #0
 800268e:	d005      	beq.n	800269c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002690:	4b59      	ldr	r3, [pc, #356]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	4a58      	ldr	r2, [pc, #352]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002696:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800269a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0308 	and.w	r3, r3, #8
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d005      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026a8:	4b53      	ldr	r3, [pc, #332]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	4a52      	ldr	r2, [pc, #328]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026b4:	4b50      	ldr	r3, [pc, #320]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	494d      	ldr	r1, [pc, #308]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d040      	beq.n	8002754 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d107      	bne.n	80026ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026da:	4b47      	ldr	r3, [pc, #284]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d115      	bne.n	8002712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e07f      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d107      	bne.n	8002702 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f2:	4b41      	ldr	r3, [pc, #260]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d109      	bne.n	8002712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e073      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002702:	4b3d      	ldr	r3, [pc, #244]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e06b      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002712:	4b39      	ldr	r3, [pc, #228]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f023 0203 	bic.w	r2, r3, #3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	4936      	ldr	r1, [pc, #216]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002720:	4313      	orrs	r3, r2
 8002722:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002724:	f7ff fa2c 	bl	8001b80 <HAL_GetTick>
 8002728:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272a:	e00a      	b.n	8002742 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800272c:	f7ff fa28 	bl	8001b80 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	f241 3288 	movw	r2, #5000	; 0x1388
 800273a:	4293      	cmp	r3, r2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e053      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002742:	4b2d      	ldr	r3, [pc, #180]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f003 020c 	and.w	r2, r3, #12
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	429a      	cmp	r2, r3
 8002752:	d1eb      	bne.n	800272c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002754:	4b27      	ldr	r3, [pc, #156]	; (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	429a      	cmp	r2, r3
 8002760:	d210      	bcs.n	8002784 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002762:	4b24      	ldr	r3, [pc, #144]	; (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f023 0207 	bic.w	r2, r3, #7
 800276a:	4922      	ldr	r1, [pc, #136]	; (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	4313      	orrs	r3, r2
 8002770:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002772:	4b20      	ldr	r3, [pc, #128]	; (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d001      	beq.n	8002784 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e032      	b.n	80027ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	2b00      	cmp	r3, #0
 800278e:	d008      	beq.n	80027a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002790:	4b19      	ldr	r3, [pc, #100]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	4916      	ldr	r1, [pc, #88]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d009      	beq.n	80027c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027ae:	4b12      	ldr	r3, [pc, #72]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	490e      	ldr	r1, [pc, #56]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027c2:	f000 f821 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 80027c6:	4602      	mov	r2, r0
 80027c8:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	091b      	lsrs	r3, r3, #4
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	490a      	ldr	r1, [pc, #40]	; (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 80027d4:	5ccb      	ldrb	r3, [r1, r3]
 80027d6:	fa22 f303 	lsr.w	r3, r2, r3
 80027da:	4a09      	ldr	r2, [pc, #36]	; (8002800 <HAL_RCC_ClockConfig+0x1cc>)
 80027dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027de:	4b09      	ldr	r3, [pc, #36]	; (8002804 <HAL_RCC_ClockConfig+0x1d0>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff f98a 	bl	8001afc <HAL_InitTick>

  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40022000 	.word	0x40022000
 80027f8:	40021000 	.word	0x40021000
 80027fc:	080032c8 	.word	0x080032c8
 8002800:	20000048 	.word	0x20000048
 8002804:	2000004c 	.word	0x2000004c

08002808 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002808:	b480      	push	{r7}
 800280a:	b087      	sub	sp, #28
 800280c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800280e:	2300      	movs	r3, #0
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	2300      	movs	r3, #0
 8002814:	60bb      	str	r3, [r7, #8]
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	2300      	movs	r3, #0
 800281c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800281e:	2300      	movs	r3, #0
 8002820:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002822:	4b1e      	ldr	r3, [pc, #120]	; (800289c <HAL_RCC_GetSysClockFreq+0x94>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f003 030c 	and.w	r3, r3, #12
 800282e:	2b04      	cmp	r3, #4
 8002830:	d002      	beq.n	8002838 <HAL_RCC_GetSysClockFreq+0x30>
 8002832:	2b08      	cmp	r3, #8
 8002834:	d003      	beq.n	800283e <HAL_RCC_GetSysClockFreq+0x36>
 8002836:	e027      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002838:	4b19      	ldr	r3, [pc, #100]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800283a:	613b      	str	r3, [r7, #16]
      break;
 800283c:	e027      	b.n	800288e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	0c9b      	lsrs	r3, r3, #18
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	4a17      	ldr	r2, [pc, #92]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002848:	5cd3      	ldrb	r3, [r2, r3]
 800284a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d010      	beq.n	8002878 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002856:	4b11      	ldr	r3, [pc, #68]	; (800289c <HAL_RCC_GetSysClockFreq+0x94>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	0c5b      	lsrs	r3, r3, #17
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	4a11      	ldr	r2, [pc, #68]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002862:	5cd3      	ldrb	r3, [r2, r3]
 8002864:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a0d      	ldr	r2, [pc, #52]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800286a:	fb02 f203 	mul.w	r2, r2, r3
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	fbb2 f3f3 	udiv	r3, r2, r3
 8002874:	617b      	str	r3, [r7, #20]
 8002876:	e004      	b.n	8002882 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a0c      	ldr	r2, [pc, #48]	; (80028ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800287c:	fb02 f303 	mul.w	r3, r2, r3
 8002880:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	613b      	str	r3, [r7, #16]
      break;
 8002886:	e002      	b.n	800288e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002888:	4b05      	ldr	r3, [pc, #20]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800288a:	613b      	str	r3, [r7, #16]
      break;
 800288c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800288e:	693b      	ldr	r3, [r7, #16]
}
 8002890:	4618      	mov	r0, r3
 8002892:	371c      	adds	r7, #28
 8002894:	46bd      	mov	sp, r7
 8002896:	bc80      	pop	{r7}
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	40021000 	.word	0x40021000
 80028a0:	007a1200 	.word	0x007a1200
 80028a4:	080032d8 	.word	0x080032d8
 80028a8:	080032e8 	.word	0x080032e8
 80028ac:	003d0900 	.word	0x003d0900

080028b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028b8:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <RCC_Delay+0x34>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a0a      	ldr	r2, [pc, #40]	; (80028e8 <RCC_Delay+0x38>)
 80028be:	fba2 2303 	umull	r2, r3, r2, r3
 80028c2:	0a5b      	lsrs	r3, r3, #9
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	fb02 f303 	mul.w	r3, r2, r3
 80028ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028cc:	bf00      	nop
  }
  while (Delay --);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	1e5a      	subs	r2, r3, #1
 80028d2:	60fa      	str	r2, [r7, #12]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1f9      	bne.n	80028cc <RCC_Delay+0x1c>
}
 80028d8:	bf00      	nop
 80028da:	bf00      	nop
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr
 80028e4:	20000048 	.word	0x20000048
 80028e8:	10624dd3 	.word	0x10624dd3

080028ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e041      	b.n	8002982 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d106      	bne.n	8002918 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7ff f824 	bl	8001960 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2202      	movs	r2, #2
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3304      	adds	r3, #4
 8002928:	4619      	mov	r1, r3
 800292a:	4610      	mov	r0, r2
 800292c:	f000 fa56 	bl	8002ddc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
	...

0800298c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b01      	cmp	r3, #1
 800299e:	d001      	beq.n	80029a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e035      	b.n	8002a10 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2202      	movs	r2, #2
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0201 	orr.w	r2, r2, #1
 80029ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a16      	ldr	r2, [pc, #88]	; (8002a1c <HAL_TIM_Base_Start_IT+0x90>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d009      	beq.n	80029da <HAL_TIM_Base_Start_IT+0x4e>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ce:	d004      	beq.n	80029da <HAL_TIM_Base_Start_IT+0x4e>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a12      	ldr	r2, [pc, #72]	; (8002a20 <HAL_TIM_Base_Start_IT+0x94>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d111      	bne.n	80029fe <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2b06      	cmp	r3, #6
 80029ea:	d010      	beq.n	8002a0e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0201 	orr.w	r2, r2, #1
 80029fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029fc:	e007      	b.n	8002a0e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f042 0201 	orr.w	r2, r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	40012c00 	.word	0x40012c00
 8002a20:	40000400 	.word	0x40000400

08002a24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d020      	beq.n	8002a88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d01b      	beq.n	8002a88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f06f 0202 	mvn.w	r2, #2
 8002a58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f998 	bl	8002da4 <HAL_TIM_IC_CaptureCallback>
 8002a74:	e005      	b.n	8002a82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f98b 	bl	8002d92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 f99a 	bl	8002db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	f003 0304 	and.w	r3, r3, #4
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d020      	beq.n	8002ad4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d01b      	beq.n	8002ad4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f06f 0204 	mvn.w	r2, #4
 8002aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f972 	bl	8002da4 <HAL_TIM_IC_CaptureCallback>
 8002ac0:	e005      	b.n	8002ace <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f965 	bl	8002d92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f974 	bl	8002db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	f003 0308 	and.w	r3, r3, #8
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d020      	beq.n	8002b20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f003 0308 	and.w	r3, r3, #8
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d01b      	beq.n	8002b20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f06f 0208 	mvn.w	r2, #8
 8002af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2204      	movs	r2, #4
 8002af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f94c 	bl	8002da4 <HAL_TIM_IC_CaptureCallback>
 8002b0c:	e005      	b.n	8002b1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f93f 	bl	8002d92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f94e 	bl	8002db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	f003 0310 	and.w	r3, r3, #16
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d020      	beq.n	8002b6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f003 0310 	and.w	r3, r3, #16
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d01b      	beq.n	8002b6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f06f 0210 	mvn.w	r2, #16
 8002b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2208      	movs	r2, #8
 8002b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f926 	bl	8002da4 <HAL_TIM_IC_CaptureCallback>
 8002b58:	e005      	b.n	8002b66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f919 	bl	8002d92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 f928 	bl	8002db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00c      	beq.n	8002b90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d007      	beq.n	8002b90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f06f 0201 	mvn.w	r2, #1
 8002b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7fe fd5c 	bl	8001648 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00c      	beq.n	8002bb4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d007      	beq.n	8002bb4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 fa6f 	bl	8003092 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00c      	beq.n	8002bd8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d007      	beq.n	8002bd8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f8f8 	bl	8002dc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	f003 0320 	and.w	r3, r3, #32
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00c      	beq.n	8002bfc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f003 0320 	and.w	r3, r3, #32
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d007      	beq.n	8002bfc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f06f 0220 	mvn.w	r2, #32
 8002bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 fa42 	bl	8003080 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bfc:	bf00      	nop
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d101      	bne.n	8002c20 <HAL_TIM_ConfigClockSource+0x1c>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	e0b4      	b.n	8002d8a <HAL_TIM_ConfigClockSource+0x186>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68ba      	ldr	r2, [r7, #8]
 8002c4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c58:	d03e      	beq.n	8002cd8 <HAL_TIM_ConfigClockSource+0xd4>
 8002c5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c5e:	f200 8087 	bhi.w	8002d70 <HAL_TIM_ConfigClockSource+0x16c>
 8002c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c66:	f000 8086 	beq.w	8002d76 <HAL_TIM_ConfigClockSource+0x172>
 8002c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c6e:	d87f      	bhi.n	8002d70 <HAL_TIM_ConfigClockSource+0x16c>
 8002c70:	2b70      	cmp	r3, #112	; 0x70
 8002c72:	d01a      	beq.n	8002caa <HAL_TIM_ConfigClockSource+0xa6>
 8002c74:	2b70      	cmp	r3, #112	; 0x70
 8002c76:	d87b      	bhi.n	8002d70 <HAL_TIM_ConfigClockSource+0x16c>
 8002c78:	2b60      	cmp	r3, #96	; 0x60
 8002c7a:	d050      	beq.n	8002d1e <HAL_TIM_ConfigClockSource+0x11a>
 8002c7c:	2b60      	cmp	r3, #96	; 0x60
 8002c7e:	d877      	bhi.n	8002d70 <HAL_TIM_ConfigClockSource+0x16c>
 8002c80:	2b50      	cmp	r3, #80	; 0x50
 8002c82:	d03c      	beq.n	8002cfe <HAL_TIM_ConfigClockSource+0xfa>
 8002c84:	2b50      	cmp	r3, #80	; 0x50
 8002c86:	d873      	bhi.n	8002d70 <HAL_TIM_ConfigClockSource+0x16c>
 8002c88:	2b40      	cmp	r3, #64	; 0x40
 8002c8a:	d058      	beq.n	8002d3e <HAL_TIM_ConfigClockSource+0x13a>
 8002c8c:	2b40      	cmp	r3, #64	; 0x40
 8002c8e:	d86f      	bhi.n	8002d70 <HAL_TIM_ConfigClockSource+0x16c>
 8002c90:	2b30      	cmp	r3, #48	; 0x30
 8002c92:	d064      	beq.n	8002d5e <HAL_TIM_ConfigClockSource+0x15a>
 8002c94:	2b30      	cmp	r3, #48	; 0x30
 8002c96:	d86b      	bhi.n	8002d70 <HAL_TIM_ConfigClockSource+0x16c>
 8002c98:	2b20      	cmp	r3, #32
 8002c9a:	d060      	beq.n	8002d5e <HAL_TIM_ConfigClockSource+0x15a>
 8002c9c:	2b20      	cmp	r3, #32
 8002c9e:	d867      	bhi.n	8002d70 <HAL_TIM_ConfigClockSource+0x16c>
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d05c      	beq.n	8002d5e <HAL_TIM_ConfigClockSource+0x15a>
 8002ca4:	2b10      	cmp	r3, #16
 8002ca6:	d05a      	beq.n	8002d5e <HAL_TIM_ConfigClockSource+0x15a>
 8002ca8:	e062      	b.n	8002d70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6818      	ldr	r0, [r3, #0]
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	6899      	ldr	r1, [r3, #8]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	f000 f96a 	bl	8002f92 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ccc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	609a      	str	r2, [r3, #8]
      break;
 8002cd6:	e04f      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6818      	ldr	r0, [r3, #0]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	6899      	ldr	r1, [r3, #8]
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f000 f953 	bl	8002f92 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cfa:	609a      	str	r2, [r3, #8]
      break;
 8002cfc:	e03c      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6818      	ldr	r0, [r3, #0]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	6859      	ldr	r1, [r3, #4]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	f000 f8ca 	bl	8002ea4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2150      	movs	r1, #80	; 0x50
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 f921 	bl	8002f5e <TIM_ITRx_SetConfig>
      break;
 8002d1c:	e02c      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6818      	ldr	r0, [r3, #0]
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	6859      	ldr	r1, [r3, #4]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	f000 f8e8 	bl	8002f00 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2160      	movs	r1, #96	; 0x60
 8002d36:	4618      	mov	r0, r3
 8002d38:	f000 f911 	bl	8002f5e <TIM_ITRx_SetConfig>
      break;
 8002d3c:	e01c      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6818      	ldr	r0, [r3, #0]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	6859      	ldr	r1, [r3, #4]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	f000 f8aa 	bl	8002ea4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2140      	movs	r1, #64	; 0x40
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 f901 	bl	8002f5e <TIM_ITRx_SetConfig>
      break;
 8002d5c:	e00c      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4619      	mov	r1, r3
 8002d68:	4610      	mov	r0, r2
 8002d6a:	f000 f8f8 	bl	8002f5e <TIM_ITRx_SetConfig>
      break;
 8002d6e:	e003      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	73fb      	strb	r3, [r7, #15]
      break;
 8002d74:	e000      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr

08002da4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc80      	pop	{r7}
 8002db4:	4770      	bx	lr

08002db6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bc80      	pop	{r7}
 8002dd8:	4770      	bx	lr
	...

08002ddc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a2b      	ldr	r2, [pc, #172]	; (8002e9c <TIM_Base_SetConfig+0xc0>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d007      	beq.n	8002e04 <TIM_Base_SetConfig+0x28>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dfa:	d003      	beq.n	8002e04 <TIM_Base_SetConfig+0x28>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a28      	ldr	r2, [pc, #160]	; (8002ea0 <TIM_Base_SetConfig+0xc4>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d108      	bne.n	8002e16 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a20      	ldr	r2, [pc, #128]	; (8002e9c <TIM_Base_SetConfig+0xc0>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d007      	beq.n	8002e2e <TIM_Base_SetConfig+0x52>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e24:	d003      	beq.n	8002e2e <TIM_Base_SetConfig+0x52>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a1d      	ldr	r2, [pc, #116]	; (8002ea0 <TIM_Base_SetConfig+0xc4>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d108      	bne.n	8002e40 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a0d      	ldr	r2, [pc, #52]	; (8002e9c <TIM_Base_SetConfig+0xc0>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d103      	bne.n	8002e74 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	691a      	ldr	r2, [r3, #16]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d005      	beq.n	8002e92 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	f023 0201 	bic.w	r2, r3, #1
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	611a      	str	r2, [r3, #16]
  }
}
 8002e92:	bf00      	nop
 8002e94:	3714      	adds	r7, #20
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr
 8002e9c:	40012c00 	.word	0x40012c00
 8002ea0:	40000400 	.word	0x40000400

08002ea4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b087      	sub	sp, #28
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	f023 0201 	bic.w	r2, r3, #1
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f023 030a 	bic.w	r3, r3, #10
 8002ee0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	621a      	str	r2, [r3, #32]
}
 8002ef6:	bf00      	nop
 8002ef8:	371c      	adds	r7, #28
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr

08002f00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b087      	sub	sp, #28
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	f023 0210 	bic.w	r2, r3, #16
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	031b      	lsls	r3, r3, #12
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f3c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	011b      	lsls	r3, r3, #4
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	621a      	str	r2, [r3, #32]
}
 8002f54:	bf00      	nop
 8002f56:	371c      	adds	r7, #28
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bc80      	pop	{r7}
 8002f5c:	4770      	bx	lr

08002f5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b085      	sub	sp, #20
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
 8002f66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	f043 0307 	orr.w	r3, r3, #7
 8002f80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	609a      	str	r2, [r3, #8]
}
 8002f88:	bf00      	nop
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr

08002f92 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b087      	sub	sp, #28
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	60f8      	str	r0, [r7, #12]
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	607a      	str	r2, [r7, #4]
 8002f9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	021a      	lsls	r2, r3, #8
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	609a      	str	r2, [r3, #8]
}
 8002fc6:	bf00      	nop
 8002fc8:	371c      	adds	r7, #28
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr

08002fd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d101      	bne.n	8002fe8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	e041      	b.n	800306c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800300e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	4313      	orrs	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a14      	ldr	r2, [pc, #80]	; (8003078 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d009      	beq.n	8003040 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003034:	d004      	beq.n	8003040 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a10      	ldr	r2, [pc, #64]	; (800307c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d10c      	bne.n	800305a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003046:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	4313      	orrs	r3, r2
 8003050:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	bc80      	pop	{r7}
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	40012c00 	.word	0x40012c00
 800307c:	40000400 	.word	0x40000400

08003080 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	bc80      	pop	{r7}
 8003090:	4770      	bx	lr

08003092 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003092:	b480      	push	{r7}
 8003094:	b083      	sub	sp, #12
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc80      	pop	{r7}
 80030a2:	4770      	bx	lr

080030a4 <__errno>:
 80030a4:	4b01      	ldr	r3, [pc, #4]	; (80030ac <__errno+0x8>)
 80030a6:	6818      	ldr	r0, [r3, #0]
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	20000054 	.word	0x20000054

080030b0 <__libc_init_array>:
 80030b0:	b570      	push	{r4, r5, r6, lr}
 80030b2:	2600      	movs	r6, #0
 80030b4:	4d0c      	ldr	r5, [pc, #48]	; (80030e8 <__libc_init_array+0x38>)
 80030b6:	4c0d      	ldr	r4, [pc, #52]	; (80030ec <__libc_init_array+0x3c>)
 80030b8:	1b64      	subs	r4, r4, r5
 80030ba:	10a4      	asrs	r4, r4, #2
 80030bc:	42a6      	cmp	r6, r4
 80030be:	d109      	bne.n	80030d4 <__libc_init_array+0x24>
 80030c0:	f000 f8f6 	bl	80032b0 <_init>
 80030c4:	2600      	movs	r6, #0
 80030c6:	4d0a      	ldr	r5, [pc, #40]	; (80030f0 <__libc_init_array+0x40>)
 80030c8:	4c0a      	ldr	r4, [pc, #40]	; (80030f4 <__libc_init_array+0x44>)
 80030ca:	1b64      	subs	r4, r4, r5
 80030cc:	10a4      	asrs	r4, r4, #2
 80030ce:	42a6      	cmp	r6, r4
 80030d0:	d105      	bne.n	80030de <__libc_init_array+0x2e>
 80030d2:	bd70      	pop	{r4, r5, r6, pc}
 80030d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80030d8:	4798      	blx	r3
 80030da:	3601      	adds	r6, #1
 80030dc:	e7ee      	b.n	80030bc <__libc_init_array+0xc>
 80030de:	f855 3b04 	ldr.w	r3, [r5], #4
 80030e2:	4798      	blx	r3
 80030e4:	3601      	adds	r6, #1
 80030e6:	e7f2      	b.n	80030ce <__libc_init_array+0x1e>
 80030e8:	080032ec 	.word	0x080032ec
 80030ec:	080032ec 	.word	0x080032ec
 80030f0:	080032ec 	.word	0x080032ec
 80030f4:	080032f0 	.word	0x080032f0

080030f8 <malloc>:
 80030f8:	4b02      	ldr	r3, [pc, #8]	; (8003104 <malloc+0xc>)
 80030fa:	4601      	mov	r1, r0
 80030fc:	6818      	ldr	r0, [r3, #0]
 80030fe:	f000 b85f 	b.w	80031c0 <_malloc_r>
 8003102:	bf00      	nop
 8003104:	20000054 	.word	0x20000054

08003108 <free>:
 8003108:	4b02      	ldr	r3, [pc, #8]	; (8003114 <free+0xc>)
 800310a:	4601      	mov	r1, r0
 800310c:	6818      	ldr	r0, [r3, #0]
 800310e:	f000 b80b 	b.w	8003128 <_free_r>
 8003112:	bf00      	nop
 8003114:	20000054 	.word	0x20000054

08003118 <memset>:
 8003118:	4603      	mov	r3, r0
 800311a:	4402      	add	r2, r0
 800311c:	4293      	cmp	r3, r2
 800311e:	d100      	bne.n	8003122 <memset+0xa>
 8003120:	4770      	bx	lr
 8003122:	f803 1b01 	strb.w	r1, [r3], #1
 8003126:	e7f9      	b.n	800311c <memset+0x4>

08003128 <_free_r>:
 8003128:	b538      	push	{r3, r4, r5, lr}
 800312a:	4605      	mov	r5, r0
 800312c:	2900      	cmp	r1, #0
 800312e:	d043      	beq.n	80031b8 <_free_r+0x90>
 8003130:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003134:	1f0c      	subs	r4, r1, #4
 8003136:	2b00      	cmp	r3, #0
 8003138:	bfb8      	it	lt
 800313a:	18e4      	addlt	r4, r4, r3
 800313c:	f000 f8aa 	bl	8003294 <__malloc_lock>
 8003140:	4a1e      	ldr	r2, [pc, #120]	; (80031bc <_free_r+0x94>)
 8003142:	6813      	ldr	r3, [r2, #0]
 8003144:	4610      	mov	r0, r2
 8003146:	b933      	cbnz	r3, 8003156 <_free_r+0x2e>
 8003148:	6063      	str	r3, [r4, #4]
 800314a:	6014      	str	r4, [r2, #0]
 800314c:	4628      	mov	r0, r5
 800314e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003152:	f000 b8a5 	b.w	80032a0 <__malloc_unlock>
 8003156:	42a3      	cmp	r3, r4
 8003158:	d90a      	bls.n	8003170 <_free_r+0x48>
 800315a:	6821      	ldr	r1, [r4, #0]
 800315c:	1862      	adds	r2, r4, r1
 800315e:	4293      	cmp	r3, r2
 8003160:	bf01      	itttt	eq
 8003162:	681a      	ldreq	r2, [r3, #0]
 8003164:	685b      	ldreq	r3, [r3, #4]
 8003166:	1852      	addeq	r2, r2, r1
 8003168:	6022      	streq	r2, [r4, #0]
 800316a:	6063      	str	r3, [r4, #4]
 800316c:	6004      	str	r4, [r0, #0]
 800316e:	e7ed      	b.n	800314c <_free_r+0x24>
 8003170:	461a      	mov	r2, r3
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	b10b      	cbz	r3, 800317a <_free_r+0x52>
 8003176:	42a3      	cmp	r3, r4
 8003178:	d9fa      	bls.n	8003170 <_free_r+0x48>
 800317a:	6811      	ldr	r1, [r2, #0]
 800317c:	1850      	adds	r0, r2, r1
 800317e:	42a0      	cmp	r0, r4
 8003180:	d10b      	bne.n	800319a <_free_r+0x72>
 8003182:	6820      	ldr	r0, [r4, #0]
 8003184:	4401      	add	r1, r0
 8003186:	1850      	adds	r0, r2, r1
 8003188:	4283      	cmp	r3, r0
 800318a:	6011      	str	r1, [r2, #0]
 800318c:	d1de      	bne.n	800314c <_free_r+0x24>
 800318e:	6818      	ldr	r0, [r3, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	4401      	add	r1, r0
 8003194:	6011      	str	r1, [r2, #0]
 8003196:	6053      	str	r3, [r2, #4]
 8003198:	e7d8      	b.n	800314c <_free_r+0x24>
 800319a:	d902      	bls.n	80031a2 <_free_r+0x7a>
 800319c:	230c      	movs	r3, #12
 800319e:	602b      	str	r3, [r5, #0]
 80031a0:	e7d4      	b.n	800314c <_free_r+0x24>
 80031a2:	6820      	ldr	r0, [r4, #0]
 80031a4:	1821      	adds	r1, r4, r0
 80031a6:	428b      	cmp	r3, r1
 80031a8:	bf01      	itttt	eq
 80031aa:	6819      	ldreq	r1, [r3, #0]
 80031ac:	685b      	ldreq	r3, [r3, #4]
 80031ae:	1809      	addeq	r1, r1, r0
 80031b0:	6021      	streq	r1, [r4, #0]
 80031b2:	6063      	str	r3, [r4, #4]
 80031b4:	6054      	str	r4, [r2, #4]
 80031b6:	e7c9      	b.n	800314c <_free_r+0x24>
 80031b8:	bd38      	pop	{r3, r4, r5, pc}
 80031ba:	bf00      	nop
 80031bc:	200000f0 	.word	0x200000f0

080031c0 <_malloc_r>:
 80031c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031c2:	1ccd      	adds	r5, r1, #3
 80031c4:	f025 0503 	bic.w	r5, r5, #3
 80031c8:	3508      	adds	r5, #8
 80031ca:	2d0c      	cmp	r5, #12
 80031cc:	bf38      	it	cc
 80031ce:	250c      	movcc	r5, #12
 80031d0:	2d00      	cmp	r5, #0
 80031d2:	4606      	mov	r6, r0
 80031d4:	db01      	blt.n	80031da <_malloc_r+0x1a>
 80031d6:	42a9      	cmp	r1, r5
 80031d8:	d903      	bls.n	80031e2 <_malloc_r+0x22>
 80031da:	230c      	movs	r3, #12
 80031dc:	6033      	str	r3, [r6, #0]
 80031de:	2000      	movs	r0, #0
 80031e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031e2:	f000 f857 	bl	8003294 <__malloc_lock>
 80031e6:	4921      	ldr	r1, [pc, #132]	; (800326c <_malloc_r+0xac>)
 80031e8:	680a      	ldr	r2, [r1, #0]
 80031ea:	4614      	mov	r4, r2
 80031ec:	b99c      	cbnz	r4, 8003216 <_malloc_r+0x56>
 80031ee:	4f20      	ldr	r7, [pc, #128]	; (8003270 <_malloc_r+0xb0>)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	b923      	cbnz	r3, 80031fe <_malloc_r+0x3e>
 80031f4:	4621      	mov	r1, r4
 80031f6:	4630      	mov	r0, r6
 80031f8:	f000 f83c 	bl	8003274 <_sbrk_r>
 80031fc:	6038      	str	r0, [r7, #0]
 80031fe:	4629      	mov	r1, r5
 8003200:	4630      	mov	r0, r6
 8003202:	f000 f837 	bl	8003274 <_sbrk_r>
 8003206:	1c43      	adds	r3, r0, #1
 8003208:	d123      	bne.n	8003252 <_malloc_r+0x92>
 800320a:	230c      	movs	r3, #12
 800320c:	4630      	mov	r0, r6
 800320e:	6033      	str	r3, [r6, #0]
 8003210:	f000 f846 	bl	80032a0 <__malloc_unlock>
 8003214:	e7e3      	b.n	80031de <_malloc_r+0x1e>
 8003216:	6823      	ldr	r3, [r4, #0]
 8003218:	1b5b      	subs	r3, r3, r5
 800321a:	d417      	bmi.n	800324c <_malloc_r+0x8c>
 800321c:	2b0b      	cmp	r3, #11
 800321e:	d903      	bls.n	8003228 <_malloc_r+0x68>
 8003220:	6023      	str	r3, [r4, #0]
 8003222:	441c      	add	r4, r3
 8003224:	6025      	str	r5, [r4, #0]
 8003226:	e004      	b.n	8003232 <_malloc_r+0x72>
 8003228:	6863      	ldr	r3, [r4, #4]
 800322a:	42a2      	cmp	r2, r4
 800322c:	bf0c      	ite	eq
 800322e:	600b      	streq	r3, [r1, #0]
 8003230:	6053      	strne	r3, [r2, #4]
 8003232:	4630      	mov	r0, r6
 8003234:	f000 f834 	bl	80032a0 <__malloc_unlock>
 8003238:	f104 000b 	add.w	r0, r4, #11
 800323c:	1d23      	adds	r3, r4, #4
 800323e:	f020 0007 	bic.w	r0, r0, #7
 8003242:	1ac2      	subs	r2, r0, r3
 8003244:	d0cc      	beq.n	80031e0 <_malloc_r+0x20>
 8003246:	1a1b      	subs	r3, r3, r0
 8003248:	50a3      	str	r3, [r4, r2]
 800324a:	e7c9      	b.n	80031e0 <_malloc_r+0x20>
 800324c:	4622      	mov	r2, r4
 800324e:	6864      	ldr	r4, [r4, #4]
 8003250:	e7cc      	b.n	80031ec <_malloc_r+0x2c>
 8003252:	1cc4      	adds	r4, r0, #3
 8003254:	f024 0403 	bic.w	r4, r4, #3
 8003258:	42a0      	cmp	r0, r4
 800325a:	d0e3      	beq.n	8003224 <_malloc_r+0x64>
 800325c:	1a21      	subs	r1, r4, r0
 800325e:	4630      	mov	r0, r6
 8003260:	f000 f808 	bl	8003274 <_sbrk_r>
 8003264:	3001      	adds	r0, #1
 8003266:	d1dd      	bne.n	8003224 <_malloc_r+0x64>
 8003268:	e7cf      	b.n	800320a <_malloc_r+0x4a>
 800326a:	bf00      	nop
 800326c:	200000f0 	.word	0x200000f0
 8003270:	200000f4 	.word	0x200000f4

08003274 <_sbrk_r>:
 8003274:	b538      	push	{r3, r4, r5, lr}
 8003276:	2300      	movs	r3, #0
 8003278:	4d05      	ldr	r5, [pc, #20]	; (8003290 <_sbrk_r+0x1c>)
 800327a:	4604      	mov	r4, r0
 800327c:	4608      	mov	r0, r1
 800327e:	602b      	str	r3, [r5, #0]
 8003280:	f7fe fbc4 	bl	8001a0c <_sbrk>
 8003284:	1c43      	adds	r3, r0, #1
 8003286:	d102      	bne.n	800328e <_sbrk_r+0x1a>
 8003288:	682b      	ldr	r3, [r5, #0]
 800328a:	b103      	cbz	r3, 800328e <_sbrk_r+0x1a>
 800328c:	6023      	str	r3, [r4, #0]
 800328e:	bd38      	pop	{r3, r4, r5, pc}
 8003290:	20000164 	.word	0x20000164

08003294 <__malloc_lock>:
 8003294:	4801      	ldr	r0, [pc, #4]	; (800329c <__malloc_lock+0x8>)
 8003296:	f000 b809 	b.w	80032ac <__retarget_lock_acquire_recursive>
 800329a:	bf00      	nop
 800329c:	2000016c 	.word	0x2000016c

080032a0 <__malloc_unlock>:
 80032a0:	4801      	ldr	r0, [pc, #4]	; (80032a8 <__malloc_unlock+0x8>)
 80032a2:	f000 b804 	b.w	80032ae <__retarget_lock_release_recursive>
 80032a6:	bf00      	nop
 80032a8:	2000016c 	.word	0x2000016c

080032ac <__retarget_lock_acquire_recursive>:
 80032ac:	4770      	bx	lr

080032ae <__retarget_lock_release_recursive>:
 80032ae:	4770      	bx	lr

080032b0 <_init>:
 80032b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032b2:	bf00      	nop
 80032b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032b6:	bc08      	pop	{r3}
 80032b8:	469e      	mov	lr, r3
 80032ba:	4770      	bx	lr

080032bc <_fini>:
 80032bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032be:	bf00      	nop
 80032c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032c2:	bc08      	pop	{r3}
 80032c4:	469e      	mov	lr, r3
 80032c6:	4770      	bx	lr
